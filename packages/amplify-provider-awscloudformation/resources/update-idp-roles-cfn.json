{
  "UpdateRolesWithIDPFunction": {
    "DependsOn": ["AuthRole", "UnauthRole"],
    "Type": "AWS::Lambda::Function",
    "Properties": {
      "Code": {
        "ZipFile": {
          "Fn::Join": [
            "\n",
            [
              "const response = require('cfn-response');",
              "const { IAMClient, GetRoleCommand, UpdateAssumeRolePolicyCommand } = require('@aws-sdk/client-iam');",
              "exports.handler = function(event, context) {",
              "    // Don't return promise, response.send() marks context as done internally",
              "    const ignoredPromise = handleEvent(event, context)",
              "};",
              "async function handleEvent(event, context) {",
              "    try {",
              "        let authRoleName = event.ResourceProperties.authRoleName;",
              "        let unauthRoleName = event.ResourceProperties.unauthRoleName;",
              "        let idpId = event.ResourceProperties.idpId;",
              "        let authParamsJson = {",
              "            'Version': '2012-10-17',",
              "            'Statement': [{",
              "                'Effect': 'Allow',",
              "                'Principal': {'Federated': 'cognito-identity.amazonaws.com'},",
              "                'Action': 'sts:AssumeRoleWithWebIdentity',",
              "                'Condition': {",
              "                    'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},",
              "                    'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'authenticated'}",
              "                }",
              "            }]",
              "        };",
              "        let unauthParamsJson = {",
              "            'Version': '2012-10-17',",
              "            'Statement': [{",
              "                'Effect': 'Allow',",
              "                'Principal': {'Federated': 'cognito-identity.amazonaws.com'},",
              "                'Action': 'sts:AssumeRoleWithWebIdentity',",
              "                'Condition': {",
              "                    'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},",
              "                    'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated'}",
              "                }",
              "            }]",
              "        };",
              "        if (event.RequestType === 'Delete') {",
              "            try {",
              "                delete authParamsJson.Statement[0].Condition;",
              "                delete unauthParamsJson.Statement[0].Condition;",
              "                authParamsJson.Statement[0].Effect = 'Deny'",
              "                unauthParamsJson.Statement[0].Effect = 'Deny'",
              "                let authParams = {PolicyDocument: JSON.stringify(authParamsJson), RoleName: authRoleName};",
              "                let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson), RoleName: unauthRoleName};",
              "                const iam = new IAMClient({region: event.ResourceProperties.region});",
              "                let res = await Promise.all([",
              "                    iam.send(new GetRoleCommand({RoleName: authParams.RoleName})),",
              "                    iam.send(new GetRoleCommand({RoleName: unauthParams.RoleName}))",
              "                ]);",
              "                res = await Promise.all([",
              "                    iam.send(new UpdateAssumeRolePolicyCommand(authParams)),",
              "                    iam.send(new UpdateAssumeRolePolicyCommand(unauthParams))",
              "                ]);",
              "                response.send(event, context, response.SUCCESS, {});",
              "            } catch (err) {",
              "                console.log(err.stack);",
              "                response.send(event, context, response.SUCCESS, {Error: err});",
              "            }",
              "        } else if (event.RequestType === 'Update' || event.RequestType === 'Create') {",
              "            const iam = new IAMClient({region: event.ResourceProperties.region});",
              "            let authParams = {PolicyDocument: JSON.stringify(authParamsJson), RoleName: authRoleName};",
              "            let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson), RoleName: unauthRoleName};",
              "            const res = await Promise.all([",
              "                iam.send(new UpdateAssumeRolePolicyCommand(authParams)),",
              "                iam.send(new UpdateAssumeRolePolicyCommand(unauthParams))",
              "            ]);",
              "            response.send(event, context, response.SUCCESS, {});",
              "        }",
              "    } catch (err) {",
              "        console.log(err.stack);",
              "        response.send(event, context, response.FAILED, {Error: err});",
              "    }",
              "};"
            ]
          ]
        }
      },
      "Handler": "index.handler",
      "Runtime": "nodejs18.x",
      "Timeout": 300,
      "Role": {
        "Fn::GetAtt": ["UpdateRolesWithIDPFunctionRole", "Arn"]
      }
    }
  },
  "UpdateRolesWithIDPFunctionOutputs": {
    "Type": "Custom::LambdaCallout",
    "Properties": {
      "ServiceToken": {
        "Fn::GetAtt": ["UpdateRolesWithIDPFunction", "Arn"]
      },
      "region": {
        "Ref": "AWS::Region"
      },
      "idpId": {
        "Fn::GetAtt": ["Outputs.IdentityPoolId"]
      },
      "authRoleName": {
        "Ref": "AuthRole"
      },
      "unauthRoleName": {
        "Ref": "UnauthRole"
      }
    }
  },
  "UpdateRolesWithIDPFunctionRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "RoleName": {
        "Fn::Join": [
          "",
          [
            {
              "Ref": "AuthRole"
            },
            "-idp"
          ]
        ]
      },
      "AssumeRolePolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }
        ]
      },
      "Policies": [
        {
          "PolicyName": "UpdateRolesWithIDPFunctionPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
                "Resource": "arn:aws:logs:*:*:*"
              },
              {
                "Effect": "Allow",
                "Action": ["iam:UpdateAssumeRolePolicy", "iam:GetRole"],
                "Resource": {
                  "Fn::GetAtt": ["AuthRole", "Arn"]
                }
              },
              {
                "Effect": "Allow",
                "Action": ["iam:UpdateAssumeRolePolicy", "iam:GetRole"],
                "Resource": {
                  "Fn::GetAtt": ["UnauthRole", "Arn"]
                }
              }
            ]
          }
        }
      ]
    }
  }
}
