export declare const PathConstants: {
    DotAWSDirName: string;
    AWSCredentials: string;
    AWSConfig: string;
    DeploymentSecretsFileName: string;
    AmplifyAdminDirName: string;
    AmplifyDirName: string;
    DotAmplifyDirName: string;
    DotConfigDirName: string;
    BackendDirName: string;
    CurrentCloudBackendDirName: string;
    HooksDirName: string;
    BuildDirName: string;
    OverrideDirName: string;
    ProviderName: string;
    CfnStacksBuildDirName: string;
    AmplifyAdminConfigFileName: string;
    AmplifyRcFileName: string;
    GitIgnoreFileName: string;
    ProjectConfigFileName: string;
    AmplifyMetaFileName: string;
    TagsFileName: string;
    ParametersJsonFileName: string;
    ReadMeFileName: string;
    HooksConfigFileName: string;
    HooksShellSampleFileName: string;
    HooksJsSampleFileName: string;
    HooksReadmeFileName: string;
    LocalEnvFileName: string;
    LocalAWSInfoFileName: string;
    TeamProviderInfoFileName: string;
    BackendConfigFileName: string;
    CLIJSONFileName: string;
    CLIJSONFileNameGlob: string;
    CLIJsonWithEnvironmentFileName: (env: string) => string;
    CLIInputsJsonFileName: string;
    CfnFileName: (resourceName: string) => string;
    CustomPoliciesFilename: string;
    DefaultFrontEndExportFolder: string;
    DefaultExportFolder: string;
    ExportManifestJsonFilename: string;
    ExportTagsJsonFileName: string;
    ExportCategoryStackMappingJsonFilename: string;
    OverrideFileName: string;
};
export declare class PathManager {
    private readonly homeDotAmplifyDirPath;
    constructor();
    getAmplifyPackageLibDirPath: (packageName: string) => string;
    getAmplifyLibRoot: () => string;
    getHomeDotAmplifyDirPath: () => string;
    getAmplifyAdminDirPath: () => string;
    getAmplifyAdminConfigFilePath: () => string;
    getAmplifyDirPath: (projectPath?: string) => string;
    getDotConfigDirPath: (projectPath?: string) => string;
    getBackendDirPath: (projectPath?: string) => string;
    getCurrentCloudBackendDirPath: (projectPath?: string) => string;
    getCurrentResourceParametersJsonPath: (projectPath: string | undefined, categoryName: string, resourceName: string) => string;
    getCurrentCfnTemplatePath: (projectPath: string | undefined, categoryName: string, resourceName: string) => string;
    getAmplifyRcFilePath: (projectPath?: string) => string;
    getGitIgnoreFilePath: (projectPath?: string) => string;
    getTeamProviderInfoFilePath: (projectPath?: string) => string;
    getProjectConfigFilePath: (projectPath?: string) => string;
    getLocalEnvFilePath: (projectPath?: string) => string;
    getLocalAWSInfoFilePath: (projectPath?: string) => string;
    getAmplifyMetaFilePath: (projectPath?: string) => string;
    getBackendConfigFilePath: (projectPath?: string) => string;
    getTagFilePath: (projectPath?: string) => string;
    getCurrentTagFilePath: (projectPath?: string) => string;
    getResourceDirectoryPath: (projectPath: string | undefined, category: string, resourceName: string) => string;
    getResourceInputsJsonFilePath: (projectPath: string | undefined, category: string, resourceName: string) => string;
    getResourceParametersFilePath: (projectPath: string | undefined, category: string, resourceName: string) => string;
    getResourceCfnTemplatePath: (projectPath: string | undefined, category: string, resourceName: string, buildDirectory?: boolean) => string;
    getReadMeFilePath: (projectPath?: string) => string;
    getCurrentAmplifyMetaFilePath: (projectPath?: string) => string;
    getCurrentBackendConfigFilePath: (projectPath?: string) => string;
    getDotAWSDirPath: () => string;
    getCustomPoliciesPath: (category: string, resourceName: string) => string;
    getAWSCredentialsFilePath: () => string;
    getAWSConfigFilePath: () => string;
    getCLIJSONFilePath: (projectPath: string, env?: string) => string;
    getDotAWSAmplifyDirPath: () => string;
    getDeploymentSecrets: () => string;
    getHooksDirPath: (projectPath?: string) => string;
    getHooksConfigFilePath: (projectPath?: string) => string;
    getOverrideDirPath: (projectPath: string, category: string, resourceName: string) => string;
    getRootOverrideDirPath: (projectPath: string) => string;
    getRootStackBuildDirPath: (projectPath: string) => string;
    getCurrentCloudRootStackDirPath: (projectPath: string) => string;
    getResourceOverrideFilePath: (projectPath: string | undefined, category: string, resourceName: string) => string;
    private constructPath;
    private validateProjectPath;
    findProjectRoot: () => string | undefined;
}
export declare const pathManager: PathManager;
//# sourceMappingURL=pathManager.d.ts.map