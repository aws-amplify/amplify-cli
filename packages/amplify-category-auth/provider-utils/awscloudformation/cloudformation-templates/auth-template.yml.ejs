AWSTemplateFormatVersion: 2010-09-09

Parameters:
  env:
    Type: String
  authRoleName:
    Type: String
  unauthRoleName:
    Type: String
  authRoleArn:
    Type: String
  unauthRoleArn:
    Type: String

  <%_ for (var i = 0; i < Object.keys(props).length; i++) { -%>
    <%_ if (typeof Object.values(props)[i] === 'string' || Object.values(props)[i].value) { -%>
  <%= Object.keys(props)[i] %>:
    Type: String
    <%_ } -%>
    <%_ if (typeof Object.values(props)[i] === 'boolean') { -%>
  <%= Object.keys(props)[i] %>:
    Type: String
    <%_ } -%>
    <%_ if (typeof Object.values(props)[i] === 'number') { -%>
  <%= Object.keys(props)[i] %>:
    Type: Number
    <%_ } -%>
    <%_ if (Array.isArray(Object.values(props)[i])) { -%>
  <%= Object.keys(props)[i] %>:
    Type: CommaDelimitedList
    <%_ } -%>
  <%_ } -%>

Conditions:
  ShouldNotCreateEnvResources: !Equals [!Ref env, NONE]

Resources:
  <%_ if (props.authSelections !== 'identityPoolOnly') { -%>
  # BEGIN SNS ROLE RESOURCE
  SNSRole:
  # Created to allow the UserPool SMS Config to publish via the Simple Notification Service during MFA Process
    Type: AWS::IAM::Role
    Properties:
      RoleName: !If
        - ShouldNotCreateEnvResources
        - !Ref roleName
        - !Sub ${roleName}-${env}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref roleExternalId
      Policies:
        -
          PolicyName: !Ref policyName
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'

  # BEGIN USER POOL RESOURCES
  UserPool:
  # Created upon user selection
  # Depends on SNS Role for Arn if MFA is enabled
    Type: AWS::Cognito::UserPool
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: !If
        - ShouldNotCreateEnvResources
        - !Ref userPoolName
        - !Sub ${userPoolName}-${env}
      Schema:
        <%_ for (var i = 0; i < props.requiredAttributes.length; i++) { -%>
        -
          Name: <%= props.requiredAttributes[i] %>
          Required: true
          Mutable: true
        <%_ } -%>
      <%_ if (props.autoVerifiedAttributes && props.autoVerifiedAttributes.length > 0) { -%>
      AutoVerifiedAttributes: !Ref autoVerifiedAttributes
      <%_ } -%>
      <%_ if (props.autoVerifiedAttributes.includes('email')) { -%>
      EmailVerificationMessage: !Ref emailVerificationMessage
      EmailVerificationSubject: !Ref emailVerificationSubject
      <%_ } -%>
      Policies:
        PasswordPolicy:
          MinimumLength: !Ref passwordPolicyMinLength
          RequireLowercase: <%= props.passwordPolicyCharacters.includes('Requires Lowercase') %>
          RequireNumbers: <%= props.passwordPolicyCharacters.includes('Requires Numbers') %>
          RequireSymbols: <%= props.passwordPolicyCharacters.includes('Requires Symbols') %>
          RequireUppercase: <%= props.passwordPolicyCharacters.includes('Requires Uppercase') %>
      MfaConfiguration: !Ref mfaConfiguration
      SmsVerificationMessage: !Ref smsVerificationMessage
      SmsConfiguration:
        SnsCallerArn: !GetAtt SNSRole.Arn
        ExternalId: !Ref roleExternalId
    <%_ if (props.mfaConfiguration !== 'OFF') { -%>
    DependsOn: SNSRole
    <%_ } -%>

  UserPoolClientWeb:
  # Created provide application access to user pool
  # Depends on UserPool for ID reference
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: <%= props.userpoolClientName %>Web
      <%_ if (props.userpoolClientSetAttributes) { -%>
      ReadAttributes: !Ref userpoolClientReadAttributes
      WriteAttributes: !Ref userpoolClientWriteAttributes
      <%_ } -%>
      RefreshTokenValidity: !Ref userpoolClientRefreshTokenValidity
      UserPoolId: !Ref UserPool
    DependsOn: UserPool

  UserPoolClient:
  # Created provide application access to user pool
  # Depends on UserPool for ID reference
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Ref userpoolClientName
      <%_ if (props.userpoolClientSetAttributes) { -%>
      ReadAttributes: !Ref userpoolClientReadAttributes
      WriteAttributes: !Ref userpoolClientWriteAttributes
      <%_ } -%>
      GenerateSecret: !Ref userpoolClientGenerateSecret
      RefreshTokenValidity: !Ref userpoolClientRefreshTokenValidity
      UserPoolId: !Ref UserPool
    DependsOn: UserPool

  # BEGIN USER POOL LAMBDA RESOURCES
  UserPoolClientRole:
  # Created to execute Lambda which gets userpool app client config values
    Type: AWS::IAM::Role
    Properties:
      RoleName: !If
        - ShouldNotCreateEnvResources
        - !Ref userpoolClientLambdaRole
        - !Sub ${userpoolClientLambdaRole}-${env}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    DependsOn: UserPoolClient

  UserPoolClientLambda:
  # Lambda which gets userpool app client config values
  # Depends on UserPool for id
  # Depends on UserPoolClientRole for role ARN
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |+
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const identity = new aws.CognitoIdentityServiceProvider();
          exports.handler = (event, context, callback) => {
            if (event.RequestType === 'Delete') {
              response.send(event, context, response.SUCCESS, {})
            }
            if (event.RequestType === 'Update' || event.RequestType === 'Create') {
              const params = {
                ClientId: event.ResourceProperties.clientId,
                UserPoolId: event.ResourceProperties.userpoolId
              };
              identity.describeUserPoolClient(params).promise()
                .then((res) => {
                  response.send(event, context, response.SUCCESS, {
                    appSecret: res.UserPoolClient.ClientSecret
                  });
                })
                .catch((err) => {
                  response.send(event, context, response.FAILED, {err});
               });
            }
          };
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: 300
      Role: !GetAtt UserPoolClientRole.Arn
    DependsOn: UserPoolClientRole

  UserPoolClientLambdaPolicy:
  # Sets userpool policy for the role that executes the Userpool Client Lambda
  # Depends on UserPool for Arn
  # Marked as depending on UserPoolClientRole for easier to understand CFN sequencing
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref userpoolClientLambdaPolicy
      Roles:
        - !If
          - ShouldNotCreateEnvResources
          - !Ref userpoolClientLambdaRole
          - !Sub ${userpoolClientLambdaRole}-${env}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
            Resource: !GetAtt UserPool.Arn
    DependsOn: UserPoolClientLambda

  UserPoolClientLogPolicy:
  # Sets log policy for the role that executes the Userpool Client Lambda
  # Depends on UserPool for Arn
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref userpoolClientLogPolicy
      Roles:
        - !If
          - ShouldNotCreateEnvResources
          - !Ref userpoolClientLambdaRole
          - !Sub ${userpoolClientLambdaRole}-${env}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${UserPoolClientLambda}:log-stream:*
    DependsOn: UserPoolClientLambdaPolicy

  UserPoolClientInputs:
  # Values passed to Userpool client Lambda
  # Depends on UserPool for Id
  # Depends on UserPoolClient for Id
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken: !GetAtt UserPoolClientLambda.Arn
      clientId: !Ref UserPoolClient
      userpoolId: !Ref UserPool
    DependsOn: UserPoolClientLogPolicy

  <%_ if (props.mfaConfiguration !== 'OFF') { -%>
  # BEGIN MFA LAMBDA RESOURCES
  MFALambdaRole:
  # Created to execute Lambda which sets MFA config values
    Type: AWS::IAM::Role
    Properties:
      RoleName: !If
        - ShouldNotCreateEnvResources
        - !Ref mfaLambdaRole
        - !Sub ${mfaLambdaRole}-${env}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Ref mfaPassRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !If
                  - ShouldNotCreateEnvResources
                  - !Sub arn:aws:iam:::role/${mfaLambdaRole}
                  - !Sub arn:aws:iam:::role/${mfaLambdaRole}-${env}

  MFALambda:
  # Lambda which sets MFA config values
  # Depends on MFALambdaRole for role ARN
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |+
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const identity = new aws.CognitoIdentityServiceProvider();
          exports.handler = (event, context, callback) => {
            if (event.RequestType === 'Delete') {
              response.send(event, context, response.SUCCESS, {})
            }
            if (event.RequestType === 'Update' || event.RequestType === 'Create') {
              let totpParams = {};
              try {
                totpParams = {
                  UserPoolId: event.ResourceProperties.userPoolId,
                  MfaConfiguration: event.ResourceProperties.mfaConfiguration,
                  SmsMfaConfiguration: {
                    SmsAuthenticationMessage: event.ResourceProperties.smsAuthenticationMessage,
                    SmsConfiguration: {
                      SnsCallerArn: event.ResourceProperties.smsConfigCaller,
                      ExternalId: event.ResourceProperties.smsConfigExternalId
                    }
                  },
                  SoftwareTokenMfaConfiguration: {
                    Enabled: event.ResourceProperties.totpEnabled.toLowerCase() === 'true'
                  }
                };
              } catch (e) {
                response.send(event, context, response.FAILED, {e});
              }
              identity.setUserPoolMfaConfig(totpParams).promise()
                .then((res) => {
                  response.send(event, context, response.SUCCESS, {res});
                })
                .catch((err) => {
                  response.send(event, context, response.FAILED, {err});
                });
            }
          };
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: 300
      Role: !GetAtt MFALambdaRole.Arn
    DependsOn: MFALambdaRole

  MFALambdaPolicy:
  # Sets policy for the role that executes the MFA Lambda
  # Depends on Userpool for Arn
  # Marked as depending on MFALambda for easier to understand CFN sequencing
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref mfaLambdaIAMPolicy
      Roles:
        - !If
          - ShouldNotCreateEnvResources
          - !Ref mfaLambdaRole
          - !Sub ${mfaLambdaRole}-${env}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - cognito-idp:SetUserPoolMfaConfig
            Resource: !GetAtt UserPool.Arn
    DependsOn: MFALambda

  MFALogPolicy:
  # Sets log policy for the role that executes the MFA Lambda
  # Marked as depending on MFALambdaPolicy for easier to understand CFN sequencing
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref mfaLambdaLogPolicy
      Roles:
        - !If
          - ShouldNotCreateEnvResources
          - !Ref mfaLambdaRole
          - !Sub ${mfaLambdaRole}-${env}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${MFALambda}:log-stream:*
    DependsOn: MFALambdaPolicy

  MFALambdaInputs:
  # Values passed to MFA Lambda
  # Depends on UserPool for Arn
  # Depends on MFALambda for Arn
  # Marked as depending on MFALambdaPolicy for easier to understand CFN sequencing
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken: !GetAtt MFALambda.Arn
      userPoolId: !Ref UserPool
      mfaConfiguration: !Ref mfaConfiguration
      totpEnabled: <%= props.mfaTypes.includes('TOTP') %>
      smsConfigCaller: !GetAtt SNSRole.Arn
      smsAuthenticationMessage: !Ref smsAuthenticationMessage
      smsConfigExternalId: !Ref roleExternalId
    DependsOn: MFALogPolicy

  <%_ } -%>
  <%_ } -%>
  <%_ if (props.authSelections === 'identityPoolAndUserPool' || props.authSelections === 'identityPoolOnly') { -%>
  # BEGIN IDENTITY POOL RESOURCES
  <%_ if (props.audiences && props.audiences.length > 0) { -%>
  OpenIdLambdaRole:
  # Created to execute Lambda which sets MFA config values
  # Depends on UserPoolClientInputs to prevent further identity pool resources from being created before userpool is ready
    Type: AWS::IAM::Role
    Properties:
      RoleName: !If
        - ShouldNotCreateEnvResources
        - !Ref openIdLambdaRoleName
        - !Sub ${openIdLambdaRoleName}-${env}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Ref openIdRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !If
                  - ShouldNotCreateEnvResources
                  - !Sub arn:aws:iam:::role/${openIdLambdaRoleName}
                  - !Sub arn:aws:iam:::role/${openIdLambdaRoleName}-${env}
    DependsOn: UserPoolClientInputs

  OpenIdLambda:
  # Lambda which sets OpenId Values
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |+
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const iam = new aws.IAM();
          exports.handler = (event, context) => {
            if (event.RequestType === 'Delete') {
              response.send(event, context, response.SUCCESS, {});
            }
            if (event.RequestType === 'Update' || event.RequestType === 'Create') {
              const params = {
                ClientIDList: event.ResourceProperties.clientIdList.split(','),
                ThumbprintList: ['0000000000000000000000000000000000000000'],
                Url: event.ResourceProperties.url
              };
              let exists = false;
              let existingValue;
              iam.listOpenIDConnectProviders({}).promise().then((data) => {
                if (data.OpenIDConnectProviderList && data.OpenIDConnectProviderList.length > 0) {
                  const vals = data.OpenIDConnectProviderList.map(x => x.Arn);
                  existingValue = vals.find(i => i.split('/')[1] === params.Url.split('//')[1]);
                  if (!existingValue) {
                    exists = true;
                  }
                }
                if (!existingValue) {
                  iam.createOpenIDConnectProvider(params).promise().then((data) => {
                    response.send(event, context, response.SUCCESS, {
                      providerArn: data.OpenIDConnectProviderArn,
                      providerIds: params.ClientIDList
                    });
                  })
                  .catch((err) => {
                    response.send(event, context, response.FAILED, {err});
                  });
                } else {
                  const findParams = {
                    OpenIDConnectProviderArn: existingValue
                  };
                  iam.getOpenIDConnectProvider(findParams).promise().then((data) => {
                    const audiences = data.ClientIDList;
                    const updateCalls = [];
                    params.ClientIDList.forEach((a) => {
                      if (!audiences.includes(a)) {
                        const updateParams = {
                          ClientID: a,
                          OpenIDConnectProviderArn: existingValue
                        };
                        const prom = iam.addClientIDToOpenIDConnectProvider(updateParams).promise();
                        updateCalls.push(prom);
                      }
                    });
                    Promise.all(updateCalls).then(function (values) {
                      response.send(event, context, response.SUCCESS, {
                        providerArn: existingValue,
                        providerIds: params.ClientIDList
                      });
                    })
                    .catch((err3) => {
                      response.send(event, context, response.FAILED, {err3});
                    });
                  })
                  .catch((err2) => {
                    response.send(event, context, response.FAILED, {err2});
                  });
                }
              })
              .catch((err1) => {
                response.send(event, context, response.FAILED, {err1});
              });
            }
          };
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: 300
      Role: !GetAtt OpenIdLambdaRole.Arn
    DependsOn: OpenIdLambdaRole

  OpenIdLambdaIAMPolicy:
  # Sets policy for the role that executes the OpenId Lambda
  # Depends on OpenIdLambda for Arn
  # Marked as depending on MFALambda for easier to understand CFN sequencing
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref openIdLambdaIAMPolicy
      Roles:
        - !If
          - ShouldNotCreateEnvResources
          - !Ref openIdLambdaRoleName
          - !Sub ${openIdLambdaRoleName}-${env}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - iam:CreateOpenIDConnectProvider
              - iam:GetOpenIDConnectProvider
              - iam:AddClientIDToOpenIDConnectProvider
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/accounts.google.com
          -
            Effect: Allow
            Action:
              - iam:ListOpenIDConnectProviders
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/*
    DependsOn: OpenIdLambda

  OpenIdLogPolicy:
  # Sets log policy for the role that executes the OpenId  Lambda
  # Depends on OpenIdLambda for Arn
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref openIdLogPolicy
      Roles:
        - !If
          - ShouldNotCreateEnvResources
          - !Ref openIdLambdaRoleName
          - !Sub ${openIdLambdaRoleName}-${env}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${OpenIdLambda}:log-stream:*
    DependsOn: OpenIdLambdaIAMPolicy

  OpenIdLambdaInputs:
  # Values passed to OpenId Lambda
  # Depends on OpenId for Arn
  # Marked as depending on OpenIdLogPolicy for easier to understand CFN sequencing
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken: !GetAtt OpenIdLambda.Arn
      clientIdList: <%= props.audiences.join() %>
      url: https://accounts.google.com
    DependsOn: OpenIdLogPolicy

  <%_ } -%>
  IdentityPool:
  # Always created
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !If
        - ShouldNotCreateEnvResources
        - !Ref identityPoolName
        - !Sub ${identityPoolName}__${env}
      <%_ if (props.authSelections !== 'identityPoolOnly') { -%>
      CognitoIdentityProviders:
        -
          ClientId: !Ref UserPoolClient
          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
        -
          ClientId: !Ref UserPoolClientWeb
          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
      <%_ } -%>
      <%_ if (props.selectedParties && Object.keys(props.selectedParties).length > 0 && props.selectedParties !== '{}') { -%>
      SupportedLoginProviders:
        <%_ for (var i = 0; i < Object.keys(JSON.parse(props.selectedParties)).length; i++) { -%>
          <%_ if (!props.audiences || Object.keys(JSON.parse(props.selectedParties))[i] !== 'accounts.google.com') { -%>
            <%_ if (Object.values(props).includes(Object.values(JSON.parse(props.selectedParties))[i])) { -%>
        <%= Object.keys(JSON.parse(props.selectedParties))[i] %>: !Ref <%= Object.keys(props).find(p => props[p] === Object.values(JSON.parse(props.selectedParties))[i]) %>
            <%_ } else { -%>
        <%= Object.keys(JSON.parse(props.selectedParties))[i] %>: '<%= Object.values(JSON.parse(props.selectedParties))[i] %>'
            <%_ } -%>
          <%_ } -%>
        <%_ } -%>
      <%_ } -%>
      AllowUnauthenticatedIdentities: !Ref allowUnauthenticatedIdentities
      <%_ if (props.audiences && props.audiences.length > 0) { -%>
      OpenIdConnectProviderARNs:
        - !GetAtt OpenIdLambdaInputs.providerArn
    DependsOn: OpenIdLambdaInputs
      <%_ } -%>
    <%_ if ((!props.audiences || props.audiences.length === 0) && props.authSelections !== 'identityPoolOnly') { -%>
    DependsOn: UserPoolClientInputs
    <%_ } -%>

  IdentityPoolRoleMap:
  # Created to map Auth and Unauth roles to the identity pool
  # Depends on Identity Pool for ID ref
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !Ref unauthRoleArn
        authenticated: !Ref authRoleArn
    DependsOn: IdentityPool
  <%_ } -%>

Outputs:
  <%_ if (props.authSelections === 'identityPoolAndUserPool' || props.authSelections === 'identityPoolOnly') { -%>
  IdentityPoolId:
    Value: !Ref IdentityPool
    Description: Id for the identity pool
  IdentityPoolName:
    Value: !GetAtt IdentityPool.Name
  <%_ } -%>
  <%_ if (props.authSelections !== 'identityPoolOnly') { -%>
  UserPoolId:
    Value: !Ref UserPool
    Description: Id for the user pool
  UserPoolName:
    Value: !Ref userPoolName
  AppClientIDWeb:
    Value: !Ref UserPoolClientWeb
    Description: The user pool app client id for web
  AppClientID:
    Value: !Ref UserPoolClient
    Description: The user pool app client id
  AppClientSecret:
    Value: !GetAtt UserPoolClientInputs.appSecret
  <%_ if (props.mfaConfiguration !== 'OFF') { -%>
  CreatedSNSRole:
    Value: !GetAtt SNSRole.Arn
    Description: role arn
  <%_ } -%>
  <%_ if (props.googleClientId) { -%>
  GoogleWebClient:
    Value: !Ref googleClientId
  <%_ } -%>
  <%_ if (props.googleIos) { -%>
  GoogleIOSClient:
    Value: !Ref googleIos
  <%_ } -%>
  <%_ if (props.googleAndroid) { -%>
  GoogleAndroidClient:
    Value: !Ref googleAndroid
  <%_ } -%>
  <%_ if (props.facebookAppId) { -%>
  FacebookWebClient:
    Value: !Ref facebookAppId
  <%_ } -%>
  <%_ } -%>
