{"version":3,"file":"remove.js","sourceRoot":"","sources":["../../../src/commands/auth/remove.ts"],"names":[],"mappings":";;;AAAA,oEAA4I;AAC5I,kEAAuD;AACvD,2FAAqF;AACrF,kHAA6G;AAEhG,QAAA,IAAI,GAAG,QAAQ,CAAC;AAC7B,MAAM,QAAQ,GAAG,MAAM,CAAC;AAKjB,MAAM,GAAG,GAAG,KAAK,EAAE,OAAmB,EAAiB,EAAE;IAC9D,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IACxC,MAAM,YAAY,GAAG,UAAU,CAAC,KAAK,CAAC;IACtC,MAAM,IAAI,GAAG,+BAAY,CAAC,OAAO,EAAE,CAAC;IAEpC,+BAA+B,CAAC,IAAI,CAAC,CAAC;IAEtC,MAAM,6BAA6B,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAC1D,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CACtH,CAAC;IACF,IAAI,6BAA6B,EAAE;QACjC,yBAAO,CAAC,IAAI,CAAC,sBAAQ,CAAC,kBAAkB,CAAC,CAAC;KAC3C;IAED,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CACpD,CAAC,WAAW,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,KAAK,0CAAuB,CAAC,OAAO,CACpF,CAAC;IAEF,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,cAAc,CAAC,OAAO,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;QAC/E,IAAI,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,MAAK,0CAAuB,CAAC,qBAAqB,EAAE;YAEvE,MAAM,QAAQ,GAAG,IAAI,iCAAc,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,MAAM,eAAe,GAAG,QAAQ,CAAC,kBAAkB,EAAE,CAAC;YACtD,eAAe,CAAC,aAAa,CAAC,iBAAiB,GAAG,EAAE,CAAC;YACrD,MAAM,QAAQ,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;SACrD;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,yBAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,yBAAO,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;QAC/D,KAAK,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;KACtB;AACH,CAAC,CAAC;AAjCW,QAAA,GAAG,OAiCd;AAEF,MAAM,+BAA+B,GAAG,CAAC,IAAa,EAAQ,EAAE;IAC9D,MAAM,qBAAqB,GAAG,IAAI,CAAC,oCAAiB,CAAC,SAAS,CAAC,CAAC;IAChE,IAAI,CAAC,qBAAqB;QAAE,OAAO;IACnC,MAAM,sBAAsB,GAAG,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAClE,IAAI,sBAAsB,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO;IAChD,MAAM,IAAI,+BAAY,CAAC,oBAAoB,EAAE;QAC3C,OAAO,EAAE,qEAAqE;QAC9E,UAAU,EAAE,gEAAgE;KAC7E,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { $TSContext, $TSMeta, AmplifyCategories, AmplifyError, AmplifySupportedService, stateManager } from '@aws-amplify/amplify-cli-core';\nimport { printer } from '@aws-amplify/amplify-prompts';\nimport { messages } from '../../provider-utils/awscloudformation/assets/string-maps';\nimport { AuthInputState } from '../../provider-utils/awscloudformation/auth-inputs-manager/auth-input-state';\n\nexport const name = 'remove';\nconst category = 'auth';\n\n/**\n * Entry point for remove auth\n */\nexport const run = async (context: $TSContext): Promise<void> => {\n  const { amplify, parameters } = context;\n  const resourceName = parameters.first;\n  const meta = stateManager.getMeta();\n\n  throwErrorIfProjectHasAnalytics(meta);\n\n  const hasPossiblyDependentResources = Object.keys(meta).some(\n    (categoryName) => ['api', 'storage', 'function'].includes(categoryName) && Object.keys(meta[categoryName]).length > 0,\n  );\n  if (hasPossiblyDependentResources) {\n    printer.warn(messages.dependenciesExists);\n  }\n\n  const authResourceName = Object.keys(meta.auth).filter(\n    (resourceKey) => meta.auth[resourceKey].service === AmplifySupportedService.COGNITO,\n  );\n\n  try {\n    const resource = await amplify.removeResource(context, category, resourceName);\n    if (resource?.service === AmplifySupportedService.COGNITOUSERPOOLGROUPS) {\n      // update cli input here\n      const cliState = new AuthInputState(context, authResourceName[0]);\n      const cliInputPayload = cliState.getCLIInputPayload();\n      cliInputPayload.cognitoConfig.userPoolGroupList = [];\n      await cliState.saveCLIInputPayload(cliInputPayload);\n    }\n  } catch (err) {\n    printer.info(err.stack);\n    printer.error('There was an error removing the auth resource');\n    void context.usageData.emitError(err);\n    process.exitCode = 1;\n  }\n};\n\nconst throwErrorIfProjectHasAnalytics = (meta: $TSMeta): void => {\n  const analyticsCategoryMeta = meta[AmplifyCategories.ANALYTICS];\n  if (!analyticsCategoryMeta) return;\n  const analyticsResourceNames = Object.keys(analyticsCategoryMeta);\n  if (analyticsResourceNames.length === 0) return;\n  throw new AmplifyError('ResourceInUseError', {\n    message: 'Auth cannot be removed because the analytics category depends on it',\n    resolution: 'Run `amplify remove analytics` first, then retry removing auth',\n  });\n};\n"]}