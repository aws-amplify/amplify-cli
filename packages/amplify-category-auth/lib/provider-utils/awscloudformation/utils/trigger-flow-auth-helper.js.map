{"version":3,"file":"trigger-flow-auth-helper.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/trigger-flow-auth-helper.js"],"names":[],"mappings":"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","sourcesContent":["const path = require('path');\nconst { FeatureFlags } = require('@aws-amplify/amplify-cli-core');\n\nconst triggerAssetRoot = path.resolve(path.join(__dirname, '../../../../provider-utils/awscloudformation/triggers'));\n\n/**\n * @function\n * @param {object} context CLI context\n * @param {object} coreAnswers key/value pairs of auth flow answers\n * @param {object} previouslySaved key/value pairs of previously saved triggers\n * @return {object} Key/value pairs containing the trigger name and array of selected modules.\n */\n\n/*\n  Creating Lambda Triggers\n*/\nasync function handleTriggers(context, coreAnswers, previouslySaved) {\n  const targetDir = context.amplify.pathManager.getBackendDirPath();\n  let triggerKeyValues = {};\n\n  // get the resource name, either from user answer during creation or previous value\n  const authResourceName = context.updatingAuth ? context.updatingAuth.resourceName : coreAnswers.resourceName;\n\n  // double check to make sure triggers have not been serialized already\n  const triggers = typeof coreAnswers.triggers === 'string' ? JSON.parse(coreAnswers.triggers) : coreAnswers.triggers;\n\n  // getting static trigger env variables that do not change based on direct user input\n  const triggerEnvs = {};\n  Object.keys(triggers).forEach((r) => {\n    triggerEnvs[r] = context.amplify.getTriggerEnvVariables(context, { key: r, modules: triggers[r] }, 'auth');\n  });\n\n  // creating array of trigger names\n  const keys = Object.keys(triggers);\n\n  // creating array of trigger values\n  const values = Object.values(triggers);\n\n  // Auth lambda config for Triggers\n  let authTriggerConnections = [];\n  if (triggers) {\n    for (let t = 0; t < keys.length; t += 1) {\n      const functionName = `${authResourceName}${keys[t]}`;\n      const targetPath = `${targetDir}/function/${functionName}/src`;\n      let config = {};\n      config['triggerType'] = keys[t] === 'PreSignup' ? 'PreSignUp' : keys[t];\n      config['lambdaFunctionName'] = functionName;\n      authTriggerConnections.push(config);\n\n      if (previouslySaved && previouslySaved[keys[t]]) {\n        const currentEnvVariables = context.amplify.loadEnvResourceParameters(context, 'function', functionName);\n\n        await saveTriggerEnvParamsToTeamProviderInfo(context, keys[t], values[t], functionName, currentEnvVariables);\n\n        const triggerOptions = {\n          key: keys[t],\n          values: values[t],\n          context,\n          functionName,\n          triggerEnvs,\n          category: 'auth',\n          parentStack: 'auth',\n          targetPath,\n          triggerTemplate: `${keys[t]}.json.ejs`,\n          triggerPackage: `${keys[t]}.package.json`,\n          triggerEventPath: `${keys[t]}.event.json`,\n          triggerDir: path.join(triggerAssetRoot, keys[t]),\n          parentResource: authResourceName,\n          skipEdit: true,\n        };\n\n        const updatedLambda = await context.amplify.updateTrigger(triggerOptions);\n\n        triggerKeyValues = Object.assign(triggerKeyValues, updatedLambda);\n      } else {\n        await saveTriggerEnvParamsToTeamProviderInfo(context, keys[t], values[t], functionName);\n\n        const triggerOptions = {\n          key: keys[t],\n          values: values[t],\n          context,\n          functionName,\n          triggerEnvs,\n          category: 'auth',\n          parentStack: 'auth',\n          targetPath,\n          triggerTemplate: `${keys[t]}.json.ejs`,\n          triggerEventPath: `${keys[t]}.event.json`,\n          triggerDir: path.join(triggerAssetRoot, keys[t]),\n          parentResource: authResourceName,\n          skipEdit: true,\n        };\n\n        const newLambda = await context.amplify.addTrigger(triggerOptions);\n\n        triggerKeyValues = Object.assign(triggerKeyValues, newLambda);\n      }\n    }\n  }\n\n  if (previouslySaved) {\n    const previousTriggers = Object.keys(previouslySaved).map((i) => `${authResourceName}${i}`);\n    const currentTriggers = Object.keys(triggers).map((i) => `${authResourceName}${i}`);\n    await context.amplify.deleteDeselectedTriggers(currentTriggers, previousTriggers, authResourceName, targetDir, context);\n  }\n\n  if (coreAnswers.triggers) {\n    coreAnswers.parentStack = { Ref: 'AWS::StackId' };\n  }\n\n  return { triggers, authTriggerConnections };\n}\n\n// saving input-based trigger env variables to the team-provider\nconst saveTriggerEnvParamsToTeamProviderInfo = async (context, key, value, functionName, currentEnvVars) => {\n  const envs = await context.amplify.getTriggerEnvInputs(context, path.join(triggerAssetRoot, key), key, value, currentEnvVars);\n\n  if (!FeatureFlags.getBoolean('auth.useInclusiveTerminology') && key === 'PreSignup') {\n    // If the legacy language is being used, replace the deny and allow list\n    // environment variables and use the legacy lambda functions.\n    if (envs.DOMAINDENYLIST) {\n      envs.DOMAINBLACKLIST = envs.DOMAINDENYLIST;\n      delete envs.DOMAINDENYLIST;\n    }\n\n    if (envs.DOMAINALLOWLIST) {\n      envs.DOMAINWHITELIST = envs.DOMAINALLOWLIST;\n      delete envs.DOMAINALLOWLIST;\n    }\n\n    if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        const val = value[i];\n\n        if (val.endsWith('-denylist') || val.endsWith('-allowlist')) {\n          value[i] = `${val}-legacy`;\n        }\n      }\n    }\n  }\n\n  context.amplify.saveEnvResourceParameters(context, 'function', functionName, envs);\n};\n\nmodule.exports = {\n  handleTriggers,\n};\n"]}