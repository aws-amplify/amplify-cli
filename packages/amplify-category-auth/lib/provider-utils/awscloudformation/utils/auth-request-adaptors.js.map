{"version":3,"file":"auth-request-adaptors.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/auth-request-adaptors.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AddAuthRequest,\n  CognitoUserAliasAttributes,\n  CognitoUserPoolSigninMethod,\n  CognitoAdminQueries,\n  CognitoMFAConfiguration,\n  CognitoPasswordPolicy,\n  CognitoPasswordConstraint,\n  CognitoIdentityPoolConfiguration,\n  CognitoOAuthConfiguration,\n  CognitoSocialProviderConfiguration,\n  UpdateAuthRequest,\n  CognitoUserPoolConfiguration,\n  CognitoUserPoolModification,\n  CognitoIdentityPoolModification,\n  CognitoAutoVerifiedAttributesConfiguration,\n} from 'amplify-headless-interface';\nimport { isEmpty, merge } from 'lodash';\nimport { pascalCase } from 'change-case';\nimport { FeatureFlags } from '@aws-amplify/amplify-cli-core';\nimport { identityPoolProviders, userPoolProviders } from '../service-walkthroughs/auth-questions';\nimport { authProviders as authProviderList } from '../assets/string-maps';\nimport {\n  OAuthResult,\n  SocialProviderResult,\n  IdentityPoolResult,\n  PasswordPolicyResult,\n  AdminQueriesResult,\n  MfaResult,\n  PasswordPolicy,\n  UsernameAttributes,\n  AliasAttributes,\n  AttributeType,\n  ServiceQuestionHeadlessResult,\n  AutoVerifiedAttributesResult,\n} from '../service-walkthrough-types/cognito-user-input-types';\n\nexport type AddAuthRequestAdaptorFactory = (projectType: string) => AddAuthRequestAdaptor;\n\nexport type AddAuthRequestAdaptor = (request: AddAuthRequest) => ServiceQuestionHeadlessResult;\n/**\n * Factory function that returns a function to convert an AddAuthRequest into the existing CognitoConfiguration output format\n * @param projectType The project type (such as 'javascript', 'ios', 'android')\n */\nexport const getAddAuthRequestAdaptor: AddAuthRequestAdaptorFactory =\n  (projectType) =>\n  ({ serviceConfiguration: cognitoConfig, resourceName }): ServiceQuestionHeadlessResult => {\n    const userPoolConfig = cognitoConfig.userPoolConfiguration;\n    const identityPoolConfig = cognitoConfig.includeIdentityPool ? cognitoConfig.identityPoolConfiguration : undefined;\n    const requiredAttributes = userPoolConfig.requiredSignupAttributes.map((att) => att.toLowerCase());\n    return {\n      serviceName: cognitoConfig.serviceName,\n      resourceName,\n      requiredAttributes,\n      ...immutableAttributeAdaptor(userPoolConfig, identityPoolConfig),\n      ...mutableAttributeAdaptor(projectType, requiredAttributes, userPoolConfig, cognitoConfig.includeIdentityPool, identityPoolConfig),\n    };\n  };\n\nexport const getUpdateAuthRequestAdaptor =\n  (projectType: string, requiredAttributes: string[]) =>\n  ({ serviceModification }: UpdateAuthRequest): ServiceQuestionHeadlessResult => {\n    const idPoolModification = serviceModification.includeIdentityPool ? serviceModification.identityPoolModification : undefined;\n    return {\n      serviceName: serviceModification.serviceName,\n      requiredAttributes,\n      ...mutableAttributeAdaptor(\n        projectType,\n        requiredAttributes,\n        serviceModification.userPoolModification,\n        serviceModification.includeIdentityPool,\n        idPoolModification,\n      ),\n    };\n  };\n\nconst immutableAttributeAdaptor = (\n  userPoolConfig: CognitoUserPoolConfiguration,\n  identityPoolConfig?: CognitoIdentityPoolConfiguration,\n) => ({\n  userPoolName: userPoolConfig.userPoolName,\n  usernameAttributes: signinAttributeMap[userPoolConfig.signinMethod],\n  aliasAttributes: FeatureFlags.getBoolean('auth.forceAliasAttributes')\n    ? userPoolConfig.aliasAttributes?.map((attr) => aliasAttributeMap[attr]) ?? []\n    : [],\n  ...immutableIdentityPoolMap(identityPoolConfig),\n});\n\nconst mutableAttributeAdaptor = (\n  projectType: string,\n  requiredAttributes: string[],\n  userPoolConfig: CognitoUserPoolConfiguration | CognitoUserPoolModification,\n  includeIdentityPool: boolean,\n  identityPoolConfig?: CognitoIdentityPoolConfiguration | CognitoIdentityPoolModification,\n) => ({\n  useDefault: 'manual' as const,\n  updateFlow: 'manual' as const,\n  authSelections: includeIdentityPool ? 'identityPoolAndUserPool' : ('userPoolOnly' as 'userPoolOnly' | 'identityPoolAndUserPool'),\n  userPoolGroups: (userPoolConfig.userPoolGroups?.length || 0) > 0,\n  userPoolGroupList: (userPoolConfig.userPoolGroups || []).map((group) => group.groupName), // TODO may need to map \"customPolicy\"\n  userpoolClientRefreshTokenValidity: userPoolConfig.refreshTokenPeriod,\n  userpoolClientReadAttributes: (userPoolConfig.readAttributes || []).map((att) => att.toLowerCase()),\n  userpoolClientWriteAttributes: (userPoolConfig.writeAttributes || []).map((att) => att.toLowerCase()),\n  ...adminQueriesMap(userPoolConfig.adminQueries),\n  ...mfaMap(userPoolConfig.mfa),\n  ...autoVerifiedAttributesMap(userPoolConfig.autoVerifiedAttributes),\n  ...passwordPolicyMap(userPoolConfig.passwordPolicy),\n  ...mutableIdentityPoolMap(projectType, identityPoolConfig),\n  ...oauthMap(userPoolConfig.oAuth, requiredAttributes),\n});\n\n// converts the oauth config to the existing format\nconst oauthMap = (\n  oauthConfig?: Partial<CognitoOAuthConfiguration>,\n  requiredAttributes: string[] = [],\n): (OAuthResult & SocialProviderResult) | Record<string, unknown> => {\n  if (!oauthConfig) return {};\n  if (isEmpty(oauthConfig)) {\n    return {\n      hostedUI: false,\n    };\n  }\n  return {\n    hostedUI: true,\n    hostedUIDomainName: oauthConfig.domainPrefix,\n    newCallbackURLs: oauthConfig.redirectSigninURIs,\n    newLogoutURLs: oauthConfig.redirectSignoutURIs,\n    AllowedOAuthFlows: oauthConfig?.oAuthGrantType?.toLowerCase() as 'code' | 'implicit',\n    AllowedOAuthScopes: oauthConfig?.oAuthScopes?.map((scope) => scope.toLowerCase()),\n    ...socialProviderMap(oauthConfig.socialProviderConfigurations, requiredAttributes),\n  };\n};\n\n// converts the oauth social provider config to the existing format\nconst socialProviderMap = (\n  socialConfig: CognitoSocialProviderConfiguration[] = [],\n  requiredAttributes: string[] = [],\n): SocialProviderResult => {\n  const authProvidersUserPool = socialConfig.map((sc) => sc.provider).map((provider) => pascalCase(provider));\n  const socialConfigMap = socialConfig.reduce((acc, it) => {\n    switch (it.provider) {\n      case 'FACEBOOK':\n        acc.facebookAppIdUserPool = it.clientId;\n        acc.facebookAppSecretUserPool = it.clientSecret;\n        break;\n      case 'GOOGLE':\n        acc.googleAppIdUserPool = it.clientId;\n        acc.googleAppSecretUserPool = it.clientSecret;\n        break;\n      case 'LOGIN_WITH_AMAZON':\n        acc.loginwithamazonAppIdUserPool = it.clientId;\n        acc.loginwithamazonAppSecretUserPool = it.clientSecret;\n        break;\n      case 'SIGN_IN_WITH_APPLE':\n        acc.signinwithappleClientIdUserPool = it.clientId;\n        acc.signinwithappleTeamIdUserPool = it.teamId;\n        acc.signinwithappleKeyIdUserPool = it.keyId;\n        acc.signinwithapplePrivateKeyUserPool = it.privateKey;\n        break;\n    }\n    return acc;\n  }, {} as any) as SocialProviderResult;\n  const result: SocialProviderResult = {\n    authProvidersUserPool,\n    ...socialConfigMap,\n    ...userPoolProviders(authProvidersUserPool, { requiredAttributes, ...socialConfigMap, hostedUI: true }),\n  };\n  return result;\n};\n\n// converts the identity pool config to the existing format\nconst mutableIdentityPoolMap = (\n  projectType: string,\n  idPoolConfig?: CognitoIdentityPoolConfiguration | CognitoIdentityPoolModification,\n): IdentityPoolResult => {\n  if (!idPoolConfig) {\n    return {\n      thirdPartyAuth: false,\n      authProviders: [],\n    };\n  }\n  type AppIds = Pick<IdentityPoolResult, 'facebookAppId' | 'googleClientId' | 'googleIos' | 'googleAndroid' | 'amazonAppId' | 'appleAppId'>;\n  const result = {\n    allowUnauthenticatedIdentities: idPoolConfig.unauthenticatedLogin,\n    thirdPartyAuth: !!idPoolConfig.identitySocialFederation,\n    authProviders: (idPoolConfig.identitySocialFederation || [])\n      .map((socialFed) => socialFed.provider)\n      .map((provider) => pascalCase(provider))\n      .map((provider) => authProviderList.find((ap) => ap.name === provider)!)\n      .map((ap) => ap.value),\n    // convert the list of social federation configs into individual key: client id pairs\n    ...(idPoolConfig?.identitySocialFederation || []).reduce(\n      (acc, it): AppIds => merge(acc, { [socialFederationKeyMap(it.provider, projectType)]: it.clientId }),\n      {} as AppIds,\n    ),\n  };\n  // adds \"selectedParties\" an \"audiences\" to the result which is a JSON string of the authProviders mapped to the client ids\n  identityPoolProviders(result, projectType);\n  return result;\n};\n\nconst immutableIdentityPoolMap = (idPoolConfig?: CognitoIdentityPoolConfiguration) => ({\n  identityPoolName: idPoolConfig?.identityPoolName,\n});\n\n// converts the password policy to the existing format\nconst passwordPolicyMap = (pwPolicy?: CognitoPasswordPolicy): PasswordPolicyResult => {\n  if (!pwPolicy) return {};\n  return {\n    passwordPolicyMinLength: pwPolicy.minimumLength,\n    passwordPolicyCharacters: (pwPolicy.additionalConstraints || []).map((constraint) => passwordConstraintMap[constraint]),\n  };\n};\n\n// converts admin queries config to existing format\nconst adminQueriesMap = (adminQueries?: CognitoAdminQueries): AdminQueriesResult => ({\n  adminQueries: !!adminQueries,\n  adminQueryGroup: adminQueries?.permissions.groupName,\n});\n\n// converts mfa config to existing format\nconst mfaMap = (mfaConfig: CognitoMFAConfiguration = { mode: 'OFF' }): MfaResult => {\n  if (mfaConfig.mode === 'OFF') {\n    return {\n      mfaConfiguration: 'OFF',\n    };\n  }\n  return {\n    mfaConfiguration: mfaConfig.mode,\n    mfaTypes: mfaConfig.mfaTypes.map((type) => mfaTypeMap[type]),\n    smsAuthenticationMessage: mfaConfig.smsMessage,\n  };\n};\n\nconst autoVerifiedAttributesMap = (autoVerifiedAttrConfig?: CognitoAutoVerifiedAttributesConfiguration): AutoVerifiedAttributesResult => {\n  const result: AutoVerifiedAttributesResult = {\n    autoVerifiedAttributes: [],\n  };\n  if (!Array.isArray(autoVerifiedAttrConfig)) {\n    return result;\n  }\n\n  return autoVerifiedAttrConfig.reduce((result, config) => {\n    switch (config.type) {\n      case 'EMAIL':\n        result.autoVerifiedAttributes.push('email');\n        result.emailVerificationMessage = config.verificationMessage;\n        result.emailVerificationSubject = config.verificationSubject;\n        break;\n      case 'PHONE_NUMBER':\n        result.autoVerifiedAttributes.push('phone_number');\n        result.smsVerificationMessage = config.verificationMessage;\n    }\n    return result;\n  }, result);\n};\n\nconst passwordConstraintMap: Record<CognitoPasswordConstraint, PasswordPolicy> = {\n  [CognitoPasswordConstraint.REQUIRE_LOWERCASE]: 'Requires Lowercase',\n  [CognitoPasswordConstraint.REQUIRE_DIGIT]: 'Requires Numbers',\n  [CognitoPasswordConstraint.REQUIRE_SYMBOL]: 'Requires Symbols',\n  [CognitoPasswordConstraint.REQUIRE_UPPERCASE]: 'Requires Uppercase',\n};\n\nconst mfaTypeMap: Record<'SMS' | 'TOTP', 'SMS Text Message' | 'TOTP'> = {\n  SMS: 'SMS Text Message',\n  TOTP: 'TOTP',\n};\n\nconst signinAttributeMap: Record<CognitoUserPoolSigninMethod, UsernameAttributes[] | undefined> = {\n  [CognitoUserPoolSigninMethod.USERNAME]: undefined,\n  [CognitoUserPoolSigninMethod.EMAIL]: [AttributeType.EMAIL],\n  [CognitoUserPoolSigninMethod.PHONE_NUMBER]: [AttributeType.PHONE_NUMBER],\n  [CognitoUserPoolSigninMethod.EMAIL_AND_PHONE_NUMBER]: [AttributeType.EMAIL, AttributeType.PHONE_NUMBER],\n};\n\nconst aliasAttributeMap: Record<CognitoUserAliasAttributes, AliasAttributes> = {\n  [CognitoUserAliasAttributes.PREFERRED_USERNAME]: AttributeType.PREFERRED_USERNAME,\n  [CognitoUserAliasAttributes.EMAIL]: AttributeType.EMAIL,\n  [CognitoUserAliasAttributes.PHONE_NUMBER]: AttributeType.PHONE_NUMBER,\n};\n\nconst socialFederationKeyMap = (provider: 'FACEBOOK' | 'AMAZON' | 'GOOGLE' | 'APPLE', projectType: string): string => {\n  switch (provider) {\n    case 'FACEBOOK':\n      return 'facebookAppId';\n    case 'AMAZON':\n      return 'amazonAppId';\n    case 'GOOGLE':\n      switch (projectType) {\n        case 'ios':\n          return 'googleIos';\n        case 'android':\n          return 'googleAndroid';\n        case 'javascript':\n          return 'googleClientId';\n        default:\n          throw new Error(`Unknown project type [${projectType}] when mapping federation type`);\n      }\n    case 'APPLE':\n      return 'appleAppId';\n    default:\n      throw new Error(`Unknown social federation provider [${provider}]`);\n  }\n};\n"]}