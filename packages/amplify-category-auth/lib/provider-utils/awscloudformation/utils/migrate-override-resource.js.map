{"version":3,"file":"migrate-override-resource.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/migrate-override-resource.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  $TSObject,\n  AmplifyCategories,\n  projectNotInitializedError,\n  AmplifyError,\n  JSONUtilities,\n  pathManager,\n} from '@aws-amplify/amplify-cli-core';\nimport { printer } from '@aws-amplify/amplify-prompts';\nimport * as path from 'path';\nimport { v4 as uuid } from 'uuid';\nimport * as fs from 'fs-extra';\nimport _ from 'lodash';\nimport {\n  CognitoCLIInputs,\n  CognitoConfiguration,\n  MfaResult,\n  ServiceQuestionsBaseResult,\n  OAuthResult,\n  SocialProviderResult,\n  IdentityPoolResult,\n  PasswordRecoveryResult,\n  AdminQueriesResult,\n  PasswordPolicyResult,\n} from '../service-walkthrough-types/awsCognito-user-input-types';\n\n/**\n * migrates resources to support override feature\n */\nexport const migrateResourceToSupportOverride = async (resourceName: string): Promise<void> => {\n  printer.debug('Starting Migration Process');\n  /**\n   * backup resource folder\n   * get parameters.json\n   * generate and save cliInputs\n   * return cliInputs\n   *  */\n  const projectPath = pathManager.findProjectRoot();\n  if (!projectPath) {\n    throw projectNotInitializedError();\n  }\n  const authResourceDirPath = pathManager.getResourceDirectoryPath(undefined, AmplifyCategories.AUTH, resourceName);\n  const userPoolGroupResourceDirPath = pathManager.getResourceDirectoryPath(undefined, AmplifyCategories.AUTH, 'userPoolGroups');\n  const backupAuthResourceFolder = backup(authResourceDirPath, projectPath, resourceName);\n  const backupUserPoolGroupResourceFolder = backup(userPoolGroupResourceDirPath, projectPath, 'userPoolGroups');\n\n  try {\n    const parameters = JSONUtilities.readJson<$TSObject>(path.join(authResourceDirPath, 'parameters.json'), { throwIfNotExist: true });\n    fs.emptyDirSync(authResourceDirPath);\n    // remove UserPool Resource\n    if (parameters?.userPoolGroupList?.length > 0) {\n      fs.unlinkSync(path.join(userPoolGroupResourceDirPath, 'template.json'));\n      fs.unlinkSync(path.join(userPoolGroupResourceDirPath, 'parameters.json'));\n    }\n\n    // convert parameters.json to cli-inputs.json\n    const cliInputs = mapParametersJsonToCliInputs(parameters!);\n    const cliInputsPath = path.join(authResourceDirPath, 'cli-inputs.json');\n    JSONUtilities.writeJson(cliInputsPath, cliInputs);\n    printer.debug('Migration is Successful');\n  } catch (e) {\n    rollback(authResourceDirPath, backupAuthResourceFolder!);\n    rollback(userPoolGroupResourceDirPath, backupUserPoolGroupResourceFolder!);\n    throw new AmplifyError(\n      'MigrationError',\n      {\n        message: `There was an error migrating your project: ${e.message}`,\n        details: `Migration operations are rolled back.`,\n      },\n      e,\n    );\n  } finally {\n    cleanUp(backupAuthResourceFolder);\n    cleanUp(backupUserPoolGroupResourceFolder);\n  }\n};\n\nconst backup = (authResourcePath: string, projectPath: string, resourceName: string): string | undefined => {\n  if (fs.existsSync(authResourcePath)) {\n    const backupAuthResourceDirName = `${resourceName}-BACKUP-${uuid().split('-')[0]}`;\n    const backupAuthResourceDirPath = path.join(projectPath, backupAuthResourceDirName);\n\n    if (fs.existsSync(backupAuthResourceDirPath)) {\n      throw new AmplifyError('MigrationError', {\n        message: `Backup folder for ${resourceName} already exists.`,\n        resolution: `Delete the backup folder and try again.`,\n      });\n    }\n\n    fs.copySync(authResourcePath, backupAuthResourceDirPath);\n    return backupAuthResourceDirPath;\n  }\n\n  return undefined;\n};\n\nconst rollback = (authResourcePath: string, backupAuthResourceDirPath: string): void => {\n  if (fs.existsSync(authResourcePath) && fs.existsSync(backupAuthResourceDirPath)) {\n    fs.removeSync(authResourcePath);\n    fs.moveSync(backupAuthResourceDirPath, authResourcePath);\n  }\n};\n\nconst cleanUp = (authResourcePath: string | undefined): void => {\n  if (!!authResourcePath && fs.existsSync(authResourcePath)) fs.removeSync(authResourcePath);\n};\n\nconst mapParametersJsonToCliInputs = (parameters: $TSObject): CognitoCLIInputs => {\n  const baseResult: ServiceQuestionsBaseResult = {\n    authSelections: parameters.authSelections,\n    requiredAttributes: parameters.requiredAttributes,\n    resourceName: parameters.resourceName,\n    serviceName: parameters.serviceName,\n    useDefault: parameters.useDefault,\n    userpoolClientReadAttributes: parameters.userpoolClientReadAttributes,\n    userpoolClientWriteAttributes: parameters.userpoolClientWriteAttributes,\n    aliasAttributes: parameters.aliasAttributes,\n    resourceNameTruncated: parameters.resourceNameTruncated,\n    sharedId: parameters.sharedId,\n    updateFlow: parameters.updateFlow,\n    userPoolGroupList: parameters.userPoolGroupList,\n    userPoolGroups: parameters.userPoolGroups,\n    userPoolName: parameters.userPoolName,\n    usernameAttributes: parameters.usernameAttributes,\n    usernameCaseSensitive: parameters.usernameCaseSensitive,\n    userpoolClientRefreshTokenValidity: parameters.userpoolClientRefreshTokenValidity,\n    userpoolClientSetAttributes: parameters.userpoolClientSetAttributes,\n    verificationBucketName: parameters.verificationBucketName,\n    userpoolClientGenerateSecret: parameters.userpoolClientGenerateSecret,\n    userpoolClientLambdaRole: parameters.userpoolClientLambdaRole,\n  };\n\n  const oAuthResult: OAuthResult = {\n    hostedUI: parameters.hostedUI,\n    hostedUIDomainName: parameters.hostedUIDomainName,\n    hostedUIProviderMeta: parameters.hostedUIProviderMeta,\n    oAuthMetadata: parameters.oAuthMetadata,\n  };\n\n  const socialProviderResult: SocialProviderResult = {\n    authProvidersUserPool: parameters.authProvidersUserPool,\n  };\n\n  const identityPoolResult: IdentityPoolResult = {\n    thirdPartyAuth: parameters.thirdPartyAuth,\n    identityPoolName: parameters.identityPoolName,\n    allowUnauthenticatedIdentities: parameters.allowUnauthenticatedIdentities,\n    authProviders: parameters.authProviders,\n    googleClientId: parameters.googleClientId,\n    googleIos: parameters.googleIos,\n    googleAndroid: parameters.googleAndroid,\n    facebookAppId: parameters.facebookAppId,\n    amazonAppId: parameters.amazonAppId,\n    appleAppId: parameters.appleAppId,\n    selectedParties: parameters.selectedParties,\n    audiences: parameters.audiences,\n  };\n\n  const passwordRecoveryResult: PasswordRecoveryResult = {\n    emailVerificationMessage: parameters.emailVerificationMessage,\n    emailVerificationSubject: parameters.emailVerificationSubject,\n    smsVerificationMessage: parameters.smsVerificationMessage,\n    autoVerifiedAttributes: parameters.autoVerifiedAttributes,\n  };\n\n  const mfaResult: MfaResult = {\n    mfaConfiguration: parameters.mfaConfiguration,\n    mfaTypes: parameters.mfaTypes,\n    smsAuthenticationMessage: parameters.smsAuthenticationMessage,\n  };\n\n  const adminQueriesResult: AdminQueriesResult = {\n    adminQueries: parameters.adminQueries,\n    adminQueryGroup: parameters.adminQueryGroup,\n  };\n\n  const passwordPolicyResult: PasswordPolicyResult = {\n    passwordPolicyCharacters: parameters.passwordPolicyCharacters,\n    passwordPolicyMinLength: parameters.passwordPolicyMinLength,\n  };\n\n  const cliInputs: CognitoConfiguration = {\n    ...baseResult,\n    ...passwordPolicyResult,\n    ...adminQueriesResult,\n    ...mfaResult,\n    ...passwordRecoveryResult,\n    ...oAuthResult,\n    ...socialProviderResult,\n    ...identityPoolResult,\n  };\n\n  if (parameters.triggers) {\n    cliInputs.triggers = JSON.parse(parameters.triggers);\n  }\n\n  // removing undefined values\n  const filteredCliInputs = _.pickBy(cliInputs, (v) => v !== undefined) as CognitoConfiguration;\n\n  return {\n    version: '1',\n    cognitoConfig: filteredCliInputs,\n  };\n};\n"]}