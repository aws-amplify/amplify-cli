{"version":3,"file":"trigger-file-uploader.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/trigger-file-uploader.ts"],"names":[],"mappings":"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","sourcesContent":["import { $TSContext, pathManager, stateManager, AmplifyCategories, spinner, AmplifyFault } from '@aws-amplify/amplify-cli-core';\nimport type { S3 } from 'aws-sdk';\nimport { createReadStream, readdirSync, existsSync } from 'fs-extra';\nimport mime from 'mime-types';\nimport * as path from 'path';\nimport { getAuthResourceName } from '../../../utils/getAuthResourceName';\n\nconst providerName = 'awscloudformation';\n\nconst getS3Client = async (context: $TSContext, action: string): Promise<S3> => {\n  const providerPlugins = context.amplify.getProviderPlugins(context);\n  const provider = await import(providerPlugins[providerName]);\n  const aws = await provider.getConfiguredAWSClient(context, AmplifyCategories.AUTH, action);\n  return new aws.S3();\n};\n\n/**\n * upload code and assets needed for function triggers\n */\nexport const uploadFiles = async (context: $TSContext): Promise<void> => {\n  try {\n    const s3Client = await getS3Client(context, 'update');\n    const authResource = await getAuthResourceName(context);\n    const authPath = pathManager.getResourceDirectoryPath(undefined, AmplifyCategories.AUTH, authResource);\n    if (!authPath) {\n      return;\n    }\n    const assetPath = path.join(authPath, 'assets');\n    const env = context.amplify.getEnvInfo().envName;\n\n    const authParams = stateManager.getResourceParametersJson(undefined, AmplifyCategories.AUTH, authResource);\n    const bucketName = `${authParams.verificationBucketName}-${env}`;\n\n    if (!existsSync(assetPath)) {\n      return;\n    }\n    const fileList = readdirSync(assetPath);\n    const uploadFileTasks: (() => Promise<S3.ManagedUpload.SendData>)[] = [];\n    fileList.forEach((file) => {\n      uploadFileTasks.push(async () => uploadFile(s3Client, bucketName, path.join(assetPath, file), file));\n    });\n\n    try {\n      spinner.start('Uploading files.');\n      await Promise.all(uploadFileTasks);\n      spinner.succeed('Uploaded files successfully.');\n    } catch (e) {\n      spinner.fail('Error has occurred during file upload.');\n      throw e;\n    }\n  } catch (e) {\n    throw new AmplifyFault('TriggerUploadFault', { message: 'Unable to upload trigger files to S3' }, e);\n  }\n};\n\nconst uploadFile = async (s3Client: S3, hostingBucketName: string, filePath: string, file: string): Promise<S3.ManagedUpload.SendData> => {\n  const fileStream = createReadStream(filePath);\n  const contentType = mime.lookup(filePath);\n  const uploadParams = {\n    Bucket: hostingBucketName,\n    Key: file,\n    Body: fileStream,\n    ContentType: contentType || 'text/plain',\n    ACL: 'public-read',\n  };\n\n  return s3Client.upload(uploadParams).promise();\n};\n"]}