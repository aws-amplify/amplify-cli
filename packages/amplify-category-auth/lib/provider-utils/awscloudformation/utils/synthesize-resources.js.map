{"version":3,"file":"synthesize-resources.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/synthesize-resources.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  $TSAny,\n  $TSContext,\n  $TSObject,\n  AmplifyCategories,\n  AmplifySupportedService,\n  FeatureFlags,\n  JSONUtilities,\n  pathManager,\n  stateManager,\n} from '@aws-amplify/amplify-cli-core';\nimport { printer } from '@aws-amplify/amplify-prompts';\nimport { copySync, ensureDirSync, existsSync } from 'fs-extra';\nimport { get } from 'lodash';\nimport * as path from 'path';\nimport { v4 as uuid } from 'uuid';\nimport { UserPoolGroupMetadata } from '../auth-stack-builder/user-pool-group-stack-transform';\nimport { adminAuthAssetRoot, cfnTemplateRoot, privateKeys, triggerRoot } from '../constants';\nimport { CognitoConfiguration } from '../service-walkthrough-types/awsCognito-user-input-types';\nimport { AuthTriggerConfig, AuthTriggerConnection } from '../service-walkthrough-types/cognito-user-input-types';\nimport { generateUserPoolGroupStackTemplate } from './generate-user-pool-group-stack-template';\n\n/**\n * Factory function that returns a function that synthesizes all resources based on a CognitoCLIInputs request.\n * The function returns the request unchanged to enable .then() chaining\n * @param context The amplify context\n * @param request The Cognito configuration request\n */\n// eslint-disable-next-line max-len\nexport const getResourceSynthesizer = async (\n  context: $TSContext,\n  request: Readonly<CognitoConfiguration>,\n): Promise<CognitoConfiguration> => {\n  await lambdaTriggers(request, context, null);\n  // transformation handled in api and functions.\n  await addAdminAuth(context, request.resourceName!, 'add', request.adminQueryGroup);\n  // copy custom-message trigger files in to S3\n  await copyS3Assets(request);\n  return request;\n};\n\n/**\n * Factory function that returns a function that updates the auth resource based on a CognitoCLIInputs request.\n * The function returns the request unchanged to enable .then() chaining\n *\n * The code is more-or-less refactored as-is from the existing update logic\n * @param context The amplify context\n * @param request The Cognito configuration request\n */\nexport const getResourceUpdater = async (context: $TSContext, request: Readonly<CognitoConfiguration>): Promise<CognitoConfiguration> => {\n  const resources = context.amplify.getProjectMeta();\n\n  const adminQueriesFunctionName = get<{ category: string; resourceName: string }[]>(resources, ['api', 'AdminQueries', 'dependsOn'], [])\n    .filter((resource) => resource.category === AmplifyCategories.FUNCTION)\n    .map((resource) => resource.resourceName)\n    .find((resourceName) => resourceName.includes('AdminQueries'));\n  if (adminQueriesFunctionName) {\n    await addAdminAuth(context, request.resourceName!, 'update', request.adminQueryGroup, adminQueriesFunctionName);\n  } else {\n    await addAdminAuth(context, request.resourceName!, 'add', request.adminQueryGroup);\n  }\n\n  const providerPlugin = context.amplify.getPluginInstance(context, 'awscloudformation');\n  const previouslySaved = JSON.parse(providerPlugin.loadResourceParameters(context, 'auth', request.resourceName)?.triggers || '{}');\n\n  await lambdaTriggers(request, context, previouslySaved);\n\n  await copyS3Assets(request);\n  return request;\n};\n\n/**\n * The 3 functions below should not be exported, but they are for now because externalAuthEnable still uses them individually\n */\nexport const copyCfnTemplate = async (context: $TSContext, category: string, options: $TSObject, cfnFilename: string): Promise<$TSAny> => {\n  const targetDir = path.join(pathManager.getBackendDirPath(), category, options.resourceName);\n  // enable feature flag to remove trigger dependency from auth template\n\n  const copyJobs = [\n    {\n      dir: cfnTemplateRoot,\n      template: cfnFilename,\n      target: path.join(targetDir, `${options.resourceName}-cloudformation-template.yml`),\n      paramsFile: path.join(targetDir, 'parameters.json'),\n    },\n  ];\n\n  const privateParams = { ...options };\n  privateKeys.forEach((p) => delete privateParams[p]);\n\n  return context.amplify.copyBatch(context, copyJobs, privateParams, true);\n};\n\n/**\n * save auth resource parameters\n */\nexport const saveResourceParameters = (\n  context: $TSContext,\n  providerName: string,\n  category: string,\n  resource: string,\n  params: $TSObject,\n  envSpecificParams: $TSAny[] = [],\n): void => {\n  const provider = context.amplify.getPluginInstance(context, providerName);\n  let privateParams = { ...params };\n  privateKeys.forEach((p) => delete privateParams[p]);\n  privateParams = removeDeprecatedProps(privateParams);\n  provider.saveResourceParameters(context, category, resource, privateParams, envSpecificParams);\n};\n\n/**\n * removes extra parameters from auth cfn\n */\nexport const removeDeprecatedProps = (props: $TSObject): $TSObject => {\n  [\n    'authRoleName',\n    'unauthRoleName',\n    'userpoolClientName',\n    'roleName',\n    'policyName',\n    'mfaLambdaLogPolicy',\n    'mfaPassRolePolicy',\n    'mfaLambdaIAMPolicy',\n    'userpoolClientLogPolicy',\n    'userpoolClientLambdaPolicy',\n    'lambdaLogPolicy',\n    'openIdRolePolicy',\n    'openIdLambdaIAMPolicy',\n    'mfaLambdaRole',\n    'openIdLambdaRoleName',\n    'CreateAuthChallenge',\n    'CustomMessage',\n    'DefineAuthChallenge',\n    'PostAuthentication',\n    'PostConfirmation',\n    'PreAuthentication',\n    'PreSignup',\n    'VerifyAuthChallengeResponse',\n    // eslint-disable-next-line no-param-reassign\n  ].forEach((deprecatedField) => delete props[deprecatedField]);\n  return props;\n};\n\nconst lambdaTriggers = async (coreAnswers: $TSObject, context: $TSContext, previouslySaved: $TSAny): Promise<void> => {\n  const { handleTriggers } = await import('./trigger-flow-auth-helper');\n  let triggerKeyValues = {};\n  let authTriggerConnections: AuthTriggerConnection[];\n  if (coreAnswers.triggers) {\n    const triggerConfig = (await handleTriggers(context, coreAnswers, previouslySaved)) as AuthTriggerConfig;\n    triggerKeyValues = triggerConfig.triggers;\n    authTriggerConnections = triggerConfig.authTriggerConnections;\n\n    // eslint-disable-next-line no-param-reassign\n    coreAnswers.triggers = triggerKeyValues ? JSONUtilities.stringify(triggerKeyValues) : '{}';\n\n    if (FeatureFlags.getBoolean('auth.breakCircularDependency')) {\n      if (Array.isArray(authTriggerConnections) && authTriggerConnections.length > 0) {\n        // eslint-disable-next-line no-param-reassign\n        coreAnswers.authTriggerConnections = JSONUtilities.stringify(authTriggerConnections);\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        delete coreAnswers.authTriggerConnections;\n      }\n    }\n    // eslint-disable-next-line no-param-reassign\n    coreAnswers.breakCircularDependency = FeatureFlags.getBoolean('auth.breakCircularDependency');\n    if (triggerKeyValues) {\n      // eslint-disable-next-line no-param-reassign\n      coreAnswers.parentStack = { Ref: 'AWS::StackId' };\n    }\n\n    // determine permissions needed for each trigger module\n    // eslint-disable-next-line no-param-reassign\n    coreAnswers.permissions = await context.amplify.getTriggerPermissions(\n      context,\n      coreAnswers.triggers,\n      AmplifyCategories.AUTH,\n      coreAnswers.resourceName,\n    );\n  } else if (previouslySaved) {\n    const targetDir = pathManager.getBackendDirPath();\n    Object.keys(previouslySaved).forEach((p) => {\n      // eslint-disable-next-line no-param-reassign\n      delete coreAnswers[p];\n    });\n    await context.amplify.deleteAllTriggers(previouslySaved, coreAnswers.resourceName, targetDir, context);\n  }\n  // remove unused coreAnswers.triggers key\n  if (coreAnswers.triggers && coreAnswers.triggers === '[]') {\n    // eslint-disable-next-line no-param-reassign\n    delete coreAnswers.triggers;\n  }\n\n  // handle dependsOn data\n  const dependsOnKeys = Object.keys(triggerKeyValues).map((i) => `${coreAnswers.resourceName}${i}`);\n  // eslint-disable-next-line no-param-reassign\n  coreAnswers.dependsOn = context.amplify.dependsOnBlock(context, dependsOnKeys, 'Cognito');\n};\n\n/**\n * Creates Userpool groups\n */\nexport const createUserPoolGroups = async (context: $TSContext, resourceName: string, userPoolGroupList?: string[]): Promise<void> => {\n  if (userPoolGroupList && userPoolGroupList.length > 0) {\n    const userPoolGroupPrecedenceList = [];\n\n    for (let i = 0; i < userPoolGroupList.length; ++i) {\n      userPoolGroupPrecedenceList.push({\n        groupName: userPoolGroupList[i],\n        precedence: i + 1,\n      });\n    }\n\n    const userPoolGroupFile = path.join(\n      pathManager.getBackendDirPath(),\n      AmplifyCategories.AUTH,\n      'userPoolGroups',\n      'user-pool-group-precedence.json',\n    );\n\n    const userPoolGroupParams = path.join(\n      pathManager.getBackendDirPath(),\n      AmplifyCategories.AUTH,\n      'userPoolGroups',\n      'build',\n      'parameters.json',\n    );\n\n    /* eslint-disable */\n    const groupParams = {\n      AuthRoleArn: {\n        'Fn::GetAtt': ['AuthRole', 'Arn'],\n      },\n      UnauthRoleArn: {\n        'Fn::GetAtt': ['UnauthRole', 'Arn'],\n      },\n    };\n    /* eslint-enable */\n\n    JSONUtilities.writeJson(userPoolGroupParams, groupParams);\n    JSONUtilities.writeJson(userPoolGroupFile, userPoolGroupPrecedenceList);\n\n    context.amplify.updateamplifyMetaAfterResourceAdd(AmplifyCategories.AUTH, 'userPoolGroups', {\n      service: 'Cognito-UserPool-Groups',\n      providerPlugin: 'awscloudformation',\n      dependsOn: [\n        {\n          category: AmplifyCategories.AUTH,\n          resourceName,\n          attributes: ['UserPoolId', 'AppClientIDWeb', 'AppClientID', 'IdentityPoolId'],\n        },\n      ],\n    });\n    // create CFN\n    await generateUserPoolGroupStackTemplate(context, resourceName);\n  }\n};\n\n/**\n * Updates UserPool Groups\n */\nexport const updateUserPoolGroups = async (context: $TSContext, resourceName: string, userPoolGroupList?: string[]): Promise<void> => {\n  if (userPoolGroupList && userPoolGroupList.length > 0) {\n    const userPoolGroupFolder = path.join(pathManager.getBackendDirPath(), AmplifyCategories.AUTH, 'userPoolGroups');\n    const prevUserPoolGroupPrecedenceList =\n      JSONUtilities.readJson<UserPoolGroupMetadata[]>(path.join(userPoolGroupFolder, 'user-pool-group-precedence.json'), {\n        throwIfNotExist: false,\n      }) ?? [];\n    const currentUserPoolGroupPrecedenceList = userPoolGroupList.map((groupName: string, index: number) => ({\n      groupName,\n      precedence: index + 1,\n    }));\n    // underlying logic takes previous user-pool precedece files object (amplifygenerated/ Cx overided)\n    // and updates with new settings keeping custom policies intact\n    const updatedUserPoolGroupList: UserPoolGroupMetadata[] = [];\n    currentUserPoolGroupPrecedenceList.forEach((group1) => {\n      let newGroup = group1;\n      prevUserPoolGroupPrecedenceList.forEach((group2) => {\n        const oldGroup = group2;\n        if (newGroup.groupName === oldGroup.groupName) {\n          newGroup = { ...oldGroup, ...newGroup };\n        }\n      });\n      updatedUserPoolGroupList.push(newGroup);\n    });\n\n    ensureDirSync(userPoolGroupFolder);\n    JSONUtilities.writeJson(path.join(userPoolGroupFolder, 'user-pool-group-precedence.json'), updatedUserPoolGroupList);\n\n    context.amplify.updateamplifyMetaAfterResourceUpdate(AmplifyCategories.AUTH, 'userPoolGroups', 'service', 'Cognito-UserPool-Groups');\n    context.amplify.updateamplifyMetaAfterResourceUpdate(AmplifyCategories.AUTH, 'userPoolGroups', 'providerPlugin', 'awscloudformation');\n\n    const authInputs = stateManager.getResourceInputsJson(undefined, AmplifyCategories.AUTH, resourceName);\n    const attributes = ['UserPoolId', 'AppClientIDWeb', 'AppClientID'];\n    if (authInputs?.cognitoConfig?.identityPoolName) {\n      attributes.push('IdentityPoolId');\n    }\n    context.amplify.updateamplifyMetaAfterResourceUpdate(AmplifyCategories.AUTH, 'userPoolGroups', 'dependsOn', [\n      {\n        category: AmplifyCategories.AUTH,\n        resourceName,\n        attributes,\n      },\n    ]);\n\n    // generate template\n    await generateUserPoolGroupStackTemplate(context, resourceName);\n  }\n};\n\nconst addAdminAuth = async (\n  context: $TSContext,\n  authResourceName: string,\n  operation: 'update' | 'add',\n  adminGroup?: string,\n  functionName?: string,\n): Promise<void> => {\n  if (adminGroup) {\n    if (!functionName) {\n      const [shortId] = uuid().split('-');\n      // eslint-disable-next-line no-param-reassign\n      functionName = `AdminQueries${shortId}`;\n    }\n    await createAdminAuthFunction(context, authResourceName, functionName, adminGroup, operation);\n    await createAdminAuthAPI(context, authResourceName, functionName, operation);\n  }\n};\n\nexport const createAdminAuthFunction = async (\n  context: $TSContext,\n  authResourceName: string,\n  functionName: string,\n  adminGroup: string,\n  operation: 'update' | 'add',\n): Promise<void> => {\n  const targetDir = path.join(pathManager.getBackendDirPath(), AmplifyCategories.FUNCTION, functionName);\n  let lambdaGroupVar = adminGroup;\n\n  const dependsOn = [];\n\n  dependsOn.push({\n    category: AmplifyCategories.AUTH,\n    resourceName: authResourceName,\n    attributes: ['UserPoolId'],\n  });\n\n  if (!lambdaGroupVar) {\n    lambdaGroupVar = 'NONE';\n  }\n\n  if (operation === 'add') {\n    const functionProps = {\n      functionName: `${functionName}`,\n      roleName: `${functionName}LambdaRole`,\n      dependsOn,\n      authResourceName,\n      lambdaGroupVar,\n    };\n\n    const copyJobs = [\n      {\n        dir: adminAuthAssetRoot,\n        template: 'admin-auth-app.js',\n        target: path.join(targetDir, 'src/app.js'),\n      },\n      {\n        dir: adminAuthAssetRoot,\n        template: 'admin-auth-cognitoActions.js',\n        target: path.join(targetDir, 'src/cognitoActions.js'),\n      },\n      {\n        dir: adminAuthAssetRoot,\n        template: 'admin-auth-index.js',\n        target: path.join(targetDir, 'src/index.js'),\n      },\n      {\n        dir: adminAuthAssetRoot,\n        template: 'admin-auth-package.json',\n        target: path.join(targetDir, 'src/package.json'),\n      },\n      {\n        dir: adminAuthAssetRoot,\n        template: 'admin-queries-function-template.json.ejs',\n        target: path.join(targetDir, `${functionName}-cloudformation-template.json`),\n      },\n    ];\n\n    // copy over the files\n    await context.amplify.copyBatch(context, copyJobs, functionProps, true);\n\n    // add amplify-meta and backend-config\n    const backendConfigs = {\n      service: AmplifySupportedService.LAMBDA,\n      providerPlugin: 'awscloudformation',\n      build: true,\n      dependsOn,\n    };\n\n    await context.amplify.updateamplifyMetaAfterResourceAdd(AmplifyCategories.FUNCTION, functionName, backendConfigs);\n    printer.success(`Successfully added ${functionName} function locally`);\n  } else {\n    printer.success(`Successfully updated ${functionName} function locally`);\n  }\n};\n\nconst createAdminAuthAPI = async (\n  context: $TSContext,\n  authResourceName: string,\n  functionName: string,\n  operation: 'update' | 'add',\n): Promise<void> => {\n  const apiName = 'AdminQueries';\n  const dependsOn = [\n    {\n      category: AmplifyCategories.AUTH,\n      resourceName: authResourceName,\n      attributes: ['UserPoolId'],\n    },\n    {\n      category: AmplifyCategories.FUNCTION,\n      resourceName: functionName,\n      attributes: ['Arn', 'Name'],\n    },\n  ];\n\n  const apiProps = {\n    apiName,\n    functionName,\n    authResourceName,\n    dependsOn,\n  };\n\n  if (operation === 'add') {\n    await context.amplify.invokePluginMethod(context, AmplifyCategories.API, undefined, 'addAdminQueriesApi', [context, apiProps]);\n    printer.success(`Successfully added ${apiName} API locally`);\n  } else {\n    await context.amplify.invokePluginMethod(context, AmplifyCategories.API, undefined, 'updateAdminQueriesApi', [context, apiProps]);\n    printer.success(`Successfully updated ${apiName} API locally`);\n  }\n};\n\nconst copyS3Assets = async (request: CognitoConfiguration): Promise<void> => {\n  const targetDir = path.join(pathManager.getBackendDirPath(), AmplifyCategories.AUTH, request.resourceName!, 'assets');\n  const triggers = request.triggers ? JSONUtilities.parse<$TSAny>(request.triggers as string) : null;\n  const confirmationFileNeeded = request.triggers && triggers.CustomMessage && triggers.CustomMessage.includes('verification-link');\n  if (confirmationFileNeeded) {\n    if (!existsSync(targetDir)) {\n      const source = path.join(triggerRoot, 'CustomMessage/assets');\n      copySync(source, targetDir);\n    }\n  }\n};\n"]}