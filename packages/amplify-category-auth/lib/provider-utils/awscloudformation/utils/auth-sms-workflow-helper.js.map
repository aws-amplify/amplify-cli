{"version":3,"file":"auth-sms-workflow-helper.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/auth-sms-workflow-helper.ts"],"names":[],"mappings":";;;AAAA,oEAAyE;AACzE,iEAAgE;AAChE,8EAAyE;AAWlE,MAAM,2BAA2B,GAAG,CAAC,OAA6D,EAAW,EAAE;;IACpH,IAAI,CAAC,OAAO,CAAC,gBAAgB,KAAK,UAAU,IAAI,OAAO,CAAC,gBAAgB,KAAK,IAAI,CAAC,KAAI,MAAA,OAAO,CAAC,QAAQ,0CAAE,QAAQ,CAAC,kBAAkB,CAAC,CAAA,EAAE;QACpI,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,CAAA,MAAA,OAAO,CAAC,kBAAkB,0CAAE,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CACvC,GAAG,aAAH,GAAG,uBAAH,GAAG,CACC,KAAK,CAAC,GAAG,EACV,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,EACvB,QAAQ,CAAC,cAAc,CAAC,CAC5B,KAAI,KAAK,CACX,CAAC;AACJ,CAAC,CAAC;AAbW,QAAA,2BAA2B,+BAatC;AAEF,MAAM,iBAAiB,GAAG,CAAC,OAAmB,EAAiB,EAAE;IAC/D,MAAM,eAAe,GAAG,IAAA,yCAAoB,GAAE,CAAC,OAAO,CAAC;IACvD,MAAM,EAAE,QAAQ,EAAE,GAAG,eAAe,CAAC;IAErC,OAAO,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC9D,CAAC,CAAC;AAEF,KAAK,UAAU,gCAAgC,CAAC,gBAAwB;IACtE,MAAM,gBAAgB,GAAG,MAAM,+BAAY,CAAC,yBAAyB,CAAC,SAAS,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;IAC3G,MAAM,qBAAqB,GAAiC;QAC1D,gBAAgB,EAAE,gBAAgB,CAAC,gBAAgB;QACnD,QAAQ,EAAE,gBAAgB,CAAC,QAAQ;QACnC,kBAAkB,EAAE,gBAAgB,CAAC,kBAAkB;KACxD,CAAC;IACF,OAAO,qBAAqB,CAAC;AAC/B,CAAC;AACM,MAAM,sBAAsB,GAAG,KAAK,EAAE,OAAmB,EAAE,gBAAwB,EAAyC,EAAE;IACnI,MAAM,QAAQ,GAAG,IAAI,iCAAc,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;IAC/D,IAAI,qBAAqB,CAAC;IAC1B,IAAI;QACF,qBAAqB,GAAG,CAAC,MAAM,QAAQ,CAAC,sBAAsB,CAAC,OAAO,EAAE,QAAQ,CAAC,kBAAkB,EAAE,CAAC,CAAiC,CAAC;KACzI;IAAC,OAAO,KAAK,EAAE;QAEd,qBAAqB,GAAG,MAAM,gCAAgC,CAAC,gBAAgB,CAAC,CAAC;KAClF;IACD,OAAO,qBAAqB,CAAC;AAC/B,CAAC,CAAC;AAVW,QAAA,sBAAsB,0BAUjC;AAEK,MAAM,0BAA0B,GAAG,KAAK,EAAE,OAAmB,EAAE,YAAoB,EAAyC,EAAE;IACnI,MAAM,cAAc,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAClD,MAAM,sBAAsB,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC;IAC1F,MAAM,eAAe,GAAG,MAAM,sBAAsB,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;IACtF,MAAM,SAAS,GAAG,MAAM,sBAAsB,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;IAClF,OAAO;QACL,gBAAgB,EAAE,SAAS,CAAC,gBAAgB;QAC5C,kBAAkB,EAAE,eAAe,CAAC,kBAAkB;QACtD,QAAQ,EAAE,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE;KACpE,CAAC;AACJ,CAAC,CAAC;AAVW,QAAA,0BAA0B,8BAUrC","sourcesContent":["import { $TSContext, stateManager } from '@aws-amplify/amplify-cli-core';\nimport { getSupportedServices } from '../../supported-services';\nimport { AuthInputState } from '../auth-inputs-manager/auth-input-state';\nimport { ProviderUtils } from '../import/types';\nimport { CognitoConfiguration } from '../service-walkthrough-types/awsCognito-user-input-types';\nimport { ServiceQuestionHeadlessResult } from '../service-walkthrough-types/cognito-user-input-types';\n\nexport type UserPoolMessageConfiguration = {\n  mfaConfiguration?: string;\n  mfaTypes?: string[];\n  usernameAttributes?: string[];\n};\n\nexport const doesConfigurationIncludeSMS = (request: CognitoConfiguration | ServiceQuestionHeadlessResult): boolean => {\n  if ((request.mfaConfiguration === 'OPTIONAL' || request.mfaConfiguration === 'ON') && request.mfaTypes?.includes('SMS Text Message')) {\n    return true;\n  }\n\n  return (\n    request.usernameAttributes?.some((str) =>\n      str\n        ?.split(',')\n        .map((str) => str.trim())\n        .includes('phone_number'),\n    ) || false\n  );\n};\n\nconst getProviderPlugin = (context: $TSContext): ProviderUtils => {\n  const serviceMetaData = getSupportedServices().Cognito;\n  const { provider } = serviceMetaData;\n\n  return context.amplify.getPluginInstance(context, provider);\n};\n\nasync function loadResourceParametersLegacyCode(authResourceName: string): Promise<UserPoolMessageConfiguration> {\n  const legacyParameters = await stateManager.getResourceParametersJson(undefined, 'auth', authResourceName);\n  const userPoolMessageConfig: UserPoolMessageConfiguration = {\n    mfaConfiguration: legacyParameters.mfaConfiguration,\n    mfaTypes: legacyParameters.mfaTypes,\n    usernameAttributes: legacyParameters.usernameAttributes,\n  };\n  return userPoolMessageConfig;\n}\nexport const loadResourceParameters = async (context: $TSContext, authResourceName: string): Promise<UserPoolMessageConfiguration> => {\n  const cliState = new AuthInputState(context, authResourceName);\n  let userPoolMessageConfig;\n  try {\n    userPoolMessageConfig = (await cliState.loadResourceParameters(context, cliState.getCLIInputPayload())) as UserPoolMessageConfiguration;\n  } catch (error) {\n    //Generated with legacy code - needs migration\n    userPoolMessageConfig = await loadResourceParametersLegacyCode(authResourceName);\n  }\n  return userPoolMessageConfig;\n};\n\nexport const loadImportedAuthParameters = async (context: $TSContext, userPoolName: string): Promise<UserPoolMessageConfiguration> => {\n  const providerPlugin = getProviderPlugin(context);\n  const cognitoUserPoolService = await providerPlugin.createCognitoUserPoolService(context);\n  const userPoolDetails = await cognitoUserPoolService.getUserPoolDetails(userPoolName);\n  const mfaConfig = await cognitoUserPoolService.getUserPoolMfaConfig(userPoolName);\n  return {\n    mfaConfiguration: mfaConfig.MfaConfiguration,\n    usernameAttributes: userPoolDetails.UsernameAttributes,\n    mfaTypes: mfaConfig.SmsMfaConfiguration ? ['SMS Text Message'] : [],\n  };\n};\n"]}