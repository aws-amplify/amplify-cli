{"version":3,"file":"auth-defaults-appliers.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/auth-defaults-appliers.ts"],"names":[],"mappings":"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","sourcesContent":["import { FeatureFlags } from '@aws-amplify/amplify-cli-core';\nimport _ from 'lodash';\nimport { AuthContext } from '../../../context';\nimport { immutableAttributes, safeDefaults } from '../constants';\nimport { CognitoConfiguration } from '../service-walkthrough-types/awsCognito-user-input-types';\nimport { ServiceQuestionHeadlessResult } from '../service-walkthrough-types/cognito-user-input-types';\nimport { structureOAuthMetadata } from '../service-walkthroughs/auth-questions';\nimport { removeDeprecatedProps } from './synthesize-resources';\nimport { verificationBucketName } from './verification-bucket-name';\n\n/**\n * Factory function that returns a function that applies default values to a CognitoConfiguration request.\n * It does not overwrite existing values in the request.\n *\n * The logic here has been refactored from service-walkthroughs/auth-questions.js and is mostly unchanged\n * @param defaultValuesFilename The filename to fetch defaults from\n * @param projectName The name of the current project (used to generate some default values)\n */\nexport const getAddAuthDefaultsApplier =\n  (context: AuthContext, defaultValuesFilename: string, projectName: string) =>\n  async (result: CognitoConfiguration | ServiceQuestionHeadlessResult): Promise<CognitoConfiguration> => {\n    const { functionMap, generalDefaults, roles, getAllDefaults } = await import(`../assets/${defaultValuesFilename}`);\n    result = assignDefaults({}, generalDefaults(projectName), result);\n\n    await verificationBucketName(result);\n\n    structureOAuthMetadata(result, context, getAllDefaults, context.amplify); // adds \"oauthMetadata\" to result\n\n    // Make the usernames for Cognito case-insensitive by default when it is created, if feature flag\n    // is enabled.\n    if (FeatureFlags.getBoolean('auth.enableCaseInsensitivity')) {\n      result.usernameCaseSensitive = false;\n    }\n    // If the feature flag is enabled the MFA TOTP can only be enabled\n\n    result.useEnabledMfas = FeatureFlags.getBoolean('auth.useEnabledMfas');\n\n    /* merge actual answers object into props object,\n     * ensuring that manual entries override defaults */\n    return assignDefaults({}, functionMap[result.authSelections](result.resourceName), result, roles);\n  };\n\nexport const getUpdateAuthDefaultsApplier =\n  (context: AuthContext, defaultValuesFilename: string, previousResult: CognitoConfiguration) =>\n  async (result: CognitoConfiguration | ServiceQuestionHeadlessResult): Promise<CognitoConfiguration> => {\n    const { functionMap, getAllDefaults } = await import(`../assets/${defaultValuesFilename}`);\n    if (!result.authSelections) {\n      result.authSelections = previousResult.authSelections ?? 'identityPoolAndUserPool';\n    }\n\n    const defaults = functionMap[result.authSelections](previousResult.resourceName);\n\n    // ensure immutable attributes are removed from result\n    immutableAttributes\n      .filter((pv) => pv in previousResult)\n      .forEach((pv) => {\n        delete (result as CognitoConfiguration)[pv];\n      });\n\n    if (['default', 'defaultSocial'].includes(result.useDefault)) {\n      safeDefaults.forEach((sd) => delete previousResult[sd]);\n    }\n\n    await verificationBucketName(result, previousResult);\n\n    structureOAuthMetadata(result, context, getAllDefaults, context.amplify); // adds \"oauthMetadata\" to result\n\n    // If there are new trigger selections, make sure they overwrite the previous selections\n    if (!_.isEmpty(result.triggers)) {\n      previousResult.triggers = Object.assign({}, result.triggers);\n    }\n    return assignDefaults({}, defaults, removeDeprecatedProps(previousResult), result);\n  };\n\n// same as _.assign except undefined values won't overwrite existing values\n// typed to accept up to 4 params but could be typed to accept any number of params\nconst assignDefaults = _.partialRight(_.assignWith, (objValue: unknown, srcValue: unknown) =>\n  _.isUndefined(srcValue) ? objValue : srcValue,\n) as <T, U, V, W>(a: T, b: U, c?: V, d?: W) => T & U & V & W;\n"]}