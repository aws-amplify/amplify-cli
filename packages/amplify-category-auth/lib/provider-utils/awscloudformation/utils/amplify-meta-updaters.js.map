{"version":3,"file":"amplify-meta-updaters.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/amplify-meta-updaters.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA6B;AAC7B,oEAA+F;AAC/F,uDAA0D;AAyBnD,MAAM,yBAAyB,GACpC,CACE,OAAmB,EACnB,cAGC,EACD,EAAE,CACJ,CAAC,YAAoB,EAAU,EAAE;IAC/B,MAAM,OAAO,GAAW;QACtB,OAAO,EAAE,cAAc,CAAC,OAAO;QAC/B,cAAc,EAAE,cAAc,CAAC,YAAY;KAC5C,CAAC;IACF,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,iBAAiB,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;IACxI,MAAM,cAAc,GAAG,gCAAa,CAAC,QAAQ,CAAiB,kBAAkB,CAAE,CAAC;IAEnF,IAAI,cAAc,CAAC,SAAS,EAAE;QAC5B,OAAO,CAAC,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC;KAC9C;IAED,IAAI,oBAAoB,GAAG,KAAK,CAAC;IACjC,IAAI,cAAc,CAAC,QAAQ,EAAE;QAC3B,MAAM,QAAQ,GAAW,gCAAa,CAAC,KAAK,CAAS,cAAc,CAAC,QAAQ,CAAC,CAAC;QAE9E,oBAAoB;YAClB,CAAC,CAAC,QAAQ,CAAC,mBAAmB;gBAC9B,QAAQ,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC;gBACvC,CAAC,CAAC,QAAQ,CAAC,mBAAmB;gBAC9B,QAAQ,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC;gBACvC,CAAC,CAAC,QAAQ,CAAC,2BAA2B;gBACtC,QAAQ,CAAC,2BAA2B,CAAC,MAAM,GAAG,CAAC,CAAC;KACnD;IAED,OAAO,CAAC,UAAU,GAAG,oBAAoB,CAAC;IAC1C,OAAO,CAAC,kBAAkB,GAAG,IAAA,yBAAiB,EAAC,cAAc,CAAC,CAAC;IAE/D,OAAO,CAAC,OAAO,CAAC,iCAAiC,CAAC,MAAM,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;IAGjF,MAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;IACtD,IAAI,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE;QACzD,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE;YACpC,MAAM,sBAAsB,GAAG;gBAC7B;oBACE,QAAQ,EAAE,MAAM;oBAChB,YAAY;oBACZ,UAAU,EAAE,CAAC,YAAY,EAAE,gBAAgB,EAAE,aAAa,CAAC;iBAC5D;aACF,CAAC;YACF,OAAO,CAAC,OAAO,CAAC,oCAAoC,CAAC,MAAM,EAAE,gBAAgB,EAAE,WAAW,EAAE,sBAAsB,CAAC,CAAC;SACrH;KACF;IACD,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AArDS,QAAA,yBAAyB,6BAqDlC;AAMG,MAAM,4BAA4B,GAAG,CAAC,OAAmB,EAAE,EAAE,CAAC,KAAK,EAAE,YAAoB,EAAE,EAAE;IAClG,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,8BAAW,CAAC,iBAAiB,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;IACrH,MAAM,cAAc,GAAG,gCAAa,CAAC,QAAQ,CAAiB,eAAe,CAAE,CAAC;IAChF,IAAI,cAAc,CAAC,SAAS,EAAE;QAC5B,OAAO,CAAC,OAAO,CAAC,oCAAoC,CAAC,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;KACnH;IAED,IAAI,oBAAoB,GAAG,KAAK,CAAC;IACjC,IAAI,cAAc,CAAC,QAAQ,EAAE;QAC3B,MAAM,QAAQ,GAAG,gCAAa,CAAC,KAAK,CAAS,cAAc,CAAC,QAAQ,CAAC,CAAC;QACtE,oBAAoB;YAClB,CAAC,CAAC,QAAQ,CAAC,mBAAmB;gBAC9B,QAAQ,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC;gBACvC,CAAC,CAAC,QAAQ,CAAC,mBAAmB;gBAC9B,QAAQ,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC;gBACvC,CAAC,CAAC,QAAQ,CAAC,2BAA2B;gBACtC,QAAQ,CAAC,2BAA2B,CAAC,MAAM,GAAG,CAAC,CAAC;KACnD;IACD,OAAO,CAAC,OAAO,CAAC,oCAAoC,CAAC,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,oBAAoB,CAAC,CAAC;IAC/G,OAAO,CAAC,OAAO,CAAC,oCAAoC,CAAC,MAAM,EAAE,YAAY,EAAE,oBAAoB,EAAE,IAAA,yBAAiB,EAAC,cAAc,CAAC,CAAC,CAAC;IAGpI,MAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;IACtD,IAAI,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE;QACzD,MAAM,UAAU,GAAG,CAAC,YAAY,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;QACnE,IAAI,cAAc,CAAC,gBAAgB,EAAE;YACnC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SACnC;QACD,MAAM,sBAAsB,GAAG;YAC7B;gBACE,QAAQ,EAAE,MAAM;gBAChB,YAAY;gBACZ,UAAU;aACX;SACF,CAAC;QAEF,OAAO,CAAC,OAAO,CAAC,oCAAoC,CAAC,MAAM,EAAE,gBAAgB,EAAE,WAAW,EAAE,sBAAsB,CAAC,CAAC;KACrH;IACD,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AAvCW,QAAA,4BAA4B,gCAuCvC;AAMK,MAAM,iBAAiB,GAAG,CAAC,cAA8B,EAAkB,EAAE;;IAClF,MAAM,sBAAsB,GAAG,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,sBAAsB,KAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IACtH,MAAM,kBAAkB,GAAa,EAAE,CAAC;IAExC,IAAI,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,kBAAkB,KAAI,cAAc,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;QACtF,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;KACnH;IAED,MAAM,eAAe,GAAa,EAAE,CAAC;IACrC,CAAC,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,qBAAqB,mCAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,QAAgB,EAAE,EAAE;;QACzE,MAAM,GAAG,GAAG,MAAA,+BAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,KAAK,QAAQ,CAAC,0CAAE,GAAG,CAAC;QAEvE,IAAI,GAAG,EAAE;YACP,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC3B;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,gBAAgB,GAAG,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,kBAAkB,KAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IAE5G,MAAM,0BAA0B,GAAG;QACjC,uBAAuB,EAAE,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,uBAAuB;QAChE,wBAAwB,EAAE,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,wBAAwB,KAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;KAClI,CAAC;IAEF,MAAM,QAAQ,GAAa,EAAE,CAAC;IAC9B,IAAI,cAAc,CAAC,QAAQ,EAAE;QAC3B,IAAI,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;YACxD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB;QAED,IAAI,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC5C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACvB;KACF;IAED,OAAO;QACL,eAAe;QACf,kBAAkB;QAClB,gBAAgB;QAChB,0BAA0B;QAC1B,gBAAgB,EAAE,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,gBAAgB;QAClD,QAAQ;QACR,sBAAsB;KACvB,CAAC;AACJ,CAAC,CAAC;AA5CW,QAAA,iBAAiB,qBA4C5B","sourcesContent":["import * as path from 'path';\nimport { JSONUtilities, pathManager, $TSAny, $TSContext } from '@aws-amplify/amplify-cli-core';\nimport { hostedUIProviders } from '../assets/string-maps';\nimport { AuthParameters } from '../import/types';\n\ntype FrontEndConfig = {\n  socialProviders: string[];\n  usernameAttributes: string[];\n  signupAttributes: string[];\n  passwordProtectionSettings: {\n    passwordPolicyMinLength: number | undefined;\n    passwordPolicyCharacters: string[];\n  };\n  mfaConfiguration: string | undefined;\n  mfaTypes: string[];\n  verificationMechanisms: string[];\n};\n\n/**\n * Factory function that returns a function that updates Amplify meta files after adding auth resource assets\n *\n * refactored from commands/enable.js\n * @param context The amplify context\n * @param resultMetadata The metadata from the service selection prompt\n * @param resultMetadata.service the service\n * @param resultMetadata.providerName the provider\n */\nexport const getPostAddAuthMetaUpdater =\n  (\n    context: $TSContext,\n    resultMetadata: {\n      service: string;\n      providerName: string;\n    },\n  ) =>\n  (resourceName: string): string => {\n    const options: $TSAny = {\n      service: resultMetadata.service,\n      providerPlugin: resultMetadata.providerName,\n    };\n    const parametersJSONPath = path.join(context.amplify.pathManager.getBackendDirPath(), 'auth', resourceName, 'build', 'parameters.json');\n    const authParameters = JSONUtilities.readJson<AuthParameters>(parametersJSONPath)!;\n\n    if (authParameters.dependsOn) {\n      options.dependsOn = authParameters.dependsOn;\n    }\n\n    let customAuthConfigured = false;\n    if (authParameters.triggers) {\n      const triggers: $TSAny = JSONUtilities.parse<$TSAny>(authParameters.triggers);\n\n      customAuthConfigured =\n        !!triggers.DefineAuthChallenge &&\n        triggers.DefineAuthChallenge.length > 0 &&\n        !!triggers.CreateAuthChallenge &&\n        triggers.CreateAuthChallenge.length > 0 &&\n        !!triggers.VerifyAuthChallengeResponse &&\n        triggers.VerifyAuthChallengeResponse.length > 0;\n    }\n\n    options.customAuth = customAuthConfigured;\n    options.frontendAuthConfig = getFrontendConfig(authParameters);\n\n    context.amplify.updateamplifyMetaAfterResourceAdd('auth', resourceName, options);\n\n    // Remove Identity Pool dependency attributes on userpool groups if Identity Pool not enabled\n    const allResources = context.amplify.getProjectMeta();\n    if (allResources.auth && allResources.auth.userPoolGroups) {\n      if (!authParameters.identityPoolName) {\n        const userPoolGroupDependsOn = [\n          {\n            category: 'auth',\n            resourceName,\n            attributes: ['UserPoolId', 'AppClientIDWeb', 'AppClientID'],\n          },\n        ];\n        context.amplify.updateamplifyMetaAfterResourceUpdate('auth', 'userPoolGroups', 'dependsOn', userPoolGroupDependsOn);\n      }\n    }\n    return resourceName;\n  };\n\n/**\n * Factory function that returns a function that updates Amplify meta files after updating auth resource assets\n * @param context The amplify context\n */\nexport const getPostUpdateAuthMetaUpdater = (context: $TSContext) => async (resourceName: string) => {\n  const resourceDirPath = path.join(pathManager.getBackendDirPath(), 'auth', resourceName, 'build', 'parameters.json');\n  const authParameters = JSONUtilities.readJson<AuthParameters>(resourceDirPath)!;\n  if (authParameters.dependsOn) {\n    context.amplify.updateamplifyMetaAfterResourceUpdate('auth', resourceName, 'dependsOn', authParameters.dependsOn);\n  }\n\n  let customAuthConfigured = false;\n  if (authParameters.triggers) {\n    const triggers = JSONUtilities.parse<$TSAny>(authParameters.triggers);\n    customAuthConfigured =\n      !!triggers.DefineAuthChallenge &&\n      triggers.DefineAuthChallenge.length > 0 &&\n      !!triggers.CreateAuthChallenge &&\n      triggers.CreateAuthChallenge.length > 0 &&\n      !!triggers.VerifyAuthChallengeResponse &&\n      triggers.VerifyAuthChallengeResponse.length > 0;\n  }\n  context.amplify.updateamplifyMetaAfterResourceUpdate('auth', resourceName, 'customAuth', customAuthConfigured);\n  context.amplify.updateamplifyMetaAfterResourceUpdate('auth', resourceName, 'frontendAuthConfig', getFrontendConfig(authParameters));\n\n  // Update Identity Pool dependency attributes on userpool groups\n  const allResources = context.amplify.getProjectMeta();\n  if (allResources.auth && allResources.auth.userPoolGroups) {\n    const attributes = ['UserPoolId', 'AppClientIDWeb', 'AppClientID'];\n    if (authParameters.identityPoolName) {\n      attributes.push('IdentityPoolId');\n    }\n    const userPoolGroupDependsOn = [\n      {\n        category: 'auth',\n        resourceName,\n        attributes,\n      },\n    ];\n\n    context.amplify.updateamplifyMetaAfterResourceUpdate('auth', 'userPoolGroups', 'dependsOn', userPoolGroupDependsOn);\n  }\n  return resourceName;\n};\n\n/**\n * Get the front end configuration\n * @param authParameters the auth params\n */\nexport const getFrontendConfig = (authParameters: AuthParameters): FrontEndConfig => {\n  const verificationMechanisms = (authParameters?.autoVerifiedAttributes || []).map((att: string) => att.toUpperCase());\n  const usernameAttributes: string[] = [];\n\n  if (authParameters?.usernameAttributes && authParameters.usernameAttributes.length > 0) {\n    authParameters.usernameAttributes[0].split(',').forEach((it) => usernameAttributes.push(it.trim().toUpperCase()));\n  }\n\n  const socialProviders: string[] = [];\n  (authParameters?.authProvidersUserPool ?? []).forEach((provider: string) => {\n    const key = hostedUIProviders.find((it) => it.value === provider)?.key;\n\n    if (key) {\n      socialProviders.push(key);\n    }\n  });\n\n  const signupAttributes = (authParameters?.requiredAttributes || []).map((att: string) => att.toUpperCase());\n\n  const passwordProtectionSettings = {\n    passwordPolicyMinLength: authParameters?.passwordPolicyMinLength,\n    passwordPolicyCharacters: (authParameters?.passwordPolicyCharacters || []).map((i: string) => i.replace(/ /g, '_').toUpperCase()),\n  };\n\n  const mfaTypes: string[] = [];\n  if (authParameters.mfaTypes) {\n    if (authParameters.mfaTypes.includes('SMS Text Message')) {\n      mfaTypes.push('SMS');\n    }\n\n    if (authParameters.mfaTypes.includes('TOTP')) {\n      mfaTypes.push('TOTP');\n    }\n  }\n\n  return {\n    socialProviders,\n    usernameAttributes,\n    signupAttributes,\n    passwordProtectionSettings,\n    mfaConfiguration: authParameters?.mfaConfiguration,\n    mfaTypes,\n    verificationMechanisms,\n  };\n};\n"]}