{"version":3,"file":"generate-auth-trigger-template.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/generate-auth-trigger-template.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as fs from 'fs-extra';\nimport { $TSAny, AmplifyFault, JSONUtilities, pathManager } from '@aws-amplify/amplify-cli-core';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\nimport * as cdk from 'aws-cdk-lib';\nimport { CustomResource } from 'aws-cdk-lib';\nimport { v4 as uuid } from 'uuid';\nimport { Construct } from 'constructs';\nimport { authTriggerAssetFilePath } from '../constants';\nimport _ from 'lodash';\nimport { AuthTriggerConnection, AuthTriggerPermissions, CognitoStackOptions } from '../service-walkthrough-types/cognito-user-input-types';\nimport { configureSmsOption } from './configure-sms';\n\ntype CustomResourceAuthStackProps = Readonly<{\n  description: string;\n  authTriggerConnections: AuthTriggerConnection[];\n  enableSnsRole: boolean;\n  permissions?: AuthTriggerPermissions[];\n}>;\n\nconst CFN_TEMPLATE_FORMAT_VERSION = '2010-09-09';\n\n/**\n * CDK stack for custom auth resources\n */\nexport class CustomResourceAuthStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props: CustomResourceAuthStackProps) {\n    super(scope, id, { ...props, synthesizer: new cdk.LegacyStackSynthesizer() });\n    this.templateOptions.templateFormatVersion = CFN_TEMPLATE_FORMAT_VERSION;\n\n    const env = new cdk.CfnParameter(this, 'env', {\n      type: 'String',\n    });\n\n    const userpoolId = new cdk.CfnParameter(this, 'userpoolId', {\n      type: 'String',\n    });\n\n    const userpoolArn = new cdk.CfnParameter(this, 'userpoolArn', {\n      type: 'String',\n    });\n\n    // eslint-disable-next-line no-new\n    new cdk.CfnCondition(this, 'ShouldNotCreateEnvResources', {\n      expression: cdk.Fn.conditionEquals(env, 'NONE'),\n    });\n\n    props.authTriggerConnections.forEach((triggerConfig) => {\n      const config = triggerConfig;\n      const fnName = new cdk.CfnParameter(this, `function${config.lambdaFunctionName}Name`, {\n        type: 'String',\n      });\n      const fnArn = new cdk.CfnParameter(this, `function${config.lambdaFunctionName}Arn`, {\n        type: 'String',\n      });\n      createPermissionToInvokeLambda(this, fnName, userpoolArn, config);\n      const roleArn = new cdk.CfnParameter(this, `function${config.lambdaFunctionName}LambdaExecutionRole`, {\n        type: 'String',\n      });\n      config.lambdaFunctionArn = fnArn.valueAsString;\n\n      if (!_.isEmpty(props.permissions)) {\n        const lambdaPermission = props.permissions!.find((permission) => config.triggerType === permission.trigger);\n        if (!_.isEmpty(lambdaPermission)) {\n          createPermissionsForAuthTrigger(this, fnName, roleArn, lambdaPermission!, userpoolArn);\n        }\n      }\n    });\n\n    createCustomResource(this, props.authTriggerConnections, userpoolId, userpoolArn, props.enableSnsRole);\n  }\n\n  /**\n   * This function renderers a full CFN template for this stack.\n   * It is inspired by\n   * https://github.com/aws/aws-cdk/blob/bd056d1d38a2d3f43efe4f857c4d38b30fb9b681/packages/%40aws-cdk/assertions/lib/template.ts#L298-L310.\n   * This replaces private prepareApp (from CDK v1) and this._toCloudFormation() (the latter does not function properly without the former).\n   */\n  toCloudFormation = (): $TSAny => {\n    const root = this.node.root as cdk.Stage;\n    const assembly = root.synth();\n    if (!this.nestedStackParent) {\n      return assembly.getStackArtifact(this.artifactId).template;\n    }\n    // if this is a nested stack ( i.e. it has a parent), then just read the template as a string\n    const template = fs.readFileSync(path.join(assembly.directory, this.templateFile));\n    return JSON.parse(template.toString('utf-8'));\n  };\n}\n\n/**\n * Creates nested auth trigger CFN template and writes it to the project directory\n */\nexport const generateNestedAuthTriggerTemplate = async (\n  category: string,\n  resourceName: string,\n  request: CognitoStackOptions,\n): Promise<void> => {\n  const cfnFileName = 'auth-trigger-cloudformation-template.json';\n  const targetDir = path.join(pathManager.getBackendDirPath(), category, resourceName, 'build');\n  const authTriggerCfnFilePath = path.join(targetDir, cfnFileName);\n  const { authTriggerConnections, permissions, useEnabledMfas } = request;\n\n  const configureSMS = configureSmsOption(request);\n\n  const enableSnsRole: boolean | undefined = !useEnabledMfas || configureSMS;\n\n  if (!_.isEmpty(authTriggerConnections)) {\n    const cfnObject = await createCustomResourceForAuthTrigger(authTriggerConnections!, !!enableSnsRole, permissions);\n    JSONUtilities.writeJson(authTriggerCfnFilePath, cfnObject);\n  } else {\n    // delete the custom stack template if the triggers aren't defined\n    try {\n      fs.unlinkSync(authTriggerCfnFilePath);\n    } catch (err) {\n      // if its not present do nothing\n    }\n  }\n};\n\n/**\n * creates custom resource for cognito triggers\n */\n// eslint-disable-next-line spellcheck/spell-checker\nexport const createCustomResourceForAuthTrigger = async (\n  authTriggerConnections: AuthTriggerConnection[],\n  enableSnsRole: boolean,\n  permissions?: AuthTriggerPermissions[],\n): Promise<$TSAny> => {\n  if (Array.isArray(authTriggerConnections) && authTriggerConnections.length) {\n    const stack = new CustomResourceAuthStack(undefined as $TSAny, 'Amplify', {\n      description: 'Custom Resource stack for Auth Trigger created using Amplify CLI',\n      authTriggerConnections,\n      enableSnsRole,\n      permissions,\n    });\n    const cfn = stack.toCloudFormation();\n    return cfn;\n  }\n  throw new AmplifyFault('AuthCategoryFault', {\n    message: `Auth Trigger Connections must have value when trigger are selected`,\n  });\n};\n\nconst createCustomResource = (\n  stack: cdk.Stack,\n  authTriggerConnections: AuthTriggerConnection[],\n  userpoolId: cdk.CfnParameter,\n  userpoolArn: cdk.CfnParameter,\n  enableSnsRole: boolean,\n): void => {\n  const triggerCode = fs.readFileSync(authTriggerAssetFilePath, 'utf-8');\n  const authTriggerFn = new lambda.Function(stack, 'authTriggerFn', {\n    runtime: lambda.Runtime.NODEJS_16_X,\n    code: lambda.Code.fromInline(triggerCode),\n    handler: 'index.handler',\n  });\n\n  if (authTriggerFn.role) {\n    authTriggerFn.role.addToPrincipalPolicy(\n      new iam.PolicyStatement({\n        effect: iam.Effect.ALLOW,\n        actions: ['cognito-idp:DescribeUserPool', 'cognito-idp:UpdateUserPool'],\n        resources: [userpoolArn.valueAsString],\n      }),\n    );\n\n    // reason to add iam::PassRole\n    // AccessDeniedException: User: <IAM User> is not authorized to perform: iam:PassRole\n    // on resource: <auth trigger role>  if (authTriggerFn.role) {\n    if (enableSnsRole) {\n      const snsRoleArn = new cdk.CfnParameter(stack, 'snsRoleArn', {\n        type: 'String',\n      });\n      authTriggerFn.role.addToPrincipalPolicy(\n        new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: ['iam:PassRole'],\n          resources: [snsRoleArn.valueAsString],\n        }),\n      );\n    }\n  }\n\n  // The custom resource that uses the provider to supply value\n  // Passing in a nonce parameter to ensure that the custom resource is triggered on every deployment\n  // eslint-disable-next-line no-new\n  const customResource = new CustomResource(stack, 'CustomAuthTriggerResource', {\n    serviceToken: authTriggerFn.functionArn,\n    properties: { userpoolId: userpoolId.valueAsString, lambdaConfig: authTriggerConnections, nonce: uuid() },\n    resourceType: 'Custom::CustomAuthTriggerResourceOutputs',\n  });\n\n  customResource.node.addDependency(authTriggerFn);\n};\n\nconst createPermissionToInvokeLambda = (\n  stack: cdk.Stack,\n  fnName: cdk.CfnParameter,\n  userpoolArn: cdk.CfnParameter,\n  config: AuthTriggerConnection,\n): void => {\n  // eslint-disable-next-line no-new\n  new lambda.CfnPermission(stack, `UserPool${config.triggerType}LambdaInvokePermission`, {\n    action: 'lambda:InvokeFunction',\n    functionName: fnName.valueAsString,\n    principal: 'cognito-idp.amazonaws.com',\n    sourceArn: userpoolArn.valueAsString,\n  });\n};\n\nconst createPermissionsForAuthTrigger = (\n  stack: cdk.Stack,\n  fnName: cdk.CfnParameter,\n  roleArn: cdk.CfnParameter,\n  permissions: AuthTriggerPermissions,\n  userpoolArn: cdk.CfnParameter,\n): iam.Policy => {\n  const myRole = iam.Role.fromRoleArn(stack, 'LambdaExecutionRole', roleArn.valueAsString);\n  return new iam.Policy(stack, `${fnName}${permissions.trigger}${permissions.policyName}`, {\n    policyName: permissions.policyName,\n    statements: [\n      new iam.PolicyStatement({\n        effect: permissions.effect === iam.Effect.ALLOW ? iam.Effect.ALLOW : iam.Effect.DENY,\n        actions: permissions.actions,\n        resources: [userpoolArn.valueAsString],\n      }),\n    ],\n    roles: [myRole],\n  });\n};\n"]}