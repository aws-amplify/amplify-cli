{"version":3,"file":"awsCognito-user-input-types.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/service-walkthrough-types/awsCognito-user-input-types.ts"],"names":[],"mappings":";;;AAwGA,IAAY,aAKX;AALD,WAAY,aAAa;IACvB,gCAAe,CAAA;IACf,8CAA6B,CAAA;IAC7B,0DAAyC,CAAA;IACzC,+DAA8C,CAAA;AAChD,CAAC,EALW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAKxB","sourcesContent":["export interface CognitoCLIInputs {\n  version?: string;\n  cognitoConfig: CognitoConfiguration;\n}\n\nexport type CognitoConfiguration = ServiceQuestionsBaseResult &\n  OAuthResult &\n  SocialProviderResult &\n  IdentityPoolResult &\n  PasswordPolicyResult &\n  PasswordRecoveryResult &\n  MfaResult &\n  AdminQueriesResult &\n  Triggers;\n\nexport interface ServiceQuestionsBaseResult {\n  serviceName: 'Cognito';\n  resourceName: string;\n  useDefault: 'default' | 'defaultSocial' | 'manual';\n  updateFlow?: 'default' | 'defaultSocial' | 'manual' | 'callbacks' | 'providers' | 'updateUserPoolGroups' | 'updateAdminQueries';\n  requiredAttributes?: string[];\n  authSelections: 'userPoolOnly' | 'identityPoolAndUserPool' | 'identityPoolOnly';\n  userPoolName?: string;\n  usernameAttributes?: UsernameAttributes[];\n  aliasAttributes?: AliasAttributes[];\n  userPoolGroups?: boolean;\n  userPoolGroupList?: string[];\n  userpoolClientRefreshTokenValidity?: string | number;\n  userpoolClientReadAttributes?: string[];\n  userpoolClientWriteAttributes?: string[];\n  userpoolClientSetAttributes?: boolean;\n  usernameCaseSensitive?: boolean;\n  verificationBucketName?: string;\n  resourceNameTruncated?: string;\n  sharedId?: string;\n  userpoolClientGenerateSecret?: boolean;\n  userpoolClientLambdaRole?: string;\n  useEnabledMfas?: boolean;\n}\n\nexport interface OAuthResult {\n  hostedUI?: boolean;\n  hostedUIDomainName?: string;\n  hostedUIProviderMeta?: any;\n  hostedUIProviderCreds?: any;\n  AllowedOAuthFlows?: 'code' | 'implicit';\n  AllowedOAuthScopes?: string[];\n  newCallbackURLs?: string[];\n  newLogoutURLs?: string[];\n  oAuthMetadata?: any;\n}\n\nexport interface SocialProviderResult {\n  authProvidersUserPool?: string[];\n  facebookAppIdUserPool?: string;\n  facebookAppSecretUserPool?: string;\n  googleAppIdUserPool?: string;\n  googleAppSecretUserPool?: string;\n  loginwithamazonAppIdUserPool?: string;\n  loginwithamazonAppSecretUserPool?: string;\n  signinwithappleClientIdUserPool?: string;\n  signinwithappleTeamIdUserPool?: string;\n  signinwithappleKeyIdUserPool?: string;\n  signinwithapplePrivateKeyUserPool?: string;\n}\n\nexport interface IdentityPoolResult {\n  thirdPartyAuth?: boolean;\n  identityPoolName?: string;\n  allowUnauthenticatedIdentities?: boolean;\n  authProviders?: string[];\n  googleClientId?: string;\n  googleIos?: string;\n  googleAndroid?: string;\n  facebookAppId?: string;\n  amazonAppId?: string;\n  appleAppId?: string;\n  selectedParties?: string; // serialized json\n  audiences?: string[];\n}\n\nexport interface PasswordRecoveryResult {\n  emailVerificationMessage?: string;\n  emailVerificationSubject?: string;\n  smsVerificationMessage?: string;\n  autoVerifiedAttributes?: string[];\n}\n\nexport interface MfaResult {\n  mfaConfiguration?: 'OPTIONAL' | 'ON' | 'OFF';\n  mfaTypes?: ('SMS Text Message' | 'TOTP')[];\n  smsAuthenticationMessage?: string;\n}\n\nexport interface AdminQueriesResult {\n  adminQueries?: boolean;\n  adminQueryGroup?: string;\n}\n\nexport interface PasswordPolicyResult {\n  passwordPolicyCharacters?: PasswordPolicy[];\n  passwordPolicyMinLength?: number | string;\n}\n\nexport enum AttributeType {\n  EMAIL = 'email',\n  PHONE_NUMBER = 'phone_number',\n  PREFERRED_USERNAME = 'preferred_username',\n  EMAIL_AND_PHONE_NUMBER = 'email, phone_number',\n}\n\nexport type PasswordPolicy = 'Requires Lowercase' | 'Requires Numbers' | 'Requires Symbols' | 'Requires Uppercase';\n\nexport type UsernameAttributes = AttributeType.EMAIL | AttributeType.PHONE_NUMBER | AttributeType.EMAIL_AND_PHONE_NUMBER;\n\nexport type AliasAttributes = AttributeType.EMAIL | AttributeType.PHONE_NUMBER | AttributeType.PREFERRED_USERNAME;\n\nexport interface Triggers {\n  triggers?: any; // TODO create a type for this\n}\n"]}