{"version":3,"file":"cognito-user-input-types.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/service-walkthrough-types/cognito-user-input-types.ts"],"names":[],"mappings":";;;AAkIA,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,gCAAe,CAAA;IACf,8CAA6B,CAAA;IAC7B,0DAAyC,CAAA;AAC3C,CAAC,EAJW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAIxB;AAYD,IAAY,WAUX;AAVD,WAAY,WAAW;IACrB,0DAA2C,CAAA;IAC3C,8CAA+B,CAAA;IAC/B,0DAA2C,CAAA;IAC3C,wDAAyC,CAAA;IACzC,oDAAqC,CAAA;IACrC,sDAAuC,CAAA;IACvC,sCAAuB,CAAA;IACvB,0EAA2D,CAAA;IAC3D,wDAAyC,CAAA;AAC3C,CAAC,EAVW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAUtB","sourcesContent":["// Some convenience types for the existing service walkthrough logic\n\nimport { $TSObject } from '@aws-amplify/amplify-cli-core';\nimport { FunctionDependency } from '@aws-amplify/amplify-function-plugin-interface';\nimport { CognitoConfiguration } from './awsCognito-user-input-types';\n\nexport type AuthTriggerPermissions = {\n  policyName: string;\n  trigger: string;\n  effect: string;\n  actions: string[];\n  resource: {\n    paramType: string;\n    keys: string | string[];\n  };\n};\n\nexport type CognitoStackOptions = CognitoConfiguration & AuthStackMetadata;\n\ntype AuthStackMetadata = {\n  authRoleArn: $TSObject;\n  unauthRoleArn: $TSObject;\n  dependsOn?: FunctionDependency[];\n  parentStack?: string;\n  breakCircularDependency: boolean;\n  permissions?: AuthTriggerPermissions[];\n  authTriggerConnections?: AuthTriggerConnection[];\n  userAutoVerifiedAttributeUpdateSettings?: string[];\n  authTriggerPermissions?: AuthTriggerPermissions[];\n};\n\nexport type ServiceQuestionHeadlessResult = ServiceQuestionsBaseResult &\n  OAuthResult &\n  SocialProviderResult &\n  IdentityPoolResult &\n  PasswordPolicyResult &\n  AutoVerifiedAttributesResult &\n  MfaResult &\n  AdminQueriesResult &\n  Triggers;\n\nexport interface ServiceQuestionsBaseResult {\n  serviceName: 'Cognito';\n  resourceName?: string;\n  useDefault: 'default' | 'defaultSocial' | 'manual';\n  updateFlow?: 'default' | 'defaultSocial' | 'manual' | 'callbacks' | 'providers' | 'updateUserPoolGroups' | 'updateAdminQueries';\n  requiredAttributes: string[];\n  authSelections: 'userPoolOnly' | 'identityPoolAndUserPool' | 'identityPoolOnly';\n  userPoolName?: string;\n  usernameAttributes?: UsernameAttributes[];\n  aliasAttributes?: AliasAttributes[];\n  userPoolGroups?: boolean;\n  userPoolGroupList?: string[];\n  userpoolClientRefreshTokenValidity?: number;\n  userpoolClientReadAttributes: string[];\n  userpoolClientWriteAttributes: string[];\n  userpoolClientSetAttributes?: boolean;\n  usernameCaseSensitive?: boolean;\n  useEnabledMfas?: boolean;\n  authTriggerConnections?: string;\n  verificationBucketName?: string;\n  resourceNameTruncated?: string;\n  sharedId?: string;\n  permissions?: string;\n}\n\nexport interface OAuthResult {\n  hostedUI?: boolean;\n  hostedUIDomainName?: string;\n  hostedUIProviderMeta?: any;\n  hostedUIProviderCreds?: any;\n  AllowedOAuthFlows?: 'code' | 'implicit';\n  AllowedOAuthScopes?: string[];\n  newCallbackURLs?: string[];\n  newLogoutURLs?: string[];\n  oAuthMetadata?: any;\n}\n\nexport interface SocialProviderResult {\n  authProvidersUserPool?: string[];\n  facebookAppIdUserPool?: string;\n  facebookAppSecretUserPool?: string;\n  googleAppIdUserPool?: string;\n  googleAppSecretUserPool?: string;\n  loginwithamazonAppIdUserPool?: string;\n  loginwithamazonAppSecretUserPool?: string;\n  signinwithappleClientIdUserPool?: string;\n  signinwithappleTeamIdUserPool?: string;\n  signinwithappleKeyIdUserPool?: string;\n  signinwithapplePrivateKeyUserPool?: string;\n}\n\nexport interface IdentityPoolResult {\n  thirdPartyAuth?: boolean;\n  identityPoolName?: string;\n  allowUnauthenticatedIdentities?: boolean;\n  authProviders: string[];\n  googleClientId?: string;\n  googleIos?: string;\n  googleAndroid?: string;\n  facebookAppId?: string;\n  amazonAppId?: string;\n  appleAppId?: string;\n  selectedParties?: string; // serialized json\n  audiences?: string[];\n}\n\nexport interface AutoVerifiedAttributesResult {\n  emailVerificationMessage?: string;\n  emailVerificationSubject?: string;\n  smsVerificationMessage?: string;\n  autoVerifiedAttributes: string[];\n}\n\nexport interface MfaResult {\n  mfaConfiguration: 'OPTIONAL' | 'ON' | 'OFF';\n  mfaTypes?: ('SMS Text Message' | 'TOTP')[];\n  smsAuthenticationMessage?: string;\n}\n\nexport interface AdminQueriesResult {\n  adminQueries: boolean;\n  adminQueryGroup?: string;\n}\n\nexport interface PasswordPolicyResult {\n  passwordPolicyCharacters?: PasswordPolicy[];\n  passwordPolicyMinLength?: number;\n}\n\nexport enum AttributeType {\n  EMAIL = 'email',\n  PHONE_NUMBER = 'phone_number',\n  PREFERRED_USERNAME = 'preferred_username',\n}\n\nexport type PasswordPolicy = 'Requires Lowercase' | 'Requires Numbers' | 'Requires Symbols' | 'Requires Uppercase';\n\nexport type UsernameAttributes = AttributeType.EMAIL | AttributeType.PHONE_NUMBER;\n\nexport type AliasAttributes = AttributeType.EMAIL | AttributeType.PHONE_NUMBER | AttributeType.PREFERRED_USERNAME;\n\nexport interface Triggers {\n  triggers?: any; // TODO create a type for this\n}\n\nexport enum TriggerType {\n  CreateAuthChallenge = 'CreateAuthChallenge',\n  CustomMessage = 'CustomMessage',\n  DefineAuthChallenge = 'DefineAuthChallenge',\n  PostAuthentication = 'PostAuthentication',\n  PostConfirmation = 'PostConfirmation',\n  PreAuthentication = 'PreAuthentication',\n  PreSignup = 'PreSignUp',\n  VerifyAuthChallengeResponse = 'VerifyAuthChallengeResponse',\n  PreTokenGeneration = 'PreTokenGeneration',\n}\n\nexport type AuthTriggerConnection = {\n  lambdaFunctionName: string;\n  triggerType: string;\n  lambdaFunctionArn?: string;\n};\n\nexport type AuthTriggerConfig = {\n  triggers: $TSObject;\n  authTriggerConnections: AuthTriggerConnection[];\n  authTriggerPermissions?: AuthTriggerPermissions[];\n};\n"]}