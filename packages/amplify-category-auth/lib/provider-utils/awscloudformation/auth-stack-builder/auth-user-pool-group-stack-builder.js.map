{"version":3,"file":"auth-user-pool-group-stack-builder.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/auth-stack-builder/auth-user-pool-group-stack-builder.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-classes-per-file */\nimport * as cdk from 'aws-cdk-lib';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\nimport { CfnUserPoolGroup } from 'aws-cdk-lib/aws-cognito';\nimport { AmplifyUserPoolGroupStackTemplate } from '@aws-amplify/cli-extensibility-helper';\nimport { JSONUtilities } from '@aws-amplify/amplify-cli-core';\nimport * as fs from 'fs-extra';\nimport { Construct } from 'constructs';\n// eslint-disable-next-line import/no-cycle\nimport { roleMapLambdaFilePath } from '../constants';\n// eslint-disable-next-line import/no-cycle\nimport { AmplifyUserPoolGroupStackOptions } from './user-pool-group-stack-transform';\n\nconst CFN_TEMPLATE_FORMAT_VERSION = '2010-09-09';\nconst ROOT_CFN_DESCRIPTION = 'Root Stack for AWS Amplify CLI';\n\n/**\n * Input parameters to the AuthCognitoStack constructor\n */\nexport type AmplifyAuthCognitoStackProps = {\n  synthesizer: cdk.IStackSynthesizer;\n};\n\n/**\n * CDK stack that contains the UserPool Group resources\n */\nexport class AmplifyUserPoolGroupStack extends cdk.Stack implements AmplifyUserPoolGroupStackTemplate {\n  _scope: Construct;\n  private _cfnParameterMap: Map<string, cdk.CfnParameter> = new Map();\n  private _cfnConditionMap: Map<string, cdk.CfnCondition> = new Map();\n  userPoolGroup: Record<string, CfnUserPoolGroup>;\n  userPoolGroupRole: Record<string, iam.CfnRole>;\n  roleMapCustomResource?: cdk.CustomResource;\n  roleMapLambdaFunction?: lambda.CfnFunction;\n  lambdaExecutionRole?: iam.CfnRole;\n\n  constructor(scope: Construct, id: string, props: AmplifyAuthCognitoStackProps) {\n    super(scope, id, props);\n    this._scope = scope;\n    this.templateOptions.templateFormatVersion = CFN_TEMPLATE_FORMAT_VERSION;\n    this.templateOptions.description = ROOT_CFN_DESCRIPTION;\n    this.userPoolGroup = {};\n    this.userPoolGroupRole = {};\n  }\n\n  /**\n   * Not implemented\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getCfnOutput(/* logicalId: string */): cdk.CfnOutput {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * Not implemented\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getCfnMapping(/* logicalId: string */): cdk.CfnMapping {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * Add an output to the template\n   */\n  addCfnOutput(props: cdk.CfnOutputProps, logicalId: string): void {\n    try {\n      // eslint-disable-next-line no-new\n      new cdk.CfnOutput(this, logicalId, props);\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  /**\n   * Add a mapping to the template\n   */\n  addCfnMapping(props: cdk.CfnMappingProps, logicalId: string): void {\n    try {\n      // eslint-disable-next-line no-new\n      new cdk.CfnMapping(this, logicalId, props);\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  /**\n   * Add a resource to the template\n   */\n  addCfnResource(props: cdk.CfnResourceProps, logicalId: string): void {\n    try {\n      // eslint-disable-next-line no-new\n      new cdk.CfnResource(this, logicalId, props);\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  /**\n   * Add a template parameter\n   */\n  addCfnParameter(props: cdk.CfnParameterProps, logicalId: string): void {\n    try {\n      if (this._cfnParameterMap.has(logicalId)) {\n        throw new Error('logical Id already Exists');\n      }\n      this._cfnParameterMap.set(logicalId, new cdk.CfnParameter(this, logicalId, props));\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  /**\n   * Add a template condition\n   */\n  addCfnCondition(props: cdk.CfnConditionProps, logicalId: string): void {\n    try {\n      if (this._cfnConditionMap.has(logicalId)) {\n        throw new Error('logical Id already Exists');\n      }\n      this._cfnConditionMap.set(logicalId, new cdk.CfnCondition(this, logicalId, props));\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  /**\n   * Get the parameter with the given logical id\n   */\n  getCfnParameter(logicalId: string): cdk.CfnParameter {\n    if (this._cfnParameterMap.has(logicalId)) {\n      return this._cfnParameterMap.get(logicalId)!;\n    }\n    throw new Error(`CloudFormation Parameter with LogicalId ${logicalId} doesn't exist`);\n  }\n\n  /**\n   * Get the condition with the given logical id\n   */\n  getCfnCondition(logicalId: string): cdk.CfnCondition {\n    if (this._cfnConditionMap.has(logicalId)) {\n      return this._cfnConditionMap.get(logicalId)!;\n    }\n    throw new Error(`CloudFormation Parameter with LogicalId ${logicalId} doesn't exist`);\n  }\n\n  // add Function for Custom Resource in Root stack\n  public renderCloudFormationTemplate = (): string => JSON.stringify(this._toCloudFormation(), undefined, 2);\n\n  generateUserPoolGroupResources = async (props: AmplifyUserPoolGroupStackOptions): Promise<void> => {\n    props.groups.forEach((group) => {\n      this.userPoolGroup[`${group.groupName}`] = new CfnUserPoolGroup(this, `${group.groupName}Group`, {\n        userPoolId: this.getCfnParameter(getCfnParamsLogicalId(props.cognitoResourceName, 'UserPoolId'))!.valueAsString,\n        groupName: group.groupName,\n        precedence: group.precedence,\n      });\n      this.userPoolGroup[`${group.groupName}`].description = 'override success';\n      if (props.identityPoolName) {\n        this.userPoolGroup[`${group.groupName}`].addPropertyOverride(\n          'RoleArn',\n          cdk.Fn.getAtt(`${group.groupName}GroupRole`, 'Arn').toString(),\n        );\n        this.userPoolGroupRole[`${group.groupName}`] = new iam.CfnRole(this, `${group.groupName}GroupRole`, {\n          roleName: cdk.Fn.join('', [\n            this.getCfnParameter(getCfnParamsLogicalId(props.cognitoResourceName, 'UserPoolId'))!.valueAsString,\n            `-${group.groupName}GroupRole`,\n          ]),\n          assumeRolePolicyDocument: {\n            Version: '2012-10-17',\n            Statement: [\n              {\n                Sid: '',\n                Effect: 'Allow',\n                Principal: {\n                  Federated: 'cognito-identity.amazonaws.com',\n                },\n                Action: 'sts:AssumeRoleWithWebIdentity',\n                Condition: {\n                  StringEquals: {\n                    'cognito-identity.amazonaws.com:aud': {\n                      Ref: `auth${props.cognitoResourceName}IdentityPoolId`,\n                    },\n                  },\n                  'ForAnyValue:StringLike': { 'cognito-identity.amazonaws.com:amr': 'authenticated' },\n                },\n              },\n            ],\n          },\n        });\n        if (group.customPolicies && group.customPolicies.length > 0) {\n          this.userPoolGroupRole[`${group.groupName}`].addPropertyOverride('Policies', group.customPolicies);\n        }\n      }\n    });\n\n    if (props.identityPoolName) {\n      this.lambdaExecutionRole = new iam.CfnRole(this, 'LambdaExecutionRole', {\n        roleName: cdk.Fn.conditionIf(\n          'ShouldNotCreateEnvResources',\n          props.cognitoResourceName,\n          cdk.Fn.join('', [`${props.cognitoResourceName}-ExecutionRole-`, cdk.Fn.ref('env')]).toString(),\n        ).toString(),\n        assumeRolePolicyDocument: {\n          Version: '2012-10-17',\n          Statement: [\n            {\n              Effect: 'Allow',\n              Principal: {\n                Service: ['lambda.amazonaws.com'],\n              },\n              Action: ['sts:AssumeRole'],\n            },\n          ],\n        },\n        policies: [\n          {\n            policyName: 'UserGroupExecutionPolicy',\n            policyDocument: {\n              Version: '2012-10-17',\n              Statement: [\n                {\n                  Effect: 'Allow',\n                  Action: [\n                    'cognito-identity:SetIdentityPoolRoles',\n                    'cognito-identity:ListIdentityPools',\n                    'cognito-identity:describeIdentityPool',\n                  ],\n                  Resource: '*',\n                },\n              ],\n            },\n          },\n          {\n            policyName: 'UserGroupPassRolePolicy',\n            policyDocument: {\n              Version: '2012-10-17',\n              Statement: [\n                {\n                  Effect: 'Allow',\n                  Action: ['iam:PassRole'],\n                  Resource: [\n                    {\n                      Ref: 'AuthRoleArn',\n                    },\n                    {\n                      Ref: 'UnauthRoleArn',\n                    },\n                  ],\n                },\n              ],\n            },\n          },\n        ],\n      });\n      // lambda function for RoleMap Custom Resource\n      this.roleMapLambdaFunction = new lambda.CfnFunction(this, 'RoleMapFunction', {\n        code: {\n          zipFile: fs.readFileSync(roleMapLambdaFilePath, 'utf-8'),\n        },\n        handler: 'index.handler',\n        runtime: 'nodejs16.x',\n        timeout: 300,\n        role: cdk.Fn.getAtt('LambdaExecutionRole', 'Arn').toString(),\n      });\n\n      // eslint-disable-next-line no-new\n      new iam.CfnPolicy(this, 'LambdaCloudWatchPolicy', {\n        policyName: 'UserGroupLogPolicy',\n        roles: [this.lambdaExecutionRole.ref],\n        policyDocument: {\n          Version: '2012-10-17',\n          Statement: [\n            {\n              Effect: 'Allow',\n              Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],\n              Resource: {\n                'Fn::Sub': [\n                  'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaName}:log-stream:*',\n                  {\n                    lambdaName: this.roleMapLambdaFunction.ref,\n                  },\n                ],\n              },\n            },\n          ],\n        },\n      });\n\n      // adding custom trigger roleMap function\n      this.roleMapCustomResource = new cdk.CustomResource(this, 'RoleMapFunctionInput', {\n        serviceToken: this.roleMapLambdaFunction.attrArn,\n        resourceType: 'Custom::LambdaCallout',\n        properties: {\n          AuthRoleArn: cdk.Fn.ref('AuthRoleArn'),\n          UnauthRoleArn: cdk.Fn.ref('UnauthRoleArn'),\n          identityPoolId: cdk.Fn.ref(getCfnParamsLogicalId(props.cognitoResourceName, 'IdentityPoolId')),\n          userPoolId: cdk.Fn.ref(getCfnParamsLogicalId(props.cognitoResourceName, 'UserPoolId')),\n          appClientIDWeb: cdk.Fn.ref(getCfnParamsLogicalId(props.cognitoResourceName, 'AppClientIDWeb')),\n          appClientID: cdk.Fn.ref(getCfnParamsLogicalId(props.cognitoResourceName, 'AppClientID')),\n          region: cdk.Fn.ref('AWS::Region'),\n          env: cdk.Fn.ref('env'),\n        },\n      });\n      this.roleMapCustomResource.node.addDependency(this.roleMapLambdaFunction);\n    }\n  };\n}\n\nconst getCfnParamsLogicalId = (cognitoResourceName: string, cfnParamName: string): string => `auth${cognitoResourceName}${cfnParamName}`;\n\n/**\n * additional class to merge CFN parameters and CFN outputs as cdk doesn't allow same logical ID of constructs in same stack\n */\nexport class AmplifyUserPoolGroupStackOutputs extends cdk.Stack {\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(scope: Construct, id: string, props: AmplifyAuthCognitoStackProps) {\n    super(scope, id, props);\n  }\n\n  /**\n   * Not implemented\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getCfnParameter(/* logicalId: string */): cdk.CfnParameter {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * Not implemented\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getCfnOutput(/* logicalId: string */): cdk.CfnOutput {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * Not implemented\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getCfnMapping(/* logicalId: string */): cdk.CfnMapping {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * Not implemented\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getCfnCondition(/* logicalId: string */): cdk.CfnCondition {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * Not implemented\n   */\n  // eslint-disable-next-line class-methods-use-this\n  addCfnParameter(/* props: cdk.CfnParameterProps, logicalId: string */): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * Add an output to the stack\n   */\n  addCfnOutput(props: cdk.CfnOutputProps, logicalId: string): void {\n    try {\n      // eslint-disable-next-line no-new\n      new cdk.CfnOutput(this, logicalId, props);\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  /**\n   * Not implemented\n   */\n  // eslint-disable-next-line class-methods-use-this\n  addCfnMapping(/* props: cdk.CfnMappingProps, logicalId: string */): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * Not implemented\n   */\n  // eslint-disable-next-line class-methods-use-this\n  addCfnCondition(/* props: cdk.CfnConditionProps, logicalId: string */): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * Not implemented\n   */\n  // eslint-disable-next-line class-methods-use-this\n  addCfnResource(/* props: cdk.CfnResourceProps, logicalId: string */): void {\n    throw new Error('Method not implemented.');\n  }\n\n  public renderCloudFormationTemplate = (): string => JSONUtilities.stringify(this._toCloudFormation())!;\n}\n"]}