{"version":3,"file":"resource-handlers.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/handlers/resource-handlers.ts"],"names":[],"mappings":"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","sourcesContent":["import { $TSAny, $TSObject, stateManager } from '@aws-amplify/amplify-cli-core';\nimport { printer } from '@aws-amplify/amplify-prompts';\nimport { ensureEnvParamManager } from '@aws-amplify/amplify-environment-parameters';\nimport { getSupportedServices } from '../../supported-services';\nimport { authProviders } from '../assets/string-maps';\nimport { AuthInputState } from '../auth-inputs-manager/auth-input-state';\nimport { category, ENV_SPECIFIC_PARAMS, privateKeys } from '../constants';\nimport { CognitoCLIInputs, CognitoConfiguration } from '../service-walkthrough-types/awsCognito-user-input-types';\nimport { ServiceQuestionHeadlessResult } from '../service-walkthrough-types/cognito-user-input-types';\nimport { getPostAddAuthMetaUpdater, getPostUpdateAuthMetaUpdater } from '../utils/amplify-meta-updaters';\nimport { getAddAuthDefaultsApplier, getUpdateAuthDefaultsApplier } from '../utils/auth-defaults-appliers';\nimport { doesConfigurationIncludeSMS } from '../utils/auth-sms-workflow-helper';\nimport { generateAuthStackTemplate } from '../utils/generate-auth-stack-template';\nimport { getPostAddAuthMessagePrinter, getPostUpdateAuthMessagePrinter, printSMSSandboxWarning } from '../utils/message-printer';\nimport {\n  createUserPoolGroups,\n  getResourceSynthesizer,\n  getResourceUpdater,\n  removeDeprecatedProps,\n  updateUserPoolGroups,\n} from '../utils/synthesize-resources';\nimport { AuthContext } from '../../../context';\n\n/**\n * Factory function that returns a CognitoCLIInputs consumer that handles all of the resource generation logic.\n * The consumer returns the resourceName of the generated resource.\n * @param context The amplify context\n */\nexport const getAddAuthHandler = (context: AuthContext) => async (request: ServiceQuestionHeadlessResult | CognitoConfiguration) => {\n  const serviceMetadata = getSupportedServices()[request.serviceName];\n  const { defaultValuesFilename, provider } = serviceMetadata;\n\n  let projectName = context.amplify.getProjectConfig().projectName.toLowerCase();\n  const disallowedChars = /[^A-Za-z0-9]+/g;\n  projectName = projectName.replace(disallowedChars, '');\n\n  const requestWithDefaults = await getAddAuthDefaultsApplier(context, defaultValuesFilename, projectName)(request);\n\n  // replace secret keys from cli inputs to be stored in deployment secrets\n\n  let sharedParams = { ...requestWithDefaults } as $TSAny;\n  privateKeys.forEach((p) => delete sharedParams[p]);\n  sharedParams = removeDeprecatedProps(sharedParams);\n  // extracting env-specific params from parameters object\n  const envSpecificParams: $TSObject = {};\n  const cliInputs = { ...sharedParams };\n  ENV_SPECIFIC_PARAMS.forEach((paramName) => {\n    if (paramName in request) {\n      envSpecificParams[paramName] = cliInputs[paramName];\n      delete cliInputs[paramName];\n    }\n  });\n\n  const cognitoCLIInputs: CognitoCLIInputs = {\n    version: '1',\n    cognitoConfig: cliInputs,\n  };\n\n  await ensureEnvParamManager();\n  context.amplify.saveEnvResourceParameters(context, category, cognitoCLIInputs.cognitoConfig.resourceName, envSpecificParams);\n\n  // move this function outside of AddHandler\n  try {\n    const cliState = new AuthInputState(context, cognitoCLIInputs.cognitoConfig.resourceName);\n    // saving cli-inputs except secrets\n    await cliState.saveCLIInputPayload(cognitoCLIInputs);\n    // cdk transformation in this function\n    // start auth transform here\n    await generateAuthStackTemplate(context, cognitoCLIInputs.cognitoConfig.resourceName);\n    // remove this when api and functions transform are done\n    await getResourceSynthesizer(context, requestWithDefaults);\n\n    getPostAddAuthMetaUpdater(context, { service: cognitoCLIInputs.cognitoConfig.serviceName, providerName: provider })(\n      cliInputs.resourceName,\n    );\n    getPostAddAuthMessagePrinter(cognitoCLIInputs.cognitoConfig.resourceName);\n\n    if (doesConfigurationIncludeSMS(request)) {\n      await printSMSSandboxWarning();\n    }\n  } catch (err: $TSAny) {\n    printer.info(err.stack);\n    printer.error('There was an error adding the auth resource');\n    void context.usageData.emitError(err);\n    process.exitCode = 1;\n  }\n  return cognitoCLIInputs.cognitoConfig.resourceName;\n};\n\n/**\n * Factory function that returns a CognitoConfiguration consumer and handles updates to the auth resource\n */\nexport const getUpdateAuthHandler = (context: AuthContext) => async (request: ServiceQuestionHeadlessResult | CognitoConfiguration) => {\n  const { defaultValuesFilename } = getSupportedServices()[request.serviceName];\n  const requestWithDefaults = await getUpdateAuthDefaultsApplier(\n    context,\n    defaultValuesFilename,\n    context.updatingAuth as CognitoConfiguration,\n  )(request);\n  const resources = stateManager.getMeta();\n  if (resources.auth.userPoolGroups) {\n    await updateUserPoolGroups(context, requestWithDefaults.resourceName!, requestWithDefaults.userPoolGroupList);\n  } else {\n    await createUserPoolGroups(context, requestWithDefaults.resourceName!, requestWithDefaults.userPoolGroupList);\n  }\n  if (\n    (!requestWithDefaults.updateFlow && !requestWithDefaults.thirdPartyAuth) ||\n    (requestWithDefaults.updateFlow === 'manual' && !requestWithDefaults.thirdPartyAuth)\n  ) {\n    delete requestWithDefaults.selectedParties;\n    requestWithDefaults.authProviders = [];\n    authProviders.forEach((a) => delete (requestWithDefaults as $TSAny)[a.answerHashKey]);\n    if (requestWithDefaults.googleIos) {\n      delete requestWithDefaults.googleIos;\n    }\n    if (requestWithDefaults.googleAndroid) {\n      delete requestWithDefaults.googleAndroid;\n    }\n    if (requestWithDefaults.audiences) {\n      delete requestWithDefaults.audiences;\n    }\n  }\n\n  if (requestWithDefaults.useDefault === 'default' || requestWithDefaults.hostedUI === false) {\n    delete requestWithDefaults.oAuthMetadata;\n    delete requestWithDefaults.hostedUIProviderMeta;\n    delete requestWithDefaults.hostedUIProviderCreds;\n    delete requestWithDefaults.hostedUIDomainName;\n    delete requestWithDefaults.authProvidersUserPool;\n  }\n\n  let sharedParams = { ...requestWithDefaults } as $TSAny;\n  privateKeys.forEach((p) => delete sharedParams[p]);\n  sharedParams = removeDeprecatedProps(sharedParams);\n  // extracting env-specific params from parameters object\n  const envSpecificParams: $TSAny = {};\n  const cliInputs = { ...sharedParams };\n  ENV_SPECIFIC_PARAMS.forEach((paramName) => {\n    if (paramName in cliInputs) {\n      envSpecificParams[paramName] = cliInputs[paramName];\n      delete cliInputs[paramName];\n    }\n  });\n  context.amplify.saveEnvResourceParameters(context, category, requestWithDefaults.resourceName, envSpecificParams);\n\n  // handling triggers to be saved correctly in cli-inputs\n  await getResourceUpdater(context, cliInputs);\n  // saving updated request here\n  /**\n   * 1) update cli-inputs manager (get cli-inputs , save cli-inputs)\n   * 2) Save service question Result to cli-inputs.json\n   */\n\n  const cognitoCLIInputs: CognitoCLIInputs = {\n    version: '1',\n    cognitoConfig: cliInputs,\n  };\n  try {\n    const cliState = new AuthInputState(context, cognitoCLIInputs.cognitoConfig.resourceName);\n    const { triggers } = cognitoCLIInputs.cognitoConfig;\n    // convert triggers to JSON as overridden in defaults\n    if (triggers && typeof triggers === 'string') {\n      cognitoCLIInputs.cognitoConfig.triggers = JSON.parse(triggers);\n    }\n    // saving cli-inputs except secrets\n    await cliState.saveCLIInputPayload(cognitoCLIInputs);\n    // remove this when api and functions transform are done\n    if (request.updateFlow !== 'updateUserPoolGroups' && request.updateFlow !== 'updateAdminQueries') {\n      await generateAuthStackTemplate(context, cognitoCLIInputs.cognitoConfig.resourceName);\n    }\n\n    await getPostUpdateAuthMetaUpdater(context)(cognitoCLIInputs.cognitoConfig.resourceName);\n    await getPostUpdateAuthMessagePrinter()(cognitoCLIInputs.cognitoConfig.resourceName);\n\n    if (doesConfigurationIncludeSMS(cliInputs)) {\n      await printSMSSandboxWarning();\n    }\n  } catch (err: $TSAny) {\n    printer.info(err.stack);\n    printer.error('There was an error updating the auth resource');\n    void context.usageData.emitError(err);\n    process.exitCode = 1;\n  }\n  return cognitoCLIInputs.cognitoConfig.resourceName;\n};\n"]}