{"version":3,"file":"auth-input-state.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/auth-inputs-manager/auth-input-state.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs-extra';\nimport * as path from 'path';\nimport {\n  AmplifyCategories,\n  AmplifySupportedService,\n  JSONUtilities,\n  pathManager,\n  CLIInputSchemaValidator,\n  CategoryInputState,\n  FeatureFlags,\n  $TSContext,\n} from '@aws-amplify/amplify-cli-core';\nimport { CognitoCLIInputs } from '../service-walkthrough-types/awsCognito-user-input-types';\nimport { CognitoStackOptions } from '../service-walkthrough-types/cognito-user-input-types';\nimport _ from 'lodash';\n\nexport class AuthInputState extends CategoryInputState {\n  #cliInputsFilePath: string; //cli-inputs.json (output) filepath\n  #resourceName: string; //user friendly name provided by user\n  #category: string; //category of the resource\n  #service: string; //AWS service for the resource\n  #buildFilePath: string;\n\n  constructor(private readonly context: $TSContext, resourceName: string) {\n    super(resourceName);\n    this.#category = AmplifyCategories.AUTH;\n    this.#service = AmplifySupportedService.COGNITO;\n    this.#resourceName = resourceName;\n\n    const projectBackendDirPath = pathManager.getBackendDirPath();\n    this.#cliInputsFilePath = path.resolve(path.join(projectBackendDirPath, AmplifyCategories.AUTH, resourceName, 'cli-inputs.json'));\n    this.#buildFilePath = path.resolve(path.join(projectBackendDirPath, AmplifyCategories.AUTH, resourceName, 'build'));\n  }\n\n  public async isCLIInputsValid(cliInputs: CognitoCLIInputs = this.getCLIInputPayload()): Promise<boolean> {\n    const schemaValidator = new CLIInputSchemaValidator(this.context, this.#service, this.#category, 'CognitoCLIInputs');\n    return schemaValidator.validateInput(JSON.stringify(cliInputs));\n  }\n\n  public getCLIInputPayload(): CognitoCLIInputs {\n    return JSONUtilities.readJson<CognitoCLIInputs>(this.#cliInputsFilePath, { throwIfNotExist: true })!;\n  }\n\n  public cliInputFileExists(): boolean {\n    return fs.existsSync(this.#cliInputsFilePath);\n  }\n\n  public async saveCLIInputPayload(cliInputs: CognitoCLIInputs): Promise<void> {\n    // converting stringified triggers to object\n    if (!_.isEmpty(cliInputs.cognitoConfig.triggers)) {\n      cliInputs.cognitoConfig.triggers =\n        typeof cliInputs.cognitoConfig.triggers === 'string'\n          ? JSONUtilities.parse(cliInputs.cognitoConfig.triggers)\n          : cliInputs.cognitoConfig.triggers;\n    }\n    if (await this.isCLIInputsValid(cliInputs)) {\n      fs.ensureDirSync(path.join(pathManager.getBackendDirPath(), this.#category, this._resourceName));\n      JSONUtilities.writeJson(this.#cliInputsFilePath, cliInputs);\n    }\n  }\n\n  /**\n   *\n   * @param context Converts cli-inputs.json to CognitoStackParameters\n   * @param cliInputs auth resource state\n   * @returns previously selected cli-inputs\n   */\n\n  public async loadResourceParameters(context: $TSContext, cliInputs: CognitoCLIInputs): Promise<CognitoStackOptions> {\n    const roles = {\n      authRoleArn: {\n        'Fn::GetAtt': ['AuthRole', 'Arn'],\n      },\n      unauthRoleArn: {\n        'Fn::GetAtt': ['UnauthRole', 'Arn'],\n      },\n    };\n\n    let parameters: CognitoStackOptions = {\n      ...cliInputs.cognitoConfig,\n      ...roles,\n      breakCircularDependency: FeatureFlags.getBoolean('auth.breakcirculardependency'),\n      dependsOn: [],\n    };\n\n    // determine permissions needed for each trigger module\n    if (!_.isEmpty(parameters.triggers)) {\n      parameters.triggers = JSON.stringify(parameters.triggers);\n      // convert dependsOn\n      let dependsOn;\n      if (parameters.dependsOn && !_.isEmpty(parameters.dependsOn)) {\n        dependsOn = parameters.dependsOn;\n      } else {\n        // generate dependsOn from cli-inputs\n        const dependsOnKeys = Object.keys(parameters.triggers).map((i) => `${parameters.resourceName}${i}`);\n        dependsOn = context.amplify.dependsOnBlock(context, dependsOnKeys, 'Cognito');\n      }\n      parameters = Object.assign(parameters, {\n        triggers: parameters.triggers,\n        dependsOn,\n      });\n    } else {\n      if (parameters.triggers) {\n        parameters.triggers = JSON.stringify(parameters.triggers);\n      }\n    }\n    return parameters;\n  }\n}\n"]}