{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/import/types.ts"],"names":[],"mappings":"","sourcesContent":["import { $TSAny, $TSContext, $TSObject } from '@aws-amplify/amplify-cli-core';\nimport {\n  GetUserPoolMfaConfigResponse,\n  IdentityProviderType,\n  UserPoolClientType,\n  UserPoolType,\n} from 'aws-sdk/clients/cognitoidentityserviceprovider';\nimport { CognitoIdentityProvider, IdentityPool } from 'aws-sdk/clients/cognitoidentity';\nimport { ICognitoUserPoolService, IIdentityPoolService } from '@aws-amplify/amplify-util-import';\n\nexport type AuthSelections = 'userPoolOnly' | 'identityPoolAndUserPool';\n\n// parameters.json\nexport type ResourceParameters = {\n  authSelections: AuthSelections;\n  resourceName: string;\n  serviceType: 'imported'; // string literal, not changing for import\n  region: string;\n};\n\n// Persisted into amplify-meta\nexport type BackendConfiguration = {\n  service: 'Cognito'; // string literal for this category\n  serviceType: 'imported'; // string literal, not changing for import\n  providerPlugin: string;\n  dependsOn: $TSObject[];\n  customAuth: boolean;\n};\n\n// Persisted into amplify-meta\nexport type MetaConfiguration = BackendConfiguration & {\n  output: MetaOutput;\n};\n\n// Persisted into amplify-meta\nexport type MetaOutput = {\n  UserPoolId?: string;\n  UserPoolName?: string;\n  IdentityPoolId?: string;\n  IdentityPoolName?: string;\n  AppClientID?: string;\n  AppClientIDWeb?: string;\n  AppClientSecret?: string;\n  AmazonWebClient?: string;\n  FacebookWebClient?: string;\n  GoogleWebClient?: string;\n  AppleWebClient?: string;\n  HostedUIDomain?: string;\n  OAuthMetadata?: string;\n  CreatedSNSRole?: string;\n};\n\nexport type AuthParameters = {\n  dependsOn?: $TSAny[];\n  triggers?: string;\n  identityPoolName?: string;\n  aliasAttributes?: string[];\n  usernameAttributes?: string[];\n  authProviders?: string[];\n  authProvidersUserPool?: string[];\n  requiredAttributes?: string[];\n  passwordPolicyMinLength?: number;\n  passwordPolicyCharacters?: string[];\n  mfaConfiguration?: string;\n  mfaTypes?: string[];\n  autoVerifiedAttributes?: string[];\n};\n\n// Persisted into team-provider-info\nexport type EnvSpecificResourceParameters = {\n  userPoolId: string;\n  userPoolName: string;\n  webClientId: string;\n  nativeClientId: string;\n  identityPoolId?: string;\n  identityPoolName?: string;\n  facebookAppId?: string;\n  amazonAppId?: string;\n  appleAppId?: string;\n  googleIos?: string;\n  googleAndroid?: string;\n  googleClientId?: string;\n  hostedUIProviderCreds?: string;\n  allowUnauthenticatedIdentities?: boolean;\n  authRoleArn?: string;\n  authRoleName?: string;\n  unauthRoleArn?: string;\n  unauthRoleName?: string;\n};\n\nexport type ImportAnswers = {\n  authSelections?: AuthSelections;\n  resourceName?: string;\n  userPoolId?: string;\n  userPool?: UserPoolType;\n  appClientWebId?: string; // We need this member only to have a slot for this to fill by enquirer after answer, it is reset after appClientWeb is set\n  appClientWeb?: UserPoolClientType;\n  appClientNativeId?: string; // We need this member only to have a slot for this to fill by enquirer after answer, it is reset after appClientNative is set\n  appClientNative?: UserPoolClientType;\n  oauthProviders?: string[];\n  oauthProperties?: OAuthProperties;\n  mfaConfiguration?: GetUserPoolMfaConfigResponse;\n  identityProviders?: IdentityProviderType[];\n  identityPoolId?: string;\n  identityPool?: IdentityPool;\n  authRoleArn?: string;\n  authRoleName?: string;\n  unauthRoleArn?: string;\n  unauthRoleName?: string;\n};\n\nexport type UserPoolChoice = {\n  message: string;\n  value: string;\n};\n\nexport type ImportParameters = {\n  providerName: string;\n  userPoolList: UserPoolChoice[];\n  region?: string;\n  webClients?: UserPoolClientType[];\n  nativeClients?: UserPoolClientType[];\n  validatedIdentityPools?: { identityPool: IdentityPool; providers: CognitoIdentityProvider[] }[];\n  bothAppClientsWereAutoSelected?: boolean;\n};\n\nexport type OAuthResult = {\n  isValid: boolean;\n  oauthProviders?: string[];\n  oauthProperties?: OAuthProperties;\n};\n\nexport type OAuthProperties = {\n  callbackURLs?: string[];\n  logoutURLs?: string[];\n  allowedOAuthFlows?: string[];\n  allowedOAuthScopes?: string[];\n  allowedOAuthFlowsUserPoolClient?: boolean;\n};\n\nexport type PartialOutput = {\n  UserPoolId: string;\n  UserPoolName: string;\n  AppClientID: string;\n  AppClientIDWeb: string;\n};\n\nexport interface ProviderUtils {\n  createCognitoUserPoolService(context: $TSContext): Promise<ICognitoUserPoolService>;\n  createIdentityPoolService(context: $TSContext): Promise<IIdentityPoolService>;\n  saveResourceParameters(\n    context: $TSContext,\n    category: string,\n    resourceName: string,\n    privateParams: $TSObject,\n    envSpecificParams: string[],\n  ): void;\n  loadResourceParameters(context: $TSContext, category: string, resourceName: string): Record<string, any>;\n}\n\nexport type ImportAuthHeadlessParameters = {\n  userPoolId: string;\n  webClientId: string;\n  nativeClientId: string;\n  identityPoolId?: string;\n};\n"]}