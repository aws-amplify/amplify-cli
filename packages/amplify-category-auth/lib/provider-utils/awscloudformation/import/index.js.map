{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/import/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICognitoUserPoolService, IIdentityPoolService } from '@aws-amplify/amplify-util-import';\nimport { $TSAny, $TSContext, ServiceSelection, stateManager, AmplifyError } from '@aws-amplify/amplify-cli-core';\nimport { CognitoIdentityProvider, IdentityPool } from 'aws-sdk/clients/cognitoidentity';\nimport {\n  IdentityProviderType,\n  UserPoolClientType,\n  UserPoolDescriptionType,\n  UserPoolType,\n} from 'aws-sdk/clients/cognitoidentityserviceprovider';\nimport { printer } from '@aws-amplify/amplify-prompts';\nimport { ensureEnvParamManager } from '@aws-amplify/amplify-environment-parameters';\nimport Enquirer from 'enquirer';\nimport _ from 'lodash';\nimport { v4 as uuid } from 'uuid';\nimport { coreAttributes, hostedUIProviders } from '../assets/string-maps';\nimport { ensureHeadlessParameters } from './ensure-headless-parameters';\nimport { importMessages } from './messages';\nimport {\n  AuthParameters,\n  AuthSelections,\n  BackendConfiguration,\n  EnvSpecificResourceParameters,\n  ImportAnswers,\n  ImportAuthHeadlessParameters,\n  ImportParameters,\n  MetaConfiguration,\n  MetaOutput,\n  OAuthResult,\n  ProviderUtils,\n  ResourceParameters,\n} from './types';\nimport { projectHasAuth } from '../utils/project-has-auth';\n\n// Currently the CLI only supports the output generation of these providers\nconst supportedIdentityProviders = ['COGNITO', 'Facebook', 'Google', 'LoginWithAmazon', 'SignInWithApple'];\n\n/**\n * Entry point for importing auth\n */\nexport const importResource = async (\n  context: $TSContext,\n  serviceSelection: ServiceSelection,\n  previousResourceParameters: ResourceParameters | undefined,\n  providerPluginInstance?: ProviderUtils,\n  printSuccessMessage = true,\n): Promise<{ envSpecificParameters: EnvSpecificResourceParameters } | undefined> => {\n  // Load provider\n  // eslint-disable-next-line import/no-dynamic-require, global-require\n  // eslint-disable-next-line\n  const providerPlugin = providerPluginInstance || require(serviceSelection.provider);\n  const providerUtils = providerPlugin as ProviderUtils;\n\n  const importServiceWalkthroughResult = await importServiceWalkthrough(\n    context,\n    serviceSelection.providerName,\n    providerUtils,\n    previousResourceParameters,\n  );\n\n  if (!importServiceWalkthroughResult) {\n    return undefined;\n  }\n\n  const { questionParameters, answers, projectType } = importServiceWalkthroughResult;\n\n  // If there was a previousAuthSelection then we dont want to update env params, instead return it.\n  const persistEnvParameters = !previousResourceParameters;\n\n  const { envSpecificParameters } = await updateStateFiles(context, questionParameters, answers, projectType, persistEnvParameters);\n\n  if (printSuccessMessage) {\n    printSuccess(context, answers.authSelections!, answers.userPool!, answers.identityPool);\n  }\n\n  return {\n    envSpecificParameters,\n  };\n};\n\nconst printSuccess = (context: $TSContext, authSelections: AuthSelections, userPool: UserPoolType, identityPool?: IdentityPool): void => {\n  context.print.info('');\n  if (authSelections === 'userPoolOnly') {\n    context.print.info(importMessages.UserPoolOnlySuccess(userPool.Name!));\n  } else {\n    context.print.info(importMessages.UserPoolAndIdentityPoolSuccess(userPool.Name!, identityPool!.IdentityPoolName));\n  }\n  context.print.info('');\n  context.print.info('Next steps:');\n  context.print.info('');\n  context.print.info(\"- This resource will be available for GraphQL APIs ('amplify add api')\");\n  context.print.info('- Use Amplify libraries to add sign up, sign in, and sign out capabilities to your client');\n  context.print.info('  application.');\n  context.print.info('  - iOS: https://docs.amplify.aws/lib/auth/getting-started/q/platform/ios');\n  context.print.info('  - Android: https://docs.amplify.aws/lib/auth/getting-started/q/platform/android');\n  context.print.info('  - JavaScript: https://docs.amplify.aws/lib/auth/getting-started/q/platform/js');\n};\n\nconst importServiceWalkthrough = async (\n  context: $TSContext,\n  providerName: string,\n  providerUtils: ProviderUtils,\n  previousResourceParameters: ResourceParameters | undefined,\n): Promise<{ questionParameters: ImportParameters; answers: ImportAnswers; projectType: string | undefined } | undefined> => {\n  const cognito = await providerUtils.createCognitoUserPoolService(context);\n  const identity = await providerUtils.createIdentityPoolService(context);\n  const amplifyMeta = stateManager.getMeta();\n  const { Region } = amplifyMeta.providers[providerName];\n\n  // Get list of user pools to see if there is anything to import\n  const userPoolList = await cognito.listUserPools();\n\n  // Return it no UserPools found in the project's region\n  if (_.isEmpty(userPoolList)) {\n    context.print.info(importMessages.NoUserPoolsInRegion(Region));\n    return undefined;\n  }\n\n  const questionParameters: ImportParameters = createParameters(providerName, userPoolList);\n\n  // Save the region as we need to store it in resource parameters\n  questionParameters.region = Region;\n\n  const projectConfig = context.amplify.getProjectConfig();\n  const [shortId] = uuid().split('-');\n  const projectName = projectConfig.projectName.toLowerCase().replace(/[^A-Za-z0-9_]+/g, '_');\n\n  const defaultAnswers: ImportAnswers = {\n    authSelections: previousResourceParameters?.authSelections || 'userPoolOnly',\n    resourceName: previousResourceParameters?.resourceName || `${projectName}${shortId}`,\n  };\n\n  const answers: ImportAnswers = { ...defaultAnswers };\n  let userPoolSelectionSucceeded = false; // We set this variable if app client selection goes right\n\n  const enquirer = new Enquirer<ImportAnswers>(undefined, defaultAnswers);\n\n  // If a previousAuthSelections is present we skip this question as the type cannot be changed\n  // during re-prompts as that could cause incompatibilities in the new environment.\n  if (!previousResourceParameters) {\n    const authSelectionQuestion = {\n      type: 'select',\n      name: 'authSelections',\n      message: 'What type of auth resource do you want to import?',\n      choices: [\n        { name: 'Cognito User Pool and Identity Pool', value: 'identityPoolAndUserPool' },\n        { name: 'Cognito User Pool only', value: 'userPoolOnly' },\n      ],\n      result() {\n        return (this as $TSAny).focused.value;\n      },\n      initial: 0,\n    };\n\n    // any case needed because async validation TS definition is not up to date\n    const { authSelections } = await enquirer.prompt(authSelectionQuestion as $TSAny);\n    answers.authSelections = authSelections!;\n  }\n\n  // User Pool selection\n\n  // If there is 1 user pool only, before preselecting we have to validate it.\n  if (questionParameters.userPoolList.length === 1) {\n    const validationResult = await validateUserPool(\n      cognito,\n      identity,\n      questionParameters,\n      answers,\n      questionParameters.userPoolList[0].value,\n    );\n\n    if (typeof validationResult === 'string') {\n      context.print.info(importMessages.OneUserPoolNotValid(questionParameters.userPoolList[0].value));\n      context.print.error(validationResult);\n      return undefined;\n    }\n\n    context.print.info(importMessages.OneUserPoolValid(questionParameters.userPoolList[0].value));\n\n    answers.userPoolId = questionParameters.userPoolList[0].value;\n    answers.userPool = await cognito.getUserPoolDetails(answers.userPoolId);\n  } else {\n    // If multiple pools found let the customer select one\n    const userPoolQuestion = {\n      type: 'autocomplete',\n      name: 'userPoolId',\n      message: importMessages.Questions.UserPoolSelection,\n      required: true,\n      choices: questionParameters.userPoolList,\n      limit: 5,\n      footer: importMessages.Questions.AutoCompleteFooter,\n      result() {\n        return (this as $TSAny).focused.value;\n      },\n      validate: async (value: string) => validateUserPool(cognito, identity, questionParameters, answers, value),\n    };\n\n    // any case needed because async validation TS definition is not up to date\n    const { userPoolId } = await enquirer.prompt(userPoolQuestion as $TSAny);\n    answers.userPoolId = userPoolId!;\n    answers.userPool = await cognito.getUserPoolDetails(userPoolId!);\n  }\n\n  // We have to create a loop here, to handle OAuth configuration/mis-configuration nicely.\n  // If the selected user pool has federation configured or the selected app clients are having Cognito federation enabled and\n  // customer selects to import OAuth support, then selected app client settings must be matched. If the OAuth properties\n  // are different we have to tell it to the customer and offer to select different app clients with matching properties.\n  // NOTE: We are intentionally not matching app client properties upfront.\n  let oauthLoopFinished = false;\n\n  do {\n    await selectAppClients(context, enquirer, questionParameters, answers);\n\n    let proceedWithChecks = true;\n\n    // Filter Identity Pool candidates further based on AppClient selection.\n    if (answers.authSelections === 'identityPoolAndUserPool') {\n      if (questionParameters.validatedIdentityPools && questionParameters.validatedIdentityPools!.length >= 1) {\n        // No need to check to have 1 web and 1 native since prefiltering already done that check in ValidateUserPool\n        questionParameters.validatedIdentityPools = questionParameters.validatedIdentityPools.filter((ipc) =>\n          ipc.providers.filter((p) => p.ClientId === answers.appClientWebId || p.ClientId === answers.appClientNativeId),\n        );\n      } else {\n        // There are no Identity Pool candidates print out a message and signal to skip further checks to get back into the loop.\n        // This is a fail safe check as we already filtered the Identity Pools upon User Pool selection.\n        context.print.error(importMessages.NoIdentityPoolsForSelectedAppClientsFound);\n\n        // If validation failed for some reason and both app clients were auto picked then exit the loop\n        // to not to get into an infinite one.\n        if (questionParameters.bothAppClientsWereAutoSelected) {\n          oauthLoopFinished = true;\n        } else {\n          context.print.info(importMessages.OAuth.SelectNewAppClients);\n        }\n\n        // reset values in answers\n        answers.appClientWebId = undefined;\n        answers.appClientWeb = undefined;\n        answers.appClientNativeId = undefined;\n        answers.appClientNative = undefined;\n\n        // Signal to skip further checks to get back into the loop.\n        proceedWithChecks = false;\n      }\n    }\n\n    if (!proceedWithChecks) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (_.isEmpty(answers.appClientWeb?.SupportedIdentityProviders) && _.isEmpty(answers.appClientNative?.SupportedIdentityProviders)) {\n      context.print.info(importMessages.NoOAuthConfigurationOnAppClients());\n\n      oauthLoopFinished = true;\n      userPoolSelectionSucceeded = true;\n    } else {\n      // Check OAuth config matching and enabled\n      const oauthResult = await appClientsOAuthPropertiesMatching(context, answers.appClientWeb!, answers.appClientNative!);\n\n      if (oauthResult.isValid) {\n        // Store the results in the answer\n        answers.oauthProviders = oauthResult.oauthProviders;\n        answers.oauthProperties = oauthResult.oauthProperties;\n\n        oauthLoopFinished = true;\n        userPoolSelectionSucceeded = true;\n      } else {\n        // If validation failed for some reason and both app clients were auto picked then exit the loop\n        // to not to get into an infinite one.\n        if (questionParameters.bothAppClientsWereAutoSelected) {\n          oauthLoopFinished = true;\n        } else {\n          context.print.info(importMessages.OAuth.SelectNewAppClients);\n        }\n\n        // If app clients are not matching then we show a message and asking if customer wants to select\n        // other client applications, if not, then we exit the loop and import is aborted.\n\n        // reset values in answers\n        answers.appClientWebId = undefined;\n        answers.appClientWeb = undefined;\n        answers.appClientNativeId = undefined;\n        answers.appClientNative = undefined;\n      }\n    }\n  } while (!oauthLoopFinished);\n\n  // Return if the question loop was finished without successful selections.\n  if (!userPoolSelectionSucceeded) {\n    return undefined;\n  }\n\n  // Select an Identity Pool if needed\n  if (answers.authSelections === 'identityPoolAndUserPool') {\n    if (questionParameters.validatedIdentityPools!.length === 1) {\n      const { identityPool } = questionParameters.validatedIdentityPools![0];\n\n      context.print.info(importMessages.OneIdentityPoolValid(identityPool.IdentityPoolName, identityPool.IdentityPoolId));\n\n      answers.identityPoolId = identityPool.IdentityPoolId;\n      answers.identityPool = identityPool;\n    } else {\n      const identityPoolChoices = questionParameters\n        .validatedIdentityPools!.map((ip) => ({\n          message: `${ip.identityPool!.IdentityPoolName} (${ip.identityPool.IdentityPoolId})`,\n          value: ip.identityPool!.IdentityPoolId,\n        }))\n        .sort((a, b) => a.message.localeCompare(b.message));\n\n      // If multiple Identity Pools found let the customer select one\n      const identityPoolQuestion = {\n        type: 'autocomplete',\n        name: 'identityPoolId',\n        message: importMessages.Questions.IdentityPoolSelection,\n        required: true,\n        choices: identityPoolChoices,\n        result() {\n          return (this as $TSAny).focused.value;\n        },\n        footer: importMessages.Questions.AutoCompleteFooter,\n      };\n\n      context.print.info(importMessages.MultipleIdentityPools);\n\n      // any case needed because async validation TS definition is not up to date\n      const { identityPoolId } = await enquirer.prompt(identityPoolQuestion as $TSAny);\n      answers.identityPoolId = identityPoolId!;\n      answers.identityPool = questionParameters.validatedIdentityPools\n        ?.map((ip) => ip.identityPool)\n        .find((ip) => ip.IdentityPoolId === identityPoolId);\n    }\n\n    // Get the auth and unauth roles assigned and all the required parameters from the selected Identity Pool.\n    const { authRoleArn, authRoleName, unauthRoleArn, unauthRoleName } = await identity.getIdentityPoolRoles(answers.identityPoolId!);\n\n    answers.authRoleArn = authRoleArn;\n    answers.authRoleName = authRoleName;\n    answers.unauthRoleArn = unauthRoleArn;\n    answers.unauthRoleName = unauthRoleName;\n  }\n\n  if (answers.userPool.MfaConfiguration !== 'OFF') {\n    // Use try catch in case if there is no MFA configuration for the user pool\n    try {\n      answers.mfaConfiguration = await cognito.getUserPoolMfaConfig(answers.userPoolId);\n    } catch {\n      // swallow error\n    }\n  }\n\n  if (answers.oauthProviders && answers.oauthProviders.length > 0) {\n    answers.identityProviders = await cognito.listUserPoolIdentityProviders(answers.userPoolId);\n  }\n\n  // Import questions succeeded, create the create the required CLI resource state from the answers.\n  const projectType: string = projectConfig.frontend;\n\n  return {\n    questionParameters,\n    answers,\n    projectType,\n  };\n};\n\nconst validateUserPool = async (\n  cognito: ICognitoUserPoolService,\n  identity: IIdentityPoolService,\n  parameters: ImportParameters,\n  answers: ImportAnswers,\n  userPoolId: string,\n): Promise<boolean | string> => {\n  const userPoolClients = await cognito.listUserPoolClients(userPoolId);\n  const webClients = userPoolClients.filter((c) => !c.ClientSecret);\n  const nativeClients = userPoolClients;\n\n  // Check if the selected user pool has at least 1 web app client configured.\n  if (webClients?.length < 1) {\n    return importMessages.NoAtLeastOneAppClient('Web');\n  }\n\n  // If authSelections involves the selection of an Identity Pool as well then we have to look for an\n  // IdentityPool that has the selected UserPool configured. This is an upfront validation for better DX\n  // We can't validate until fully until AppClients are selected later.\n  if (answers.authSelections === 'identityPoolAndUserPool') {\n    const identityPools = await identity.listIdentityPoolDetails();\n\n    const identityPoolCandidates = identityPools\n      .filter(\n        (ip) => ip.CognitoIdentityProviders && ip.CognitoIdentityProviders!.filter((a) => a.ProviderName?.endsWith(userPoolId)).length > 0,\n      )\n      .map((ip) => ({\n        identityPool: ip,\n        providers: ip.CognitoIdentityProviders!.filter((a) => a.ProviderName?.endsWith(userPoolId)),\n      }));\n\n    const validatedIdentityPools: { identityPool: IdentityPool; providers: CognitoIdentityProvider[] }[] = [];\n\n    for (const candidate of identityPoolCandidates) {\n      const hasWebClientProvider =\n        candidate.providers.filter((p) => p.ClientId && webClients.map((c) => c.ClientId).includes(p.ClientId!)).length > 0;\n      const hasNativeClientProvider =\n        candidate.providers.filter((p) => p.ClientId && nativeClients.map((c) => c.ClientId).includes(p.ClientId!)).length > 0;\n\n      if (hasWebClientProvider && hasNativeClientProvider) {\n        validatedIdentityPools.push(candidate);\n      }\n    }\n\n    if (validatedIdentityPools.length === 0) {\n      return importMessages.NoIdentityPoolsFoundWithSelectedUserPool;\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    parameters.validatedIdentityPools = validatedIdentityPools;\n  }\n\n  // Save into parameters, further questions are using it\n  if (parameters.webClients?.length === 0) {\n    parameters.webClients!.push(...(webClients || []));\n  }\n  if (parameters.nativeClients?.length === 0) {\n    parameters.nativeClients!.push(...(nativeClients || []));\n  }\n\n  return true;\n};\n\nconst selectAppClients = async (\n  context: $TSContext,\n  enquirer: Enquirer<ImportAnswers>,\n  questionParameters: ImportParameters,\n  answers: ImportAnswers,\n): Promise<void> => {\n  let autoSelected = 0;\n  let changeAppClientSelection = false;\n  do {\n    // Select web application clients\n    if (questionParameters.webClients!.length === 1) {\n      // eslint-disable-next-line prefer-destructuring, no-param-reassign\n      answers.appClientWeb = questionParameters.webClients![0];\n\n      context.print.info(importMessages.SingleAppClientSelected('Web', answers.appClientWeb.ClientName!));\n\n      autoSelected++;\n    } else {\n      const appClientChoices = questionParameters\n        .webClients!.map((c) => ({\n          message: `${c.ClientName!} (${c.ClientId})`,\n          value: c.ClientId,\n        }))\n        .sort((a, b) => a.message.localeCompare(b.message));\n\n      const appClientSelectQuestion = {\n        type: 'autocomplete',\n        name: 'appClientWebId',\n        message: importMessages.Questions.SelectAppClient('Web'),\n        required: true,\n        choices: appClientChoices,\n        limit: 5,\n        footer: importMessages.Questions.AutoCompleteFooter,\n      };\n\n      context.print.info(importMessages.MultipleAppClients('Web'));\n\n      const { appClientWebId } = await enquirer.prompt(appClientSelectQuestion);\n      // eslint-disable-next-line no-param-reassign\n      answers.appClientWeb = questionParameters.webClients!.find((c) => c.ClientId! === appClientWebId);\n      // eslint-disable-next-line no-param-reassign\n      answers.appClientWebId = undefined; // Only to be used by enquirer\n    }\n\n    // Select Native application client\n    if (questionParameters.nativeClients!.length === 1) {\n      // eslint-disable-next-line prefer-destructuring, no-param-reassign\n      answers.appClientNative = questionParameters.nativeClients![0];\n\n      context.print.info(importMessages.SingleAppClientSelected('Native', answers.appClientNative.ClientName!));\n      context.print.warning(importMessages.WarnAppClientReuse);\n      autoSelected++;\n    } else {\n      const appClientChoices = questionParameters\n        .nativeClients!.map((c) => ({\n          message: `${c.ClientName!} (${c.ClientId}) ${c.ClientSecret ? '(has app client secret)' : ''}`,\n          value: c.ClientId,\n        }))\n        .sort((a, b) => a.message.localeCompare(b.message));\n\n      const appClientSelectQuestion = {\n        type: 'autocomplete',\n        name: 'appClientNativeId',\n        message: importMessages.Questions.SelectAppClient('Native'),\n        required: true,\n        choices: appClientChoices,\n        limit: 5,\n        footer: importMessages.Questions.AutoCompleteFooter,\n      };\n\n      context.print.info(importMessages.MultipleAppClients('Native'));\n\n      const { appClientNativeId } = await enquirer.prompt(appClientSelectQuestion);\n      // eslint-disable-next-line no-param-reassign\n      answers.appClientNative = questionParameters.nativeClients!.find((c) => c.ClientId! === appClientNativeId);\n      // eslint-disable-next-line no-param-reassign\n      answers.appClientNativeId = undefined; // Only to be used by enquirer\n\n      changeAppClientSelection =\n        answers.appClientNative === answers.appClientWeb\n          ? await context.prompt.confirm(importMessages.ConfirmUseDifferentAppClient)\n          : false;\n    }\n    // eslint-disable-next-line no-param-reassign\n    questionParameters.bothAppClientsWereAutoSelected = autoSelected === 2;\n  } while (changeAppClientSelection);\n};\n\nconst appClientsOAuthPropertiesMatching = async (\n  context: $TSContext,\n  appClientWeb: UserPoolClientType,\n  appClientNative: UserPoolClientType,\n  printErrors = true,\n): Promise<OAuthResult> => {\n  // Here both clients having some federation configured, compare the OAuth specific properties,\n  // since we can only import app clients with completely matching configuration, due\n  // to how CLI and Client SDKs working now.\n\n  // Compare the app client properties, they must match, otherwise show what is not matching.\n  // For convenience we show all the properties that are not matching,\n  // not just the first mismatch.\n  const callbackUrlMatching = isArraysEqual(appClientWeb.CallbackURLs!, appClientNative.CallbackURLs!);\n  const logoutUrlsMatching = isArraysEqual(appClientWeb.LogoutURLs!, appClientNative.LogoutURLs!);\n  const allowedOAuthFlowsMatching = isArraysEqual(appClientWeb.AllowedOAuthFlows!, appClientNative.AllowedOAuthFlows!);\n  const allowedOAuthScopesMatching = isArraysEqual(appClientWeb.AllowedOAuthScopes!, appClientNative.AllowedOAuthScopes!);\n  const allowedOAuthFlowsUserPoolClientMatching =\n    appClientWeb.AllowedOAuthFlowsUserPoolClient === appClientNative.AllowedOAuthFlowsUserPoolClient;\n  const supportedIdentityProvidersMatching = isArraysEqual(\n    appClientWeb.SupportedIdentityProviders!,\n    appClientNative.SupportedIdentityProviders!,\n  );\n  const propertiesMatching =\n    supportedIdentityProvidersMatching &&\n    callbackUrlMatching &&\n    logoutUrlsMatching &&\n    allowedOAuthFlowsMatching &&\n    allowedOAuthScopesMatching &&\n    allowedOAuthFlowsUserPoolClientMatching;\n\n  // If we are in silent mode, just return without showing errors and differences\n  if (!propertiesMatching && !printErrors) {\n    return {\n      isValid: false,\n    };\n  }\n\n  if (!propertiesMatching) {\n    context.print.error(importMessages.OAuth.SomePropertiesAreNotMatching);\n    context.print.info('');\n\n    if (!supportedIdentityProvidersMatching) {\n      showValidationTable(\n        context,\n        importMessages.OAuth.ConfiguredIdentityProviders,\n        appClientWeb,\n        appClientNative,\n        appClientWeb.SupportedIdentityProviders,\n        appClientNative.SupportedIdentityProviders,\n      );\n    }\n\n    if (!allowedOAuthFlowsUserPoolClientMatching) {\n      showValidationTable(\n        context,\n        importMessages.OAuth.OAuthFlowEnabledForApplicationClient,\n        appClientWeb,\n        appClientNative,\n        [appClientWeb.AllowedOAuthFlowsUserPoolClient?.toString() || ''],\n        [appClientNative.AllowedOAuthFlowsUserPoolClient?.toString() || ''],\n      );\n    }\n\n    if (!callbackUrlMatching) {\n      showValidationTable(\n        context,\n        importMessages.OAuth.CallbackURLs,\n        appClientWeb,\n        appClientNative,\n        appClientWeb.CallbackURLs,\n        appClientNative.CallbackURLs,\n      );\n    }\n\n    if (!logoutUrlsMatching) {\n      showValidationTable(\n        context,\n        importMessages.OAuth.LogoutURLs,\n        appClientWeb,\n        appClientNative,\n        appClientWeb.LogoutURLs,\n        appClientNative.LogoutURLs,\n      );\n    }\n\n    if (!allowedOAuthFlowsMatching) {\n      showValidationTable(\n        context,\n        importMessages.OAuth.AllowedOAuthFlows,\n        appClientWeb,\n        appClientNative,\n        appClientWeb.AllowedOAuthFlows,\n        appClientNative.AllowedOAuthFlows,\n      );\n    }\n\n    if (!allowedOAuthScopesMatching) {\n      showValidationTable(\n        context,\n        importMessages.OAuth.AllowedOAuthScopes,\n        appClientWeb,\n        appClientNative,\n        appClientWeb.AllowedOAuthScopes,\n        appClientNative.AllowedOAuthScopes,\n      );\n    }\n\n    return {\n      isValid: false,\n    };\n  }\n\n  // Don't return any OAuth properties if no OAuth providers were selected\n  if (!appClientWeb.SupportedIdentityProviders || appClientWeb.SupportedIdentityProviders.length === 0) {\n    return {\n      isValid: true,\n    };\n  }\n\n  const filteredProviders = appClientWeb.SupportedIdentityProviders!.filter((p) => supportedIdentityProviders.includes(p));\n\n  return {\n    isValid: true,\n    oauthProviders: filteredProviders || [],\n    oauthProperties: {\n      callbackURLs: appClientWeb.CallbackURLs,\n      logoutURLs: appClientWeb.LogoutURLs,\n      allowedOAuthFlows: appClientWeb.AllowedOAuthFlows,\n      allowedOAuthScopes: appClientWeb.AllowedOAuthScopes,\n      allowedOAuthFlowsUserPoolClient: appClientWeb.AllowedOAuthFlowsUserPoolClient,\n    },\n  };\n};\n\nconst showValidationTable = (\n  context: $TSContext,\n  title: string,\n  appClientWeb: UserPoolClientType,\n  appClientNative: UserPoolClientType,\n  webValues: string[] | undefined,\n  nativeValues: string[] | undefined,\n): void => {\n  const tableOptions = [[appClientWeb.ClientName!, appClientNative.ClientName!]];\n  const webNames = [...(webValues || [])].sort();\n  const nativeNames = [...(nativeValues || [])].sort();\n  const rowsDiff = Math.abs(webNames.length - nativeNames.length);\n\n  if (webNames.length < nativeNames.length) {\n    webNames.push(..._.times(rowsDiff, () => ''));\n  } else if (webNames.length > nativeNames.length) {\n    nativeNames.push(..._.times(rowsDiff, () => ''));\n  }\n\n  // At this point both arrays are the same size\n  for (let i = 0; i < webNames.length; i++) {\n    tableOptions.push([webNames[i], nativeNames[i]]);\n  }\n\n  context.print.info(title);\n  context.print.info('');\n  context.print.table(tableOptions, { format: 'markdown' });\n  context.print.info('');\n};\n\nconst isArraysEqual = (left: string[], right: string[]): boolean => {\n  const sortedLeft = [...(left || [])].sort();\n  const sortedRight = [...(right || [])].sort();\n\n  return _.isEqual(sortedLeft, sortedRight);\n};\n\nconst updateStateFiles = async (\n  context: $TSContext,\n  questionParameters: ImportParameters,\n  answers: ImportAnswers,\n  projectType: string | undefined,\n  updateEnvSpecificParameters: boolean,\n): Promise<{\n  backendConfiguration: BackendConfiguration;\n  resourceParameters: ResourceParameters;\n  metaConfiguration: MetaConfiguration;\n  envSpecificParameters: EnvSpecificResourceParameters;\n}> => {\n  const backendConfiguration: BackendConfiguration = {\n    service: 'Cognito',\n    serviceType: 'imported',\n    providerPlugin: questionParameters.providerName,\n    dependsOn: [],\n    customAuth: isCustomAuthConfigured(answers.userPool!),\n  };\n\n  const hasOAuthConfig =\n    !!answers.oauthProviders &&\n    answers.oauthProviders.length > 0 &&\n    !!answers.oauthProperties &&\n    !!answers.oauthProperties.allowedOAuthFlows &&\n    answers.oauthProperties.allowedOAuthFlows.length > 0 &&\n    !!answers.oauthProperties.allowedOAuthScopes &&\n    answers.oauthProperties.allowedOAuthScopes.length > 0 &&\n    !!answers.oauthProperties.callbackURLs &&\n    answers.oauthProperties.callbackURLs.length > 0 &&\n    !!answers.oauthProperties.logoutURLs &&\n    answers.oauthProperties.logoutURLs.length > 0;\n\n  // Create and persist parameters\n  const resourceParameters: ResourceParameters = {\n    authSelections: answers.authSelections!,\n    resourceName: answers.resourceName!,\n    serviceType: 'imported',\n    region: questionParameters.region!,\n  };\n\n  const authResourceParameters: AuthParameters = {\n    aliasAttributes: answers.userPool?.AliasAttributes,\n    usernameAttributes: answers.userPool?.UsernameAttributes,\n    authProvidersUserPool: answers.oauthProviders?.filter((provider) => !!hostedUIProviders.find((it) => it.value === provider)),\n    requiredAttributes: (answers.userPool?.SchemaAttributes ?? [])\n      .filter((att) => att.Required && !!coreAttributes.find((it) => it.value === att.Name))\n      .map((att) => att.Name!),\n    passwordPolicyMinLength: answers.userPool?.Policies?.PasswordPolicy?.MinimumLength ?? 8,\n    passwordPolicyCharacters: [\n      ...(answers.userPool?.Policies?.PasswordPolicy?.RequireLowercase ? ['Requires Lowercase'] : []),\n      ...(answers.userPool?.Policies?.PasswordPolicy?.RequireUppercase ? ['Requires Uppercase'] : []),\n      ...(answers.userPool?.Policies?.PasswordPolicy?.RequireNumbers ? ['Requires Numbers'] : []),\n      ...(answers.userPool?.Policies?.PasswordPolicy?.RequireSymbols ? ['Requires Symbols'] : []),\n    ],\n    mfaConfiguration: answers.userPool?.MfaConfiguration,\n    autoVerifiedAttributes: answers.userPool?.AutoVerifiedAttributes,\n    mfaTypes: [\n      ...(answers.mfaConfiguration?.SmsMfaConfiguration ? ['SMS Text Message'] : []),\n      ...(answers.mfaConfiguration?.SoftwareTokenMfaConfiguration ? ['TOTP'] : []),\n    ],\n  };\n\n  stateManager.setResourceParametersJson(undefined, 'auth', answers.resourceName!, { ...resourceParameters, ...authResourceParameters });\n\n  // Add resource data to amplify-meta file and backend-config, since backend-config requires less information\n  // we have to do a separate update to it without duplicating the methods\n  const metaConfiguration = _.clone(backendConfiguration) as MetaConfiguration;\n  metaConfiguration.output = createMetaOutput(answers, hasOAuthConfig);\n\n  context.amplify.updateamplifyMetaAfterResourceAdd('auth', answers.resourceName!, metaConfiguration, backendConfiguration, true);\n\n  // Update team provider-info\n  const envSpecificParameters: EnvSpecificResourceParameters = createEnvSpecificResourceParameters(answers, hasOAuthConfig, projectType);\n\n  if (updateEnvSpecificParameters) {\n    context.amplify.saveEnvResourceParameters(context, 'auth', answers.resourceName!, envSpecificParameters);\n  }\n\n  return {\n    backendConfiguration,\n    resourceParameters,\n    metaConfiguration,\n    envSpecificParameters,\n  };\n};\n\nconst createMetaOutput = (answers: ImportAnswers, hasOAuthConfig: boolean): MetaOutput => {\n  const userPool = answers.userPool!;\n\n  const output: MetaOutput = {\n    UserPoolId: userPool.Id!,\n    UserPoolName: userPool.Name!,\n    AppClientID: answers.appClientNative!.ClientId,\n    ...(answers.appClientNative!.ClientSecret ? { AppClientSecret: answers.appClientNative!.ClientSecret } : {}),\n    AppClientIDWeb: answers.appClientWeb!.ClientId,\n    HostedUIDomain: userPool.Domain,\n  };\n\n  if (answers.authSelections === 'identityPoolAndUserPool') {\n    output.IdentityPoolId = answers.identityPoolId!;\n    output.IdentityPoolName = answers.identityPool?.IdentityPoolName;\n\n    if (answers.identityPool!.SupportedLoginProviders) {\n      for (const key of Object.keys(answers.identityPool!.SupportedLoginProviders || {})) {\n        switch (key) {\n          case 'www.amazon.com':\n            output.AmazonWebClient = answers.identityPool!.SupportedLoginProviders![key];\n            break;\n          case 'graph.facebook.com':\n            output.FacebookWebClient = answers.identityPool!.SupportedLoginProviders![key];\n            break;\n          case 'accounts.google.com':\n            output.GoogleWebClient = answers.identityPool!.SupportedLoginProviders![key];\n            break;\n          // eslint-disable-next-line spellcheck/spell-checker\n          case 'appleid.apple.com':\n            output.AppleWebClient = answers.identityPool!.SupportedLoginProviders![key];\n            break;\n          default:\n            // We don't do anything with the providers that the CLI currently does not support.\n            break;\n        }\n      }\n    }\n  }\n\n  // SNS Role if there is SMS configuration on the user pool, use the separate MFA configuration object\n  // not the one on the userPool itself\n  if (userPool.MfaConfiguration !== 'OFF' && answers.mfaConfiguration?.SmsMfaConfiguration?.SmsConfiguration) {\n    output.CreatedSNSRole = answers.mfaConfiguration.SmsMfaConfiguration.SmsConfiguration?.SnsCallerArn;\n  }\n\n  // Create OAuth configuration only if there are selected providers to import\n  if (hasOAuthConfig) {\n    const oauthMetadata = {\n      AllowedOAuthFlows: answers.oauthProperties!.allowedOAuthFlows,\n      AllowedOAuthScopes: answers.oauthProperties!.allowedOAuthScopes,\n      CallbackURLs: answers.oauthProperties!.callbackURLs,\n      LogoutURLs: answers.oauthProperties!.logoutURLs,\n    };\n\n    output.OAuthMetadata = JSON.stringify(oauthMetadata);\n  }\n\n  return output;\n};\n\nconst createEnvSpecificResourceParameters = (\n  answers: ImportAnswers,\n  hasOAuthConfig: boolean,\n  projectType: string | undefined,\n): EnvSpecificResourceParameters => {\n  const userPool = answers.userPool!;\n\n  const envSpecificResourceParameters: EnvSpecificResourceParameters = {\n    userPoolId: userPool.Id!,\n    userPoolName: userPool.Name!,\n    webClientId: answers.appClientWeb!.ClientId!,\n    nativeClientId: answers.appClientNative!.ClientId!,\n    identityPoolId: answers.identityPoolId,\n    identityPoolName: answers.identityPool?.IdentityPoolName,\n    allowUnauthenticatedIdentities: answers.identityPool?.AllowUnauthenticatedIdentities,\n    authRoleArn: answers.authRoleArn,\n    authRoleName: answers.authRoleName,\n    unauthRoleArn: answers.unauthRoleArn,\n    unauthRoleName: answers.unauthRoleName,\n  };\n\n  if (hasOAuthConfig) {\n    envSpecificResourceParameters.hostedUIProviderCreds = createOAuthCredentials(answers.identityProviders!);\n  }\n\n  if (answers.authSelections === 'identityPoolAndUserPool' && answers.identityPool!.SupportedLoginProviders) {\n    for (const key of Object.keys(answers.identityPool!.SupportedLoginProviders || {})) {\n      switch (key) {\n        case 'www.amazon.com':\n          envSpecificResourceParameters.amazonAppId = answers.identityPool!.SupportedLoginProviders![key];\n          break;\n        case 'graph.facebook.com':\n          envSpecificResourceParameters.facebookAppId = answers.identityPool!.SupportedLoginProviders![key];\n          break;\n        // eslint-disable-next-line spellcheck/spell-checker\n        case 'appleid.apple.com':\n          envSpecificResourceParameters.appleAppId = answers.identityPool!.SupportedLoginProviders![key];\n          break;\n        case 'accounts.google.com': {\n          switch (projectType) {\n            case 'javascript':\n              envSpecificResourceParameters.googleClientId = answers.identityPool!.SupportedLoginProviders![key];\n              break;\n            case 'ios':\n              envSpecificResourceParameters.googleIos = answers.identityPool!.SupportedLoginProviders![key];\n              break;\n            case 'android':\n              envSpecificResourceParameters.googleAndroid = answers.identityPool!.SupportedLoginProviders![key];\n              break;\n            default:\n              throw new Error(`Unknown project type ${projectType}`);\n          }\n          break;\n        }\n        default:\n          // We don't do anything with the providers that the CLI currently does not support.\n          break;\n      }\n    }\n  }\n\n  return envSpecificResourceParameters;\n};\n\nconst createOAuthCredentials = (identityProviders: IdentityProviderType[]): string => {\n  const credentials = identityProviders.map((idp) => {\n    if (idp.ProviderName === 'SignInWithApple') {\n      return {\n        ProviderName: idp.ProviderName!,\n        client_id: idp.ProviderDetails!.client_id,\n        team_id: idp.ProviderDetails!.team_id,\n        key_id: idp.ProviderDetails!.key_id,\n        private_key: idp.ProviderDetails!.private_key,\n      };\n    }\n    return {\n      ProviderName: idp.ProviderName!,\n      client_id: idp.ProviderDetails!.client_id,\n      client_secret: idp.ProviderDetails!.client_secret,\n    };\n  });\n\n  return JSON.stringify(credentials);\n};\n\nconst createParameters = (providerName: string, userPoolList: UserPoolDescriptionType[]): ImportParameters => {\n  const questionParameters: ImportParameters = {\n    providerName,\n    userPoolList: userPoolList\n      .map((up) => ({\n        message: `${up.Name} (${up.Id})`,\n        value: up.Id!,\n      }))\n      .sort((a, b) => a.message.localeCompare(b.message)),\n    webClients: [],\n    nativeClients: [],\n  };\n\n  return questionParameters;\n};\n\nconst isCustomAuthConfigured = (userPool: UserPoolType): boolean => {\n  const customAuthConfigured =\n    !!userPool &&\n    !!userPool.LambdaConfig &&\n    !!userPool.LambdaConfig.DefineAuthChallenge &&\n    userPool.LambdaConfig.DefineAuthChallenge.length > 0 &&\n    !!userPool.LambdaConfig.CreateAuthChallenge &&\n    userPool.LambdaConfig.CreateAuthChallenge.length > 0 &&\n    !!userPool.LambdaConfig.VerifyAuthChallengeResponse &&\n    userPool.LambdaConfig.VerifyAuthChallengeResponse.length > 0;\n\n  return customAuthConfigured;\n};\n\n/**\n * Initialize new environment with imported auth\n */\nexport const importedAuthEnvInit = async (\n  context: $TSContext,\n  resourceName: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  resource: MetaConfiguration,\n  resourceParameters: ResourceParameters,\n  providerName: string,\n  providerUtils: ProviderUtils,\n  currentEnvSpecificParameters: EnvSpecificResourceParameters,\n  isInHeadlessMode: boolean,\n  headlessParams: ImportAuthHeadlessParameters,\n): Promise<{\n  doServiceWalkthrough?: boolean;\n  succeeded?: boolean;\n  resourceCleanupRequired?: boolean;\n  envSpecificParameters?: EnvSpecificResourceParameters;\n}> => {\n  const cognito = await providerUtils.createCognitoUserPoolService(context);\n  const identity = await providerUtils.createIdentityPoolService(context);\n  const amplifyMeta = stateManager.getMeta();\n  const { Region } = amplifyMeta.providers[providerName];\n  const projectConfig = context.amplify.getProjectConfig();\n  const isPulling = context.input.command === 'pull' || (context.input.command === 'env' && context.input.subCommands?.[0] === 'pull');\n  const isEnvAdd = context.input.command === 'env' && context.input.subCommands?.[0] === 'add';\n\n  if (isInHeadlessMode) {\n    // Validate required parameters' presence and merge into parameters\n    return headlessImport(\n      context,\n      cognito,\n      identity,\n      providerName,\n      resourceName,\n      resourceParameters,\n      headlessParams,\n      currentEnvSpecificParameters,\n    );\n  }\n\n  // If region mismatch, signal prompt for new arguments, only in interactive mode, headless does not matter\n  if (resourceParameters.region !== Region) {\n    context.print.warning(importMessages.NewEnvDifferentRegion(resourceName, resourceParameters.region, Region));\n\n    return {\n      doServiceWalkthrough: true,\n    };\n  }\n\n  // If we are pulling, take the current values if present to skip unneeded service walkthrough\n  if (isPulling) {\n    const currentMeta = stateManager.getCurrentMeta(undefined, {\n      throwIfNotExist: false,\n    });\n\n    if (currentMeta) {\n      const currentResource = _.get(currentMeta, ['auth', resourceName], undefined);\n\n      if (currentResource && currentResource.output) {\n        const { UserPoolId, AppClientIDWeb, AppClientID, IdentityPoolId } = currentResource.output;\n\n        /* eslint-disable no-param-reassign */\n        currentEnvSpecificParameters.userPoolId = UserPoolId;\n        currentEnvSpecificParameters.webClientId = AppClientIDWeb;\n        currentEnvSpecificParameters.nativeClientId = AppClientID;\n\n        if (resourceParameters.authSelections === 'identityPoolAndUserPool') {\n          currentEnvSpecificParameters.identityPoolId = IdentityPoolId;\n        }\n        /* eslint-enable */\n      }\n    }\n  } else if (isEnvAdd && context.exeInfo.sourceEnvName) {\n    // Check to see if we have a source environment set (in case of env add), and ask customer if the want to import the same resource\n    // from the existing environment or import a different one. Check if all the values are having some value that can be validated and\n    // if not fall back to full service walkthrough.\n    const resourceParamManager = (await ensureEnvParamManager(context.exeInfo.sourceEnvName)).instance.getResourceParamManager(\n      'auth',\n      resourceName,\n    );\n\n    if (resourceParamManager.hasAnyParams()) {\n      const { importExisting } = await Enquirer.prompt<{ importExisting: boolean }>({\n        name: 'importExisting',\n        type: 'confirm',\n        message: importMessages.Questions.ImportPreviousResource(\n          resourceName,\n          resourceParamManager.getParam(AuthParam.USER_POOL_ID)!,\n          context.exeInfo.sourceEnvName,\n        ),\n        footer: importMessages.ImportPreviousResourceFooter,\n        initial: true,\n        format: (e: $TSAny) => (e ? 'Yes' : 'No'),\n      } as $TSAny);\n\n      if (!importExisting) {\n        return {\n          doServiceWalkthrough: true,\n        };\n      }\n\n      // Copy over the required input arguments to currentEnvSpecificParameters\n      /* eslint-disable no-param-reassign */\n      currentEnvSpecificParameters.userPoolId = resourceParamManager.getParam(AuthParam.USER_POOL_ID)!;\n      currentEnvSpecificParameters.webClientId = resourceParamManager.getParam(AuthParam.WEB_CLIENT_ID)!;\n      currentEnvSpecificParameters.nativeClientId = resourceParamManager.getParam(AuthParam.NATIVE_CLIENT_ID)!;\n\n      if (resourceParameters.authSelections === 'identityPoolAndUserPool') {\n        currentEnvSpecificParameters.identityPoolId = resourceParamManager.getParam(AuthParam.IDENTITY_POOL_ID);\n      }\n      /* eslint-enable */\n    }\n  }\n\n  // If there are no current parameters a service walkthrough is required, it can happen when pulling to an empty directory.\n  if (\n    !(\n      currentEnvSpecificParameters.userPoolId &&\n      currentEnvSpecificParameters.webClientId &&\n      currentEnvSpecificParameters.nativeClientId &&\n      (resourceParameters.authSelections === 'userPoolOnly' ||\n        (resourceParameters.authSelections === 'identityPoolAndUserPool' && currentEnvSpecificParameters.identityPoolId))\n    )\n  ) {\n    context.print.info(importMessages.ImportNewResourceRequired(resourceName));\n\n    return {\n      doServiceWalkthrough: true,\n    };\n  }\n\n  // Validate the parameters, generate the missing ones and import the resource.\n  const questionParameters: ImportParameters = {\n    providerName,\n    userPoolList: [],\n    webClients: [],\n    nativeClients: [],\n    region: Region,\n  };\n\n  const answers: ImportAnswers = {\n    authSelections: resourceParameters.authSelections,\n    resourceName: resourceParameters.resourceName,\n    userPoolId: currentEnvSpecificParameters.userPoolId,\n  };\n\n  try {\n    answers.userPool = await cognito.getUserPoolDetails(currentEnvSpecificParameters.userPoolId);\n  } catch (error) {\n    if (error.name === 'ResourceNotFoundException') {\n      if (projectHasAuth()) {\n        printer.warn(importMessages.UserPoolNotFound(currentEnvSpecificParameters.userPoolName, currentEnvSpecificParameters.userPoolId));\n        printer.warn(`Unlink userPool: ${currentEnvSpecificParameters.userPoolName} using 'amplify remove auth'`);\n        return {\n          succeeded: true,\n          resourceCleanupRequired: true,\n        };\n      } else {\n        throw new AmplifyError('AuthImportError', {\n          message: importMessages.UserPoolNotFound(currentEnvSpecificParameters.userPoolName, currentEnvSpecificParameters.userPoolId),\n        });\n      }\n    }\n  }\n\n  const validationResult = await validateUserPool(cognito, identity, questionParameters, answers, currentEnvSpecificParameters.userPoolId);\n\n  if (typeof validationResult === 'string') {\n    context.print.info(\n      importMessages.UserPoolValidation(currentEnvSpecificParameters.userPoolName, currentEnvSpecificParameters.userPoolId),\n    );\n    context.print.error(validationResult);\n\n    return {\n      succeeded: false,\n    };\n  }\n\n  // Get app clients based on passed in previous values\n  answers.appClientWeb = questionParameters.webClients!.find((c) => c.ClientId! === currentEnvSpecificParameters.webClientId);\n\n  if (!answers.appClientWeb) {\n    context.print.error(importMessages.AppClientNotFound('Web', currentEnvSpecificParameters.webClientId));\n\n    return {\n      succeeded: false,\n    };\n  }\n\n  answers.appClientNative = questionParameters.nativeClients!.find((c) => c.ClientId! === currentEnvSpecificParameters.nativeClientId);\n\n  if (!answers.appClientNative) {\n    context.print.error(importMessages.AppClientNotFound('Native', currentEnvSpecificParameters.nativeClientId));\n\n    return {\n      succeeded: false,\n    };\n  }\n\n  // Check OAuth config matching and enabled\n  const oauthResult = await appClientsOAuthPropertiesMatching(context, answers.appClientWeb!, answers.appClientNative!);\n\n  if (!oauthResult.isValid) {\n    return {\n      succeeded: false,\n    };\n  }\n\n  // Store the results in the answer\n  answers.oauthProviders = oauthResult.oauthProviders;\n  answers.oauthProperties = oauthResult.oauthProperties;\n\n  if (answers.oauthProviders && answers.oauthProviders.length > 0) {\n    answers.identityProviders = await cognito.listUserPoolIdentityProviders(answers.userPoolId!);\n  }\n\n  if (resourceParameters.authSelections === 'identityPoolAndUserPool') {\n    const identityPools = questionParameters.validatedIdentityPools!.filter(\n      (idp) => idp.identityPool.IdentityPoolId === currentEnvSpecificParameters.identityPoolId,\n    );\n\n    if (identityPools.length !== 1) {\n      context.print.info(\n        importMessages.IdentityPoolNotFound(currentEnvSpecificParameters.identityPoolName!, currentEnvSpecificParameters.identityPoolId!),\n      );\n\n      return {\n        succeeded: false,\n      };\n    }\n\n    answers.identityPoolId = identityPools[0].identityPool.IdentityPoolId;\n    answers.identityPool = identityPools[0].identityPool;\n    answers.identityProviders = identityPools[0].providers;\n\n    // Get the auth and unauth roles assigned and all the required parameters from the selected Identity Pool.\n    const { authRoleArn, authRoleName, unauthRoleArn, unauthRoleName } = await identity.getIdentityPoolRoles(answers.identityPoolId!);\n\n    answers.authRoleArn = authRoleArn;\n    answers.authRoleName = authRoleName;\n    answers.unauthRoleArn = unauthRoleArn;\n    answers.unauthRoleName = unauthRoleName;\n  }\n\n  if (answers.userPool?.MfaConfiguration !== 'OFF') {\n    // Use try catch in case if there is no MFA configuration for the user pool\n    try {\n      answers.mfaConfiguration = await cognito.getUserPoolMfaConfig(answers.userPoolId!);\n    } catch {\n      // swallow error\n    }\n  }\n\n  if (answers.oauthProviders && answers.oauthProviders.length > 0) {\n    answers.identityProviders = await cognito.listUserPoolIdentityProviders(answers.userPoolId!);\n  }\n\n  // Import questions succeeded, create the create the required CLI resource state from the answers.\n  const projectType: string = projectConfig.frontend;\n\n  const newState = await updateStateFiles(context, questionParameters, answers, projectType, false);\n\n  return {\n    succeeded: true,\n    envSpecificParameters: newState.envSpecificParameters,\n  };\n};\n\n/**\n * Entry point for headless import auth\n */\nexport const headlessImport = async (\n  context: $TSContext,\n  cognito: ICognitoUserPoolService,\n  identity: IIdentityPoolService,\n  providerName: string,\n  resourceName: string,\n  resourceParameters: ResourceParameters,\n  headlessParams: ImportAuthHeadlessParameters,\n  currentEnvSpecificParameters: EnvSpecificResourceParameters,\n): Promise<{ succeeded: boolean; resourceCleanupRequired?: boolean; envSpecificParameters?: EnvSpecificResourceParameters }> => {\n  // Validate required parameters' presence and merge into parameters\n  const resolvedEnvParams =\n    headlessParams.userPoolId || headlessParams.webClientId || headlessParams.nativeClientId || headlessParams.identityPoolId\n      ? ensureHeadlessParameters(resourceParameters, headlessParams)\n      : currentEnvSpecificParameters;\n\n  const amplifyMeta = stateManager.getMeta();\n  const { Region } = amplifyMeta.providers[providerName];\n  const projectConfig = context.amplify.getProjectConfig();\n\n  // If region mismatch, signal prompt for new arguments, only in interactive mode, headless does not matter\n  if (resourceParameters.region && resourceParameters.region !== Region) {\n    throw new AmplifyError('AuthImportError', {\n      message: importMessages.NewEnvDifferentRegion(resourceName, resourceParameters.region, Region),\n    });\n  }\n\n  // Validate the parameters, generate the missing ones and import the resource.\n  const questionParameters: ImportParameters = {\n    providerName,\n    userPoolList: [],\n    webClients: [],\n    nativeClients: [],\n    region: Region,\n  };\n\n  const answers: ImportAnswers = {\n    authSelections: resourceParameters.authSelections,\n    resourceName: resourceParameters.resourceName,\n    userPoolId: resolvedEnvParams.userPoolId,\n  };\n\n  try {\n    answers.userPool = await cognito.getUserPoolDetails(resolvedEnvParams.userPoolId);\n  } catch (error) {\n    if (error.name === 'ResourceNotFoundException') {\n      if (projectHasAuth()) {\n        // returning silently in headless calls\n        printer.debug(`The previously configured Cognito User Pool: ${resolvedEnvParams.userPoolId} cannot be found.`);\n        return {\n          succeeded: true,\n          resourceCleanupRequired: true,\n        };\n      }\n      throw new AmplifyError('AuthImportError', {\n        message: importMessages.UserPoolNotFound(resolvedEnvParams.userPoolName, resolvedEnvParams.userPoolId),\n      });\n    }\n\n    throw error;\n  }\n\n  const validationResult = await validateUserPool(cognito, identity, questionParameters, answers, resolvedEnvParams.userPoolId);\n\n  if (typeof validationResult === 'string') {\n    throw new Error(validationResult);\n  }\n\n  // Get app clients based on passed in previous values\n  answers.appClientWeb = questionParameters.webClients?.find((c) => c.ClientId === resolvedEnvParams.webClientId);\n\n  if (!answers.appClientWeb) {\n    throw new AmplifyError('AuthImportError', {\n      message: importMessages.AppClientNotFound('Web', resolvedEnvParams.webClientId),\n    });\n  }\n\n  answers.appClientNative = questionParameters.nativeClients?.find((c) => c.ClientId === resolvedEnvParams.nativeClientId);\n\n  if (!answers.appClientNative) {\n    throw new AmplifyError('AuthImportError', {\n      message: importMessages.AppClientNotFound('Native', resolvedEnvParams.nativeClientId),\n    });\n  }\n\n  // Check OAuth config matching and enabled\n  const oauthResult = await appClientsOAuthPropertiesMatching(context, answers.appClientWeb, answers.appClientNative, false);\n\n  if (!oauthResult.isValid) {\n    throw new AmplifyError('AuthImportError', {\n      message: importMessages.OAuth.PropertiesAreNotMatching,\n    });\n  }\n\n  // Store the results in the answer\n  answers.oauthProviders = oauthResult.oauthProviders;\n  answers.oauthProperties = oauthResult.oauthProperties;\n\n  if (answers.oauthProviders && answers.oauthProviders.length > 0) {\n    answers.identityProviders = await cognito.listUserPoolIdentityProviders(answers.userPoolId!);\n  }\n\n  if (resourceParameters.authSelections === 'identityPoolAndUserPool') {\n    const identityPools = questionParameters.validatedIdentityPools?.filter(\n      (idp) => idp.identityPool.IdentityPoolId === resolvedEnvParams.identityPoolId,\n    );\n\n    if (identityPools?.length !== 1) {\n      throw new AmplifyError('AuthImportError', {\n        message: importMessages.IdentityPoolNotFound(resolvedEnvParams.identityPoolName!, resolvedEnvParams.identityPoolId!),\n      });\n    }\n\n    answers.identityPoolId = identityPools[0].identityPool.IdentityPoolId;\n    answers.identityPool = identityPools[0].identityPool;\n    answers.identityProviders = identityPools[0].providers;\n\n    // Get the auth and unauth roles assigned and all the required parameters from the selected Identity Pool.\n    const { authRoleArn, authRoleName, unauthRoleArn, unauthRoleName } = await identity.getIdentityPoolRoles(answers.identityPoolId!);\n\n    answers.authRoleArn = authRoleArn;\n    answers.authRoleName = authRoleName;\n    answers.unauthRoleArn = unauthRoleArn;\n    answers.unauthRoleName = unauthRoleName;\n  }\n\n  if (answers.userPool.MfaConfiguration !== 'OFF') {\n    // Use try catch in case if there is no MFA configuration for the user pool\n    try {\n      answers.mfaConfiguration = await cognito.getUserPoolMfaConfig(answers.userPoolId!);\n    } catch {\n      // swallow error\n    }\n  }\n\n  if (answers.oauthProviders && answers.oauthProviders.length > 0) {\n    answers.identityProviders = await cognito.listUserPoolIdentityProviders(answers.userPoolId!);\n  }\n\n  // Import questions succeeded, create the create the required CLI resource state from the answers.\n  const projectType: string = projectConfig.frontend;\n\n  const newState = await updateStateFiles(context, questionParameters, answers, projectType, true);\n\n  return {\n    succeeded: true,\n    envSpecificParameters: newState.envSpecificParameters,\n  };\n};\n\nenum AuthParam {\n  USER_POOL_ID = 'userPoolId',\n  WEB_CLIENT_ID = 'webClientId',\n  NATIVE_CLIENT_ID = 'nativeClientId',\n  IDENTITY_POOL_ID = 'identityPoolId',\n}\n"]}