{"version":3,"file":"core-questions.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/question-factories/core-questions.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport inquirer from 'inquirer';\nimport { uniq, flatten } from 'lodash';\nimport chalk, { Chalk } from 'chalk';\nimport { $TSAny } from '@aws-amplify/amplify-cli-core';\nimport { AuthContext, CognitoConfiguration } from '../../../context';\n\n/**\n * Input object for parseInputs\n */\nexport type Input = {\n  when?: () => boolean;\n  prefixColor?: string;\n  prefix?: string;\n  key: string;\n  question?: string;\n  suffix?: string;\n  map?: $TSAny;\n  type?: string;\n  iterator?: $TSAny;\n  filter?: $TSAny;\n  requiredOptions?: $TSAny;\n  options?: $TSAny;\n};\n\n/**\n * parses input object and returns a question object\n */\nexport const parseInputs = async (\n  input: Input,\n  amplify: $TSAny,\n  defaultValuesFilename: $TSAny,\n  stringMapsFilename: $TSAny,\n  currentAnswers: $TSAny,\n  context: AuthContext,\n): Promise<$TSAny> => {\n  // eslint-disable-line max-len\n  const defaultValuesSrc = `${__dirname}/../assets/${defaultValuesFilename}`;\n  const stringMapsSrc = `${__dirname}/../assets/${stringMapsFilename}`;\n  const { getAllDefaults } = await import(defaultValuesSrc);\n  const { getAllMaps } = await import(stringMapsSrc);\n\n  // Can have a cool question builder function here based on input json - will iterate on this\n  // Can also have some validations here based on the input json\n  // Uncool implementation here\n\n  const color: keyof Chalk = (input.prefixColor as keyof Chalk) ?? 'green';\n  const questionChalk = chalk[color] as Chalk;\n  const prefix = input.prefix ? `${'\\n'} ${questionChalk(input.prefix)} ${'\\n'}` : '';\n\n  let question: $TSAny = {\n    name: input.key,\n    message: input.question,\n    prefix,\n    suffix: input.suffix,\n    when: amplify.getWhen(input, currentAnswers, context.updatingAuth, amplify),\n    validate: amplify.inputValidation(input),\n    default: () => {\n      // eslint-disable-line no-unused-vars\n      // if the user is editing and there is a previous value, this is always the default\n      if (context.updatingAuth && context.updatingAuth[input.key as keyof CognitoConfiguration] !== undefined) {\n        if (input.key === 'triggers') {\n          return triggerDefaults(context, input, getAllMaps(context.updatingAuth)[input.map]);\n        }\n        return context.updatingAuth[input.key as keyof CognitoConfiguration];\n      }\n      // if not editing or no previous value, get defaults (either w/ or w/out social provider flow)\n      return getAllDefaults(amplify.getProjectDetails(amplify))[input.key];\n    },\n  };\n\n  if (input.type && ['list', 'multiselect'].includes(input.type)) {\n    if (context.updatingAuth && input.iterator) {\n      question = iteratorQuestion(input, question, context);\n      // if selecting existing value to edit it's not require to validate inputs\n      question.validate = () => true;\n    } else if (input.filter) {\n      question = filterInputs(input, question, getAllMaps, context, currentAnswers);\n    } else if (input.requiredOptions) {\n      question = getRequiredOptions(input, question, getAllMaps, context, currentAnswers);\n    } else if (!input.requiredOptions || (question.when && !question.when())) {\n      question = {\n        choices: input.map ? getAllMaps(context.updatingAuth)[input.map] : input.options,\n        ...question,\n      };\n    }\n  }\n\n  if (input.type && input.type === 'list') {\n    question = {\n      type: 'list',\n      ...question,\n    };\n  } else if (input.type && input.type === 'multiselect') {\n    question = {\n      type: 'checkbox',\n      ...question,\n    };\n  } else if (input.type && input.type === 'confirm') {\n    question = {\n      type: 'confirm',\n      ...question,\n    };\n  } else {\n    question = {\n      type: 'input',\n      ...question,\n    };\n  }\n\n  return question;\n};\n\nconst iteratorQuestion = (input: $TSAny, question: $TSAny, context: AuthContext) => {\n  if (context.updatingAuth?.[input.iterator as keyof CognitoConfiguration]) {\n    question = {\n      choices: context.updatingAuth[input.iterator as keyof CognitoConfiguration].map((i: $TSAny) => ({\n        name: i,\n        value: i,\n      })),\n      ...question,\n    };\n  } else if (input.iterator) {\n    // TODO: make iterator key useful for non-update actions\n    question = {\n      choices: [],\n      ...question,\n    };\n  }\n  return question;\n};\n\nconst getRequiredOptions = (input: $TSAny, question: $TSAny, getAllMaps: $TSAny, context: AuthContext, currentAnswers: $TSAny) => {\n  const sourceValues = Object.assign(context.updatingAuth ? context.updatingAuth : {}, currentAnswers);\n  const sourceArray = uniq(flatten(input.requiredOptions.map((i: $TSAny) => sourceValues[i] || [])));\n  const requiredOptions = getAllMaps()[input.map] ? getAllMaps()[input.map].filter((x: $TSAny) => sourceArray.includes(x.value)) : [];\n  const trueOptions = getAllMaps()[input.map] ? getAllMaps()[input.map].filter((x: $TSAny) => !sourceArray.includes(x.value)) : [];\n  const msg =\n    requiredOptions && requiredOptions.length > 0\n      ? `--- ${input.requiredOptionsMsg} ${requiredOptions.map((t: $TSAny) => t.name).join(', ')}   ---`\n      : '';\n  question = Object.assign(question, {\n    choices: [new inquirer.Separator(msg), ...trueOptions],\n    filter: (userInput: $TSAny) => userInput.concat(...requiredOptions.map((z: $TSAny) => z.value)),\n  });\n  return question;\n};\n\nconst filterInputs = (input: $TSAny, question: $TSAny, getAllMaps: $TSAny, context: AuthContext, currentAnswers: $TSAny) => {\n  if (input.filter === 'providers') {\n    const choices = input.map ? getAllMaps(context.updatingAuth)[input.map] : input.options;\n    const { requiredAttributes } = Object.assign(context.updatingAuth ? context.updatingAuth : {}, currentAnswers);\n    if (requiredAttributes) {\n      const attrMap = getAllMaps().attributeProviderMap;\n      requiredAttributes.forEach((attr: string | number) => {\n        choices.forEach((choice: { missingAttributes: $TSAny[]; value: string; disabled: string; name: $TSAny }) => {\n          choice.missingAttributes = [];\n          if (!attrMap[attr] || !attrMap[attr][`${choice.value.toLowerCase()}`].attr) {\n            choice.missingAttributes = choice.missingAttributes.length < 1 ? [attr] : choice.missingAttributes.concat(attr);\n            const newList = choice.missingAttributes.join(', ');\n            choice.disabled = `Your UserPool is configured to require ${newList.substring(\n              0,\n              newList.length,\n            )}, which cannot be retrieved from ${choice.name}`;\n          }\n        });\n      });\n    }\n    question = { choices, ...question };\n  }\n  if (input.filter === 'attributes') {\n    let choices = input.map ? getAllMaps(context.updatingAuth)[input.map] : input.options;\n    choices = JSON.parse(JSON.stringify(choices));\n    const attrMap = getAllMaps().attributeProviderMap;\n    choices.forEach((choice: { missingProviders: $TSAny[]; value: string | number; name: string }) => {\n      choice.missingProviders = [];\n      if (attrMap[choice.value]) {\n        Object.values(attrMap[choice.value]).forEach((provider: $TSAny, index) => {\n          if (!provider.attr) {\n            const providerKey = Object.keys(attrMap[choice.value])[index];\n            let providerName = providerKey.charAt(0).toUpperCase() + providerKey.slice(1);\n            if (providerName.toLowerCase() === 'LoginWithAmazon'.toLowerCase()) {\n              providerName = 'Login With Amazon';\n            }\n            if (providerName.toLowerCase() === 'SignInWithApple'.toLowerCase()) {\n              providerName = 'Sign in with Apple';\n            }\n            choice.missingProviders = choice.missingProviders.length < 1 ? [providerName] : choice.missingProviders.concat(providerName);\n          }\n        });\n        if (choice.missingProviders && choice.missingProviders.length > 0) {\n          const newList = choice.missingProviders.join(', ');\n          choice.name = `${choice.name} (This attribute is not supported by ${newList.substring(0, newList.length)}.)`;\n        }\n      }\n    });\n    question = { choices, ...question };\n  }\n  if (input.filter === 'updateOptions' && context.updatingAuth) {\n    const choices = input.map ? getAllMaps(context.updatingAuth)[input.map] : input.options;\n    const newChoices = JSON.parse(JSON.stringify(choices));\n    choices.forEach((c: { conditionKey: string; value: $TSAny; conditionMsg: string; name: string }) => {\n      if (c.conditionKey === 'useDefault' && context.updatingAuth?.[c.conditionKey] === c.value && !c.conditionMsg) {\n        const index = newChoices.findIndex((i: { name: string }) => i.name === c.name);\n        newChoices.splice(index, 1);\n      } else if (c.conditionMsg && !context.updatingAuth?.[c.conditionKey as keyof CognitoConfiguration]) {\n        if (context.updatingAuth?.useDefault === 'defaultSocial') {\n          const index = newChoices.findIndex((i: { name: string }) => i.name === c.name);\n          newChoices[index].disabled = `Disabled: ${c.conditionMsg}`;\n        } else {\n          const index = newChoices.findIndex((i: { name: string }) => i.name === c.name);\n          newChoices.splice(index, 1);\n        }\n      }\n    });\n    question = { choices: newChoices, ...question };\n  }\n  return question;\n};\n\nconst triggerDefaults = (context: AuthContext, input: { key: string | number }, availableOptions: $TSAny[]) => {\n  const capabilityDefaults: $TSAny[] = [];\n  if (context.updatingAuth?.triggers) {\n    const current =\n      typeof context.updatingAuth[input.key as keyof CognitoConfiguration] === 'string'\n        ? JSON.parse(context.updatingAuth[input.key as keyof CognitoConfiguration])\n        : context.updatingAuth[input.key as keyof CognitoConfiguration];\n    try {\n      if (current) {\n        availableOptions.forEach((a) => {\n          let match = true;\n          Object.keys(a.triggers).forEach((t) => {\n            if (current[t]) {\n              const test = a.triggers[t].every((c: $TSAny) => current[t].includes(c));\n              if (!test) {\n                match = false;\n              }\n            } else {\n              match = false;\n            }\n          });\n          if (match) {\n            capabilityDefaults.push(a.value);\n          }\n        });\n      }\n    } catch (e) {\n      throw new Error('Error parsing capability defaults');\n    }\n  }\n  return capabilityDefaults;\n};\n"]}