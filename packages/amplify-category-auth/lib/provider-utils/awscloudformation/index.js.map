{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/provider-utils/awscloudformation/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport inquirer from 'inquirer';\nimport _ from 'lodash';\nimport { stateManager, open, $TSContext, $TSObject, AmplifyError } from '@aws-amplify/amplify-cli-core';\nimport { ensureEnvParamManager } from '@aws-amplify/amplify-environment-parameters';\nimport { getAuthResourceName } from '../../utils/getAuthResourceName';\nimport { copyCfnTemplate, saveResourceParameters } from './utils/synthesize-resources';\nimport { ENV_SPECIFIC_PARAMS, AmplifyAdmin, UserPool, IdentityPool, BothPools, privateKeys } from './constants';\nimport { getAddAuthHandler, getUpdateAuthHandler } from './handlers/resource-handlers';\nimport { getSupportedServices } from '../supported-services';\nimport { importResource, importedAuthEnvInit } from './import';\nimport { AuthContext } from '../../context';\n\nexport { importResource } from './import';\n\nconst serviceQuestions = async (\n  context: any,\n  defaultValuesFilename: any,\n  stringMapsFilename: any,\n  serviceWalkthroughFilename: any,\n  serviceMetadata: any,\n): Promise<any> => {\n  const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;\n  const { serviceWalkthrough } = await import(serviceWalkthroughSrc);\n  return serviceWalkthrough(context, defaultValuesFilename, stringMapsFilename, serviceMetadata);\n};\n\nexport const addResource = async (context: AuthContext, service: string): Promise<string> => {\n  const serviceMetadata = getSupportedServices()[service];\n  const { defaultValuesFilename, stringMapsFilename, serviceWalkthroughFilename } = serviceMetadata;\n  return getAddAuthHandler(context)(\n    await serviceQuestions(context, defaultValuesFilename, stringMapsFilename, serviceWalkthroughFilename, serviceMetadata),\n  );\n};\n\nexport const updateResource = async (context: AuthContext, { service }: { service: any }): Promise<any> => {\n  const serviceMetadata = getSupportedServices()[service];\n  const { defaultValuesFilename, stringMapsFilename, serviceWalkthroughFilename } = serviceMetadata;\n  return getUpdateAuthHandler(context)(\n    await serviceQuestions(context, defaultValuesFilename, stringMapsFilename, serviceWalkthroughFilename, serviceMetadata),\n  );\n};\n\nexport const updateConfigOnEnvInit = async (context: $TSContext, category: any, service: string): Promise<any> => {\n  const serviceMetadata = getSupportedServices().Cognito;\n  const { defaultValuesFilename, stringMapsFilename, serviceWalkthroughFilename, provider } = serviceMetadata;\n\n  const providerPlugin = context.amplify.getPluginInstance(context, provider);\n  await ensureEnvParamManager();\n  // previously selected answers\n  const resourceParams = providerPlugin.loadResourceParameters(context, 'auth', service);\n  // ask only env specific questions\n  let currentEnvSpecificValues = context.amplify.loadEnvResourceParameters(context, category, service);\n\n  const resource = _.get(context.exeInfo, ['amplifyMeta', category, service]);\n\n  // Imported auth resource behavior is different from Amplify managed resources, as\n  // they are immutable and all parameters and values are derived from the currently\n  // cloud deployed values.\n  if (resource && resource.serviceType === 'imported') {\n    let envSpecificParametersResult;\n    const { doServiceWalkthrough, succeeded, resourceCleanupRequired, envSpecificParameters } = await importedAuthEnvInit(\n      context,\n      service,\n      resource,\n      resourceParams,\n      provider,\n      providerPlugin,\n      currentEnvSpecificValues,\n      isInHeadlessMode(context),\n      isInHeadlessMode(context) ? getHeadlessParams(context) : {},\n    );\n\n    // No need for headless check as this will never be true for headless\n    if (doServiceWalkthrough === true) {\n      const importResult = await importResource(\n        context,\n        {\n          providerName: provider,\n          // this coercion was done to avoid making `provider` on the ServiceSelection type nullable, a larger, potentially breaking change.\n          // Once ServiceSelection is refactored, this should be removed, and provider should be set to undefined without type coercion.\n          provider: undefined as unknown as string, // We don't have the resolved directory of the provider we pass in an instance\n          service: 'Cognito',\n        },\n        resourceParams,\n        providerPlugin,\n        false,\n      );\n\n      if (importResult) {\n        envSpecificParametersResult = importResult.envSpecificParameters;\n      } else {\n        throw new Error('There was an error importing the previously configured auth configuration to the new environment.');\n      }\n    } else if (succeeded) {\n      if (resourceCleanupRequired) {\n        // returning undefined as auth resource cleanup required\n        return {};\n      }\n      envSpecificParametersResult = envSpecificParameters;\n    } else {\n      throw new Error('There was an error importing the previously configured auth configuration to the new environment.');\n    }\n\n    // If the imported resource was synced up to the cloud before, copy over the timestamp since frontend generation\n    // and other pieces of the CLI could rely on the presence of a value, if no timestamp was found for the same\n    // resource, then do nothing as push will assign one.\n    const currentMeta = stateManager.getCurrentMeta(undefined, {\n      throwIfNotExist: false,\n    });\n\n    if (currentMeta) {\n      const meta = stateManager.getMeta(undefined, {\n        throwIfNotExist: false,\n      });\n\n      const cloudTimestamp = _.get(currentMeta, [category, service, 'lastPushTimeStamp'], undefined);\n\n      if (cloudTimestamp) {\n        resource.lastPushTimeStamp = cloudTimestamp;\n      } else {\n        resource.lastPushTimeStamp = new Date();\n      }\n\n      _.setWith(meta, [category, service, 'lastPushTimeStamp'], cloudTimestamp);\n      stateManager.setMeta(undefined, meta);\n    }\n\n    return envSpecificParametersResult;\n  }\n\n  const { hostedUIProviderMeta } = resourceParams;\n\n  if (hostedUIProviderMeta) {\n    currentEnvSpecificValues = getOAuthProviderKeys(currentEnvSpecificValues, resourceParams);\n  }\n\n  // legacy headless mode (only supports init)\n  if (isInHeadlessMode(context)) {\n    const envParams: $TSObject = {};\n    let mergedValues: $TSObject | undefined;\n    if (resourceParams.thirdPartyAuth || hostedUIProviderMeta) {\n      const authParams = getHeadlessParams(context);\n      const projectType = context.amplify.getProjectConfig().frontend;\n      mergedValues = { ...resourceParams, ...authParams, ...currentEnvSpecificValues };\n      const requiredParams = getRequiredParamsForHeadlessInit(projectType, resourceParams);\n      const missingParams: any[] = [];\n      requiredParams.forEach((param: any) => {\n        if (Object.keys(mergedValues ?? {}).includes(param)) {\n          envParams[param] = mergedValues?.[param];\n        } else {\n          missingParams.push(param);\n        }\n      });\n\n      if (missingParams.length) {\n        throw new AmplifyError('InputValidationError', {\n          message: `auth headless is missing the following inputParameters ${missingParams.join(', ')}`,\n          link: 'https://docs.amplify.aws/cli/usage/headless/#--categories',\n        });\n      }\n    }\n    if (hostedUIProviderMeta) {\n      parseCredsForHeadless(mergedValues, envParams);\n    }\n    return envParams;\n  }\n\n  const isPullingOrEnv =\n    context.input.command === 'pull' ||\n    (context.input.command === 'env' && context.input.subCommands && !context.input.subCommands.includes('add'));\n  // don't ask for env_specific params when checking out env or pulling\n  serviceMetadata.inputs = serviceMetadata.inputs.filter(\n    (input: any) =>\n      ENV_SPECIFIC_PARAMS.includes(input.key) && !Object.keys(currentEnvSpecificValues).includes(input.key) && !isPullingOrEnv,\n  );\n\n  const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;\n  const { serviceWalkthrough } = await import(serviceWalkthroughSrc);\n\n  // interactive mode\n  const result = await serviceWalkthrough(context, defaultValuesFilename, stringMapsFilename, serviceMetadata, resourceParams);\n  let envParams: { [key: string]: any } = {};\n\n  if (resourceParams.hostedUIProviderMeta) {\n    envParams = formatCredentialsForEnvParams(currentEnvSpecificValues, result, resourceParams);\n  }\n\n  ENV_SPECIFIC_PARAMS.forEach((paramName) => {\n    if (paramName in result && paramName !== 'hostedUIProviderCreds' && privateKeys.indexOf(paramName) === -1) {\n      envParams[paramName] = result[paramName];\n    }\n  });\n\n  return envParams;\n};\n\nexport const migrate = async (context: $TSContext): Promise<void> => {\n  const category = 'auth';\n  const { amplify } = context;\n  const existingAuth = context.migrationInfo.amplifyMeta.auth || {};\n  if (!(Object.keys(existingAuth).length > 0)) {\n    return;\n  }\n  const { provider, cfnFilename, defaultValuesFilename } = getSupportedServices().Cognito;\n  const defaultValuesSrc = `${__dirname}/assets/${defaultValuesFilename}`;\n\n  const { roles } = await import(defaultValuesSrc);\n\n  const providerInstance = amplify.getPluginInstance(context, provider);\n  const resourceName = await getAuthResourceName(context);\n  const props = providerInstance.loadResourceParameters(context, 'auth', resourceName);\n  // Roles have changed to ref. Removing old hard-coded role ref\n  Object.keys(roles).forEach((key) => {\n    delete props[key];\n  });\n  await copyCfnTemplate(context, category, props, cfnFilename);\n  saveResourceParameters(context, provider, category, resourceName, { ...roles, ...props }, ENV_SPECIFIC_PARAMS);\n};\n\nconst isInHeadlessMode = (context: $TSContext): any => context.exeInfo.inputParams.yes;\n\nconst getHeadlessParams = (context: $TSContext): any => {\n  const { inputParams } = context.exeInfo;\n  try {\n    // If the input given is a string validate it using JSON parse\n    const { categories = {} } = typeof inputParams === 'string' ? JSON.parse(inputParams) : inputParams;\n    return categories.auth || {};\n  } catch (err) {\n    throw new Error(`Failed to parse auth headless parameters: ${err}`);\n  }\n};\n\n/* eslint-disable no-param-reassign */\nconst getOAuthProviderKeys = (currentEnvSpecificValues: any, resourceParams: any): any => {\n  const oAuthProviders = JSON.parse(resourceParams.hostedUIProviderMeta).map((h: any) => h.ProviderName);\n  const { hostedUIProviderCreds = '[]' } = currentEnvSpecificValues;\n  const configuredProviders = JSON.parse(hostedUIProviderCreds).map((h: any) => h.ProviderName);\n  const deltaProviders = _.intersection(oAuthProviders, configuredProviders);\n  deltaProviders.forEach((provider: any) => {\n    const lowerCaseProvider = provider.toLowerCase();\n    if (provider === 'SignInWithApple') {\n      currentEnvSpecificValues[`${lowerCaseProvider}ClientIdUserPool`] = configuredProviders[`${lowerCaseProvider}ClientIdUserPool`];\n      currentEnvSpecificValues[`${lowerCaseProvider}TeamIdUserPool`] = configuredProviders[`${lowerCaseProvider}TeamIdUserPool`];\n      currentEnvSpecificValues[`${lowerCaseProvider}KeyIdUserPool`] = configuredProviders[`${lowerCaseProvider}KeyIdUserPool`];\n      currentEnvSpecificValues[`${lowerCaseProvider}PrivateKeyUserPool`] = configuredProviders[`${lowerCaseProvider}PrivateKeyUserPool`];\n    } else {\n      currentEnvSpecificValues[`${lowerCaseProvider}AppIdUserPool`] = configuredProviders[`${lowerCaseProvider}AppIdUserPool`];\n      currentEnvSpecificValues[`${lowerCaseProvider}AppSecretUserPool`] = configuredProviders[`${lowerCaseProvider}AppSecretUserPool`];\n    }\n  });\n  return currentEnvSpecificValues;\n};\n/* eslint-enable no-param-reassign */\n\nconst formatCredentialsForEnvParams = (currentEnvSpecificValues: any, result: any, resourceParams: any): any => {\n  const partialParams: { [key: string]: any } = {};\n  if (currentEnvSpecificValues.hostedUIProviderCreds && result.hostedUIProviderCreds) {\n    partialParams.hostedUIProviderCreds = [];\n    const inputResult = JSON.parse(result.hostedUIProviderCreds);\n    const previousResult = JSON.parse(currentEnvSpecificValues.hostedUIProviderCreds);\n    if (resourceParams.hostedUIProviderMeta) {\n      const currentProviders = JSON.parse(resourceParams.hostedUIProviderMeta).map((h: any) => h.ProviderName);\n      currentProviders.forEach((currentProvider: any) => {\n        const previousProvider = previousResult.find((provider: any) => provider.ProviderName === currentProvider);\n        const resultProvider = inputResult.find((provider: any) => provider.ProviderName === currentProvider);\n        partialParams.hostedUIProviderCreds.push(Object.assign(resultProvider, previousProvider));\n      });\n      partialParams.hostedUIProviderCreds = JSON.stringify(partialParams.hostedUIProviderCreds);\n    }\n  } else if (currentEnvSpecificValues.hostedUIProviderCreds && !result.hostedUIProviderCreds) {\n    partialParams.hostedUIProviderCreds = currentEnvSpecificValues.hostedUIProviderCreds;\n  } else if (!currentEnvSpecificValues.hostedUIProviderCreds && result.hostedUIProviderCreds) {\n    partialParams.hostedUIProviderCreds = result.hostedUIProviderCreds;\n  }\n  return partialParams;\n};\n\n/* eslint-disable no-param-reassign */\nconst parseCredsForHeadless = (mergedValues: any, envParams: any): any => {\n  const oAuthProviders = JSON.parse(mergedValues.hostedUIProviderMeta).map((h: any) => h.ProviderName);\n  envParams.hostedUIProviderCreds = JSON.stringify(\n    oAuthProviders.map((provider: any) => {\n      const lowerCaseProvider = provider.toLowerCase();\n      if (provider === 'SignInWithApple') {\n        return {\n          ProviderName: provider,\n          client_id: mergedValues[`${lowerCaseProvider}ClientIdUserPool`],\n          team_id: mergedValues[`${lowerCaseProvider}TeamIdUserPool`],\n          key_id: mergedValues[`${lowerCaseProvider}KeyIdUserPool`],\n          private_key: mergedValues[`${lowerCaseProvider}PrivateKeyUserPool`],\n        };\n      }\n      return {\n        ProviderName: provider,\n        client_id: mergedValues[`${lowerCaseProvider}AppIdUserPool`],\n        client_secret: mergedValues[`${lowerCaseProvider}AppSecretUserPool`],\n      };\n    }),\n  );\n  oAuthProviders.forEach((provider: any) => {\n    const lowerCaseProvider = provider.toLowerCase();\n    if (provider === 'SignInWithApple') {\n      delete envParams[`${lowerCaseProvider}ClientIdUserPool`];\n      delete envParams[`${lowerCaseProvider}TeamIdUserPool`];\n      delete envParams[`${lowerCaseProvider}KeyIdUserPool`];\n      delete envParams[`${lowerCaseProvider}PrivateKeyUserPool`];\n    } else {\n      delete envParams[`${lowerCaseProvider}AppIdUserPool`];\n      delete envParams[`${lowerCaseProvider}AppSecretUserPool`];\n    }\n  });\n};\n/* eslint-enable no-param-reassign */\n\nconst getRequiredParamsForHeadlessInit = (projectType: any, previousValues: any): any => {\n  const requiredParams: string[] = [];\n\n  if (previousValues.thirdPartyAuth) {\n    if (previousValues.authProviders.includes('accounts.google.com')) {\n      requiredParams.push('googleClientId');\n      if (projectType === 'ios') {\n        requiredParams.push('googleIos');\n      }\n      if (projectType === 'android') {\n        requiredParams.push('googleAndroid');\n      }\n    }\n    if (previousValues.authProviders.includes('graph.facebook.com')) {\n      requiredParams.push('facebookAppId');\n    }\n    if (previousValues.authProviders.includes('www.amazon.com')) {\n      requiredParams.push('amazonAppId');\n    }\n    // eslint-disable-next-line spellcheck/spell-checker\n    if (previousValues.authProviders.includes('appleid.apple.com')) {\n      requiredParams.push('appleAppId');\n    }\n  }\n\n  if (previousValues.hostedUIProviderMeta) {\n    const oAuthProviders = JSON.parse(previousValues.hostedUIProviderMeta).map((hostedUIProvider: any) => hostedUIProvider.ProviderName);\n    if (oAuthProviders && oAuthProviders.length > 0) {\n      oAuthProviders.forEach((provider: any) => {\n        const lowerCaseProvider = provider.toLowerCase();\n        // Everything but SIWA is required because the private key isn't returned by Cognito\n        // so we can't initialize SIWA in a new environment programmatically.\n        // User will have to reconfigure SIWA through Admin UI or CLI.\n        if (provider !== 'SignInWithApple') {\n          requiredParams.push(`${lowerCaseProvider}AppIdUserPool`);\n          requiredParams.push(`${lowerCaseProvider}AppSecretUserPool`);\n        }\n      });\n    }\n  }\n  return requiredParams;\n};\n\nexport const console = async (context: $TSContext, amplifyMeta: any): Promise<any> => {\n  const cognitoOutput = getCognitoOutput(amplifyMeta);\n  if (cognitoOutput) {\n    const { AmplifyAppId, Region } = amplifyMeta.providers.awscloudformation;\n    if (cognitoOutput.UserPoolId && cognitoOutput.IdentityPoolId) {\n      let choices = [UserPool, IdentityPool, BothPools];\n      let isAdminApp = false;\n      let region;\n      if (AmplifyAppId) {\n        const providerPlugin = await import(context.amplify.getProviderPlugins(context).awscloudformation);\n        const res = await providerPlugin.isAmplifyAdminApp(AmplifyAppId);\n        isAdminApp = res.isAdminApp;\n        region = res.region;\n      }\n\n      if (isAdminApp) {\n        if (region !== Region) {\n          context.print.warning(`Region mismatch: Amplify service returned '${region}', but found '${Region}' in amplify-meta.json.`);\n        }\n        if (!AmplifyAppId) {\n          throw new Error('Missing AmplifyAppId in amplify-meta.json');\n        }\n        choices = [AmplifyAdmin, ...choices];\n      }\n\n      const answer = await inquirer.prompt({\n        name: 'selection',\n        type: 'list',\n        message: 'Which console',\n        choices,\n        default: isAdminApp ? AmplifyAdmin : BothPools,\n      });\n\n      switch (answer.selection) {\n        case AmplifyAdmin:\n          await openAdminUI(context, AmplifyAppId, Region);\n          break;\n        case UserPool:\n          await openUserPoolConsole(context, Region, cognitoOutput.UserPoolId);\n          break;\n        case IdentityPool:\n          await openIdentityPoolConsole(context, Region, cognitoOutput.IdentityPoolId);\n          break;\n        case BothPools:\n        default:\n          await openUserPoolConsole(context, Region, cognitoOutput.UserPoolId);\n          await openIdentityPoolConsole(context, Region, cognitoOutput.IdentityPoolId);\n          break;\n      }\n    } else if (cognitoOutput.UserPoolId) {\n      await openUserPoolConsole(context, Region, cognitoOutput.UserPoolId);\n    } else {\n      await openIdentityPoolConsole(context, Region, cognitoOutput.IdentityPoolId);\n    }\n    context.print.info('');\n  } else {\n    context.print.error('Amazon Cognito resources have NOT been created for your project.');\n  }\n};\n\nconst getCognitoOutput = (amplifyMeta: any): any => {\n  let cognitoOutput;\n  const categoryMeta = amplifyMeta.auth;\n  const services = Object.keys(categoryMeta);\n  for (let i = 0; i < services.length; i += 1) {\n    const serviceMeta = categoryMeta[services[i]];\n    if (serviceMeta.service === 'Cognito' && serviceMeta.output && (serviceMeta.output.UserPoolId || serviceMeta.output.IdentityPoolId)) {\n      cognitoOutput = serviceMeta.output;\n      break;\n    }\n  }\n  return cognitoOutput;\n};\n\nconst openAdminUI = async (context: $TSContext, appId: string, region: string): Promise<any> => {\n  const { envName } = context.amplify.getEnvInfo();\n  const providerPlugin = await import(context.amplify.getProviderPlugins(context).awscloudformation);\n  const baseUrl = providerPlugin.adminBackendMap[region].amplifyAdminUrl;\n  const adminUrl = `${baseUrl}/admin/${appId}/${envName}/auth`;\n  await open(adminUrl, { wait: false });\n  context.print.success(adminUrl);\n};\n\nconst openUserPoolConsole = async (context: $TSContext, region: string, userPoolId: string): Promise<void> => {\n  const userPoolConsoleUrl = `https://${region}.console.aws.amazon.com/cognito/users/?region=${region}#/pool/${userPoolId}/details`;\n  await open(userPoolConsoleUrl, { wait: false });\n  context.print.info('User Pool console:');\n  context.print.success(userPoolConsoleUrl);\n};\n\nconst openIdentityPoolConsole = async (context: $TSContext, region: string, identityPoolId: string): Promise<void> => {\n  const identityPoolConsoleUrl = `https://${region}.console.aws.amazon.com/cognito/pool/?region=${region}&id=${identityPoolId}`;\n  await open(identityPoolConsoleUrl, { wait: false });\n  context.print.info('Identity Pool console:');\n  context.print.success(identityPoolConsoleUrl);\n};\n\nexport const getPermissionPolicies = (context: $TSContext, service: string, resourceName: string, crudOptions: any): any => {\n  const { serviceWalkthroughFilename } = getSupportedServices()[service];\n  const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;\n  /* eslint-disable */\n  const { getIAMPolicies } = require(serviceWalkthroughSrc);\n  /* eslint-enable */\n\n  if (!getPermissionPolicies) {\n    context.print.info(`No policies found for ${resourceName}`);\n    return undefined;\n  }\n\n  return getIAMPolicies(context, resourceName, crudOptions);\n};\n"]}