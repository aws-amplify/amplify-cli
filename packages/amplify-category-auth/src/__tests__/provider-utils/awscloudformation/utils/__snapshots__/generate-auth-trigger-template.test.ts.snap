// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateNestedAuthTriggerTemplate adds "authTriggerFn" as a dependency on "CustomAuthTriggerResource" 1`] = `
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "ShouldNotCreateEnvResources": {
      "Fn::Equals": [
        {
          "Ref": "env",
        },
        "NONE",
      ],
    },
  },
  "Description": "Custom Resource stack for Auth Trigger created using Amplify CLI",
  "Parameters": {
    "env": {
      "Type": "String",
    },
    "functionauthtestCustomMessageArn": {
      "Type": "String",
    },
    "functionauthtestCustomMessageLambdaExecutionRole": {
      "Type": "String",
    },
    "functionauthtestCustomMessageName": {
      "Type": "String",
    },
    "functionauthtestostConfirmationArn": {
      "Type": "String",
    },
    "functionauthtestostConfirmationLambdaExecutionRole": {
      "Type": "String",
    },
    "functionauthtestostConfirmationName": {
      "Type": "String",
    },
    "userpoolArn": {
      "Type": "String",
    },
    "userpoolId": {
      "Type": "String",
    },
  },
  "Resources": {
    "CustomAuthTriggerResource": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "authTriggerFn7FCFA449",
        "authTriggerFnServiceRoleDefaultPolicyEC9285A8",
        "authTriggerFnServiceRole08093B67",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "authTriggerFn7FCFA449",
            "Arn",
          ],
        },
        "lambdaConfig": [
          {
            "lambdaFunctionArn": {
              "Ref": "functionauthtestCustomMessageArn",
            },
            "lambdaFunctionName": "authtestCustomMessage",
            "triggerType": "CustomMessage",
          },
          {
            "lambdaFunctionArn": {
              "Ref": "functionauthtestostConfirmationArn",
            },
            "lambdaFunctionName": "authtestostConfirmation",
            "triggerType": "PostConfirmation",
          },
        ],
        "userpoolId": {
          "Ref": "userpoolId",
        },
      },
      "Type": "Custom::CustomAuthTriggerResourceOutputs",
      "UpdateReplacePolicy": "Delete",
    },
    "UserPoolCustomMessageLambdaInvokePermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "functionauthtestCustomMessageName",
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Ref": "userpoolArn",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "UserPoolPostConfirmationLambdaInvokePermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "functionauthtestostConfirmationName",
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Ref": "userpoolArn",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "authTriggerFn7FCFA449": {
      "DependsOn": [
        "authTriggerFnServiceRoleDefaultPolicyEC9285A8",
        "authTriggerFnServiceRole08093B67",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "const response = require('cfn-response');
const {
  CognitoIdentityProviderClient,
  DescribeUserPoolCommand,
  UpdateUserPoolCommand,
} = require('@aws-sdk/client-cognito-identity-provider');

exports.handler = (event, context) => {
  // Don't return promise, response.send() marks context as done internally
  void tryHandleEvent(event, context);
};

async function tryHandleEvent(event, context) {
  const physicalResourceId =
    event.RequestType === 'Update' ? event.PhysicalResourceId : \`\${event.LogicalResourceId}-\${event.ResourceProperties.userpoolId}\`;
  try {
    await handleEvent(event);
    response.send(event, context, response.SUCCESS, {}, physicalResourceId);
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err }, physicalResourceId);
  }
}

async function handleEvent(event) {
  const userPoolId = event.ResourceProperties.userpoolId;
  const { lambdaConfig } = event.ResourceProperties;
  const config = {};
  const cognitoClient = new CognitoIdentityProviderClient({});
  const userPoolConfig = await cognitoClient.send(new DescribeUserPoolCommand({ UserPoolId: userPoolId }));
  const userPoolParams = userPoolConfig.UserPool;
  // update userPool params

  const updateUserPoolConfig = {
    UserPoolId: userPoolParams.Id,
    Policies: userPoolParams.Policies,
    SmsVerificationMessage: userPoolParams.SmsVerificationMessage,
    AccountRecoverySetting: userPoolParams.AccountRecoverySetting,
    AdminCreateUserConfig: userPoolParams.AdminCreateUserConfig,
    AutoVerifiedAttributes: userPoolParams.AutoVerifiedAttributes,
    EmailConfiguration: userPoolParams.EmailConfiguration,
    EmailVerificationMessage: userPoolParams.EmailVerificationMessage,
    EmailVerificationSubject: userPoolParams.EmailVerificationSubject,
    VerificationMessageTemplate: userPoolParams.VerificationMessageTemplate,
    SmsAuthenticationMessage: userPoolParams.SmsAuthenticationMessage,
    MfaConfiguration: userPoolParams.MfaConfiguration,
    DeviceConfiguration: userPoolParams.DeviceConfiguration,
    SmsConfiguration: userPoolParams.SmsConfiguration,
    UserPoolTags: userPoolParams.UserPoolTags,
    UserPoolAddOns: userPoolParams.UserPoolAddOns,
  };

  // removing undefined keys
  Object.keys(updateUserPoolConfig).forEach((key) => updateUserPoolConfig[key] === undefined && delete updateUserPoolConfig[key]);

  /* removing UnusedAccountValidityDays as deprecated
    InvalidParameterException: Please use TemporaryPasswordValidityDays in PasswordPolicy instead of UnusedAccountValidityDays
    */
  if (updateUserPoolConfig.AdminCreateUserConfig && updateUserPoolConfig.AdminCreateUserConfig.UnusedAccountValidityDays) {
    delete updateUserPoolConfig.AdminCreateUserConfig.UnusedAccountValidityDays;
  }
  lambdaConfig.forEach((lambda) => (config[\`\${lambda.triggerType}\`] = lambda.lambdaFunctionArn));
  if (event.RequestType === 'Delete') {
    updateUserPoolConfig.LambdaConfig = {};
    console.log(\`\${event.RequestType}:\`, JSON.stringify(updateUserPoolConfig));
    const result = await cognitoClient.send(new UpdateUserPoolCommand(updateUserPoolConfig));
    console.log(\`delete response data \${JSON.stringify(result)}\`);
  } else if (event.RequestType === 'Update' || event.RequestType === 'Create') {
    updateUserPoolConfig.LambdaConfig = config;
    const result = await cognitoClient.send(new UpdateUserPoolCommand(updateUserPoolConfig));
    console.log(\`createOrUpdate response data \${JSON.stringify(result)}\`);
  }
}
",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "authTriggerFnServiceRole08093B67",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "authTriggerFnServiceRole08093B67": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "authTriggerFnServiceRoleDefaultPolicyEC9285A8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cognito-idp:DescribeUserPool",
                "cognito-idp:UpdateUserPool",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "userpoolArn",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "authTriggerFnServiceRoleDefaultPolicyEC9285A8",
        "Roles": [
          {
            "Ref": "authTriggerFnServiceRole08093B67",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
