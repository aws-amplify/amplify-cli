const fs = require('fs');
const path = require('path');
const configCreator = require('../lib/frontend-config-creator');

jest.mock('amplify-cli-core');

const mapServiceName = 'Map';
const placeIndexServiceName = 'PlaceIndex';
const geofenceCollectionServiceName = 'GeofenceCollection';

describe('Get current aws-exports', () => {
  let context;
  let awsmobile;
  const projectPath = path.resolve('./');
  const srcDirPath = 'lib'; // change if needbe
  const awsExportsPath = path.join(projectPath, srcDirPath, 'aws-exports.js');
  beforeAll(() => {
    context = {
      amplify: {
        getEnvInfo: jest.fn().mockReturnValue({
          projectPath,
        }),
        getProjectConfig: jest.fn().mockReturnValue({
          javascript: {
            config: {
              SourceDir: srcDirPath,
            },
          },
        }),
      },
    };
    awsmobile = {
      aws_project_region: 'us-east-1',
    };
  });

  afterEach(() => {
    fs.unlinkSync(awsExportsPath);
  });

  it('should import', async () => {
    const awsExports = `
/* eslint-disable */
// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.

const awsmobile = ${JSON.stringify(awsmobile, null, 2)};

export default awsmobile;    
    `;
    fs.writeFileSync(awsExportsPath, awsExports);
    const result = await configCreator.getCurrentAWSExports(context);
    expect(result).toEqual(awsmobile);
  });

  it('should error if file is CommonJS', async () => {
    const awsExports = `
/* eslint-disable */
// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.

const awsmobile = ${JSON.stringify(awsmobile, null, 2)};

module.exports = awsmobile;    
    `;
    fs.writeFileSync(awsExportsPath, awsExports);
    // jest is swallowing the custom error thrown and is surfacing the ReferenceError we are attempting to swallow inside getCurrentAWSExports
    expect(configCreator.getCurrentAWSExports(context)).toThrowError('Unable to parse aws-exports.js. Has this file been modified?');
  });
});

describe('generate maps and search configuration', () => {
  function constructMapMeta(mapName, mapStyle, isDefault, region) {
    return {
      service: mapServiceName,
      output: {
        Style: mapStyle,
        Name: mapName,
        Region: region,
      },
      isDefault,
    };
  }

  function constructPlaceIndexMeta(indexName, isDefault, region) {
    return {
      service: placeIndexServiceName,
      output: {
        Name: indexName,
        Region: region,
      },
      isDefault,
    };
  }

  function constructGeofenceCollectionMeta(collectionName, isDefault, region) {
    return {
      service: geofenceCollectionServiceName,
      output: {
        Name: collectionName,
        Region: region,
      },
      isDefault,
    };
  }

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('generates correct configuration for maps and search geo resources without Region CFN output', () => {
    const projectRegion = 'us-west-2';
    const mockGeoResources = {
      serviceResourceMapping: {
        Map: [
          constructMapMeta('map12345', 'VectorEsriStreets', false),
          constructMapMeta('defaultMap12345', 'VectorEsriStreets', true),
        ],
        PlaceIndex: [
          constructPlaceIndexMeta('index12345', false),
          constructPlaceIndexMeta('defaultIndex12345', true),
        ],
        GeofenceCollection: [
          constructGeofenceCollectionMeta('collection12345', false),
          constructGeofenceCollectionMeta('defaultCollection12345', true),
        ],
      },
      metadata: {
        Region: projectRegion,
      },
    };
    const generatedConfig = configCreator.getAWSExportsObject(mockGeoResources);
    expect(generatedConfig.geo.amazon_location_service.region).toEqual(projectRegion);
    expect(generatedConfig).toMatchSnapshot();
  });

  it('does not add any geo configuration if no maps or search is added', () => {
    const mockGeoResources = {
      serviceResourceMapping: {},
      metadata: {
        Region: 'us-west-2',
      },
    };
    const generatedConfig = configCreator.getAWSExportsObject(mockGeoResources);
    expect(generatedConfig.geo).toBeUndefined();
  });

  it('generates correct configuration for maps and search geo resources with Region as CFN output', () => {
    const resourceRegion = 'eu-west-1';
    const projectRegion = 'eu-west-2';
    const mockGeoResources = {
      serviceResourceMapping: {
        Map: [
          constructMapMeta('map12345', 'VectorEsriStreets', false, resourceRegion),
          constructMapMeta('defaultMap12345', 'VectorEsriStreets', true, resourceRegion),
        ],
        PlaceIndex: [
          constructPlaceIndexMeta('index12345', false, resourceRegion),
          constructPlaceIndexMeta('defaultIndex12345', true, resourceRegion),
        ],
        GeofenceCollection: [
          constructGeofenceCollectionMeta('collection12345', false, resourceRegion),
          constructGeofenceCollectionMeta('defaultCollection12345', true, resourceRegion),
        ],
      },
      metadata: {
        Region: projectRegion,
      },
    };
    const generatedConfig = configCreator.getAWSExportsObject(mockGeoResources);
    expect(generatedConfig.geo.amazon_location_service.region).toEqual(resourceRegion);
    expect(generatedConfig).toMatchSnapshot();
  });
});
