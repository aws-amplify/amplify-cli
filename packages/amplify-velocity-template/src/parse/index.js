/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var index = (function() {
  var o = function(k, v, o, l) {
      for (o = o || {}, l = k.length; l--; o[k[l]] = v);
      return o;
    },
    $V0 = [1, 8],
    $V1 = [1, 9],
    $V2 = [1, 20],
    $V3 = [1, 10],
    $V4 = [1, 25],
    $V5 = [1, 26],
    $V6 = [1, 24],
    $V7 = [4, 10, 11, 21, 36, 37, 48, 84],
    $V8 = [1, 30],
    $V9 = [1, 34],
    $Va = [1, 33],
    $Vb = [4, 10, 11, 21, 24, 36, 37, 40, 48, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 84, 86, 96],
    $Vc = [1, 52],
    $Vd = [1, 57],
    $Ve = [1, 58],
    $Vf = [1, 75],
    $Vg = [1, 74],
    $Vh = [1, 87],
    $Vi = [1, 82],
    $Vj = [1, 90],
    $Vk = [1, 98],
    $Vl = [1, 88],
    $Vm = [1, 93],
    $Vn = [1, 97],
    $Vo = [1, 94],
    $Vp = [1, 95],
    $Vq = [4, 10, 11, 21, 24, 36, 37, 40, 48, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 77, 82, 84, 85, 86, 96],
    $Vr = [1, 110],
    $Vs = [1, 124],
    $Vt = [1, 120],
    $Vu = [1, 121],
    $Vv = [1, 135],
    $Vw = [24, 52, 86],
    $Vx = [2, 99],
    $Vy = [24, 40, 51, 52, 86],
    $Vz = [24, 40, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 84, 86],
    $VA = [24, 40, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 84, 86, 98],
    $VB = [2, 112],
    $VC = [24, 40, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 84, 86, 96],
    $VD = [2, 115],
    $VE = [1, 144],
    $VF = [1, 150],
    $VG = [24, 51, 52],
    $VH = [1, 155],
    $VI = [1, 156],
    $VJ = [1, 157],
    $VK = [1, 158],
    $VL = [1, 159],
    $VM = [1, 160],
    $VN = [1, 161],
    $VO = [1, 162],
    $VP = [1, 163],
    $VQ = [1, 164],
    $VR = [1, 165],
    $VS = [1, 166],
    $VT = [1, 167],
    $VU = [24, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68],
    $VV = [52, 86],
    $VW = [2, 116],
    $VX = [24, 36],
    $VY = [1, 218],
    $VZ = [1, 217],
    $V_ = [40, 52],
    $V$ = [24, 56, 57],
    $V01 = [24, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68],
    $V11 = [24, 56, 57, 63, 64, 65, 66, 67, 68];
  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      error: 2,
      root: 3,
      EOF: 4,
      statements: 5,
      statement: 6,
      references: 7,
      directives: 8,
      content: 9,
      RAW: 10,
      COMMENT: 11,
      set: 12,
      return: 13,
      if: 14,
      elseif: 15,
      else: 16,
      end: 17,
      foreach: 18,
      break: 19,
      define: 20,
      HASH: 21,
      NOESCAPE: 22,
      PARENTHESIS: 23,
      CLOSE_PARENTHESIS: 24,
      macro: 25,
      macro_call: 26,
      macro_body: 27,
      SET: 28,
      equal: 29,
      IF: 30,
      expression: 31,
      ELSEIF: 32,
      ELSE: 33,
      END: 34,
      FOREACH: 35,
      DOLLAR: 36,
      ID: 37,
      IN: 38,
      MAP_BEGIN: 39,
      MAP_END: 40,
      array: 41,
      BREAK: 42,
      RETURN: 43,
      DEFINE: 44,
      MACRO: 45,
      macro_args: 46,
      macro_call_args_all: 47,
      MACRO_BODY: 48,
      macro_call_args: 49,
      literals: 50,
      SPACE: 51,
      COMMA: 52,
      EQUAL: 53,
      map: 54,
      math: 55,
      '||': 56,
      '&&': 57,
      '+': 58,
      '-': 59,
      '*': 60,
      '/': 61,
      '%': 62,
      '>': 63,
      '<': 64,
      '==': 65,
      '>=': 66,
      '<=': 67,
      '!=': 68,
      parenthesis: 69,
      '!': 70,
      literal: 71,
      brace_begin: 72,
      attributes: 73,
      brace_end: 74,
      methodbd: 75,
      VAR_BEGIN: 76,
      VAR_END: 77,
      attribute: 78,
      method: 79,
      index: 80,
      property: 81,
      DOT: 82,
      params: 83,
      CONTENT: 84,
      BRACKET: 85,
      CLOSE_BRACKET: 86,
      string: 87,
      number: 88,
      BOOL: 89,
      integer: 90,
      INTEGER: 91,
      DECIMAL_POINT: 92,
      STRING: 93,
      EVAL_STRING: 94,
      range: 95,
      RANGE: 96,
      map_item: 97,
      MAP_SPLIT: 98,
      $accept: 0,
      $end: 1,
    },
    terminals_: {
      2: 'error',
      4: 'EOF',
      10: 'RAW',
      11: 'COMMENT',
      21: 'HASH',
      22: 'NOESCAPE',
      23: 'PARENTHESIS',
      24: 'CLOSE_PARENTHESIS',
      28: 'SET',
      30: 'IF',
      32: 'ELSEIF',
      33: 'ELSE',
      34: 'END',
      35: 'FOREACH',
      36: 'DOLLAR',
      37: 'ID',
      38: 'IN',
      39: 'MAP_BEGIN',
      40: 'MAP_END',
      42: 'BREAK',
      43: 'RETURN',
      44: 'DEFINE',
      45: 'MACRO',
      48: 'MACRO_BODY',
      51: 'SPACE',
      52: 'COMMA',
      53: 'EQUAL',
      56: '||',
      57: '&&',
      58: '+',
      59: '-',
      60: '*',
      61: '/',
      62: '%',
      63: '>',
      64: '<',
      65: '==',
      66: '>=',
      67: '<=',
      68: '!=',
      70: '!',
      76: 'VAR_BEGIN',
      77: 'VAR_END',
      82: 'DOT',
      84: 'CONTENT',
      85: 'BRACKET',
      86: 'CLOSE_BRACKET',
      89: 'BOOL',
      91: 'INTEGER',
      92: 'DECIMAL_POINT',
      93: 'STRING',
      94: 'EVAL_STRING',
      96: 'RANGE',
      98: 'MAP_SPLIT',
    },
    productions_: [
      0,
      [3, 1],
      [3, 2],
      [5, 1],
      [5, 2],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [8, 4],
      [8, 1],
      [8, 1],
      [8, 1],
      [12, 5],
      [14, 5],
      [15, 5],
      [16, 2],
      [17, 2],
      [18, 8],
      [18, 10],
      [18, 8],
      [18, 10],
      [19, 2],
      [13, 5],
      [13, 2],
      [20, 6],
      [25, 6],
      [25, 5],
      [46, 1],
      [46, 2],
      [26, 5],
      [26, 4],
      [27, 5],
      [27, 4],
      [49, 1],
      [49, 1],
      [49, 3],
      [49, 3],
      [49, 3],
      [49, 3],
      [47, 1],
      [47, 2],
      [47, 3],
      [47, 2],
      [29, 3],
      [31, 1],
      [31, 1],
      [31, 1],
      [55, 3],
      [55, 3],
      [55, 3],
      [55, 3],
      [55, 3],
      [55, 3],
      [55, 3],
      [55, 3],
      [55, 3],
      [55, 3],
      [55, 3],
      [55, 3],
      [55, 3],
      [55, 1],
      [55, 2],
      [55, 2],
      [55, 1],
      [55, 1],
      [69, 3],
      [7, 5],
      [7, 3],
      [7, 5],
      [7, 3],
      [7, 2],
      [7, 4],
      [7, 2],
      [7, 4],
      [72, 1],
      [72, 1],
      [74, 1],
      [74, 1],
      [73, 1],
      [73, 2],
      [78, 1],
      [78, 1],
      [78, 1],
      [79, 2],
      [75, 4],
      [75, 3],
      [83, 1],
      [83, 1],
      [83, 1],
      [83, 3],
      [83, 3],
      [81, 2],
      [81, 2],
      [80, 3],
      [80, 3],
      [80, 3],
      [80, 2],
      [80, 2],
      [71, 1],
      [71, 1],
      [71, 1],
      [88, 1],
      [88, 3],
      [88, 4],
      [90, 1],
      [90, 2],
      [87, 1],
      [87, 1],
      [50, 1],
      [50, 1],
      [50, 1],
      [41, 3],
      [41, 1],
      [41, 2],
      [95, 5],
      [95, 5],
      [95, 5],
      [95, 5],
      [54, 3],
      [54, 2],
      [97, 3],
      [97, 3],
      [97, 2],
      [97, 5],
      [97, 5],
      [9, 1],
      [9, 1],
      [9, 2],
      [9, 3],
      [9, 3],
      [9, 2],
    ],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
      /* this == yyval */

      var $0 = $$.length - 1;
      switch (yystate) {
        case 1:
          return [];
          break;
        case 2:
          return $$[$0 - 1];
          break;
        case 3:
        case 38:
        case 44:
        case 45:
        case 89:
        case 97:
        case 99:
          this.$ = [$$[$0]];
          break;
        case 4:
        case 39:
        case 90:
          this.$ = [].concat($$[$0 - 1], $$[$0]);
          break;
        case 5:
          $$[$0]['prue'] = true;
          $$[$0].pos = this._$;
          this.$ = $$[$0];
          break;
        case 6:
          $$[$0].pos = this._$;
          this.$ = $$[$0];
          break;
        case 7:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 20:
        case 21:
        case 22:
        case 50:
        case 51:
        case 55:
        case 56:
        case 57:
        case 71:
        case 74:
        case 75:
        case 85:
        case 86:
        case 87:
        case 88:
        case 94:
        case 102:
        case 109:
        case 110:
        case 115:
        case 121:
        case 123:
        case 136:
        case 137:
          this.$ = $$[$0];
          break;
        case 8:
          this.$ = { type: 'raw', value: $$[$0] };
          break;
        case 9:
          this.$ = { type: 'comment', value: $$[$0] };
          break;
        case 19:
          this.$ = { type: 'noescape' };
          break;
        case 23:
          this.$ = { type: 'set', equal: $$[$0 - 1] };
          break;
        case 24:
          this.$ = { type: 'if', condition: $$[$0 - 1] };
          break;
        case 25:
          this.$ = { type: 'elseif', condition: $$[$0 - 1] };
          break;
        case 26:
          this.$ = { type: 'else' };
          break;
        case 27:
          this.$ = { type: 'end' };
          break;
        case 28:
        case 30:
          this.$ = { type: 'foreach', to: $$[$0 - 3], from: $$[$0 - 1] };
          break;
        case 29:
        case 31:
          this.$ = { type: 'foreach', to: $$[$0 - 4], from: $$[$0 - 1] };
          break;
        case 32:
          this.$ = { type: $$[$0] };
          break;
        case 33:
          this.$ = { type: 'return', value: $$[$0 - 1] };
          break;
        case 34:
          this.$ = { type: 'return', value: null };
          break;
        case 35:
          this.$ = { type: 'define', id: $$[$0 - 1] };
          break;
        case 36:
          this.$ = { type: 'macro', id: $$[$0 - 2], args: $$[$0 - 1] };
          break;
        case 37:
          this.$ = { type: 'macro', id: $$[$0 - 1] };
          break;
        case 40:
          this.$ = { type: 'macro_call', id: $$[$0 - 3].replace(/^\s+|\s+$/g, ''), args: $$[$0 - 1] };
          break;
        case 41:
          this.$ = { type: 'macro_call', id: $$[$0 - 2].replace(/^\s+|\s+$/g, '') };
          break;
        case 42:
          this.$ = { type: 'macro_body', id: $$[$0 - 3], args: $$[$0 - 1] };
          break;
        case 43:
          this.$ = { type: 'macro_body', id: $$[$0 - 2] };
          break;
        case 46:
        case 47:
        case 48:
        case 49:
        case 100:
        case 101:
          this.$ = [].concat($$[$0 - 2], $$[$0]);
          break;
        case 52:
        case 53:
        case 104:
        case 105:
          this.$ = $$[$0 - 1];
          break;
        case 54:
          this.$ = [$$[$0 - 2], $$[$0]];
          break;
        case 58:
          this.$ = { type: 'math', expression: [$$[$0 - 2], $$[$0]], operator: '||' };
          break;
        case 59:
          this.$ = { type: 'math', expression: [$$[$0 - 2], $$[$0]], operator: '&&' };
          break;
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
          this.$ = { type: 'math', expression: [$$[$0 - 2], $$[$0]], operator: $$[$0 - 1] };
          break;
        case 65:
          this.$ = { type: 'math', expression: [$$[$0 - 2], $$[$0]], operator: '>' };
          break;
        case 66:
          this.$ = { type: 'math', expression: [$$[$0 - 2], $$[$0]], operator: '<' };
          break;
        case 67:
          this.$ = { type: 'math', expression: [$$[$0 - 2], $$[$0]], operator: '==' };
          break;
        case 68:
          this.$ = { type: 'math', expression: [$$[$0 - 2], $$[$0]], operator: '>=' };
          break;
        case 69:
          this.$ = { type: 'math', expression: [$$[$0 - 2], $$[$0]], operator: '<=' };
          break;
        case 70:
          this.$ = { type: 'math', expression: [$$[$0 - 2], $$[$0]], operator: '!=' };
          break;
        case 72:
          this.$ = { type: 'math', expression: [$$[$0]], operator: 'minus' };
          break;
        case 73:
          this.$ = { type: 'math', expression: [$$[$0]], operator: 'not' };
          break;
        case 76:
          this.$ = { type: 'math', expression: [$$[$0 - 1]], operator: 'parenthesis' };
          break;
        case 77:
          this.$ = { type: 'references', id: $$[$0 - 2], path: $$[$0 - 1], isWraped: true, leader: $$[$0 - 4] };
          break;
        case 78:
          this.$ = { type: 'references', id: $$[$0 - 1], path: $$[$0], leader: $$[$0 - 2] };
          break;
        case 79:
          this.$ = { type: 'references', id: $$[$0 - 2].id, path: $$[$0 - 1], isWraped: true, leader: $$[$0 - 4], args: $$[$0 - 2].args };
          break;
        case 80:
          this.$ = { type: 'references', id: $$[$0 - 1].id, path: $$[$0], leader: $$[$0 - 2], args: $$[$0 - 1].args };
          break;
        case 81:
          this.$ = { type: 'references', id: $$[$0], leader: $$[$0 - 1] };
          break;
        case 82:
          this.$ = { type: 'references', id: $$[$0 - 1], isWraped: true, leader: $$[$0 - 3] };
          break;
        case 83:
          this.$ = { type: 'references', id: $$[$0].id, leader: $$[$0 - 1], args: $$[$0].args };
          break;
        case 84:
          this.$ = { type: 'references', id: $$[$0 - 1].id, isWraped: true, args: $$[$0 - 1].args, leader: $$[$0 - 3] };
          break;
        case 91:
          this.$ = { type: 'method', id: $$[$0].id, args: $$[$0].args };
          break;
        case 92:
          this.$ = { type: 'index', id: $$[$0] };
          break;
        case 93:
          this.$ = { type: 'property', id: $$[$0] };
          if ($$[$0].type === 'content') this.$ = $$[$0];
          break;
        case 95:
          this.$ = { id: $$[$0 - 3], args: $$[$0 - 1] };
          break;
        case 96:
          this.$ = { id: $$[$0 - 2], args: false };
          break;
        case 98:
          this.$ = [{ type: 'runt', value: $$[$0] }];
          break;
        case 103:
          this.$ = { type: 'content', value: $$[$0 - 1] + $$[$0] };
          break;
        case 106:
          this.$ = { type: 'content', value: $$[$0 - 2] + $$[$0 - 1].value + $$[$0] };
          break;
        case 107:
        case 108:
          this.$ = { type: 'content', value: $$[$0 - 1] + $$[$0] };
          break;
        case 111:
          this.$ = { type: 'bool', value: $$[$0] };
          break;
        case 112:
          this.$ = { type: 'integer', value: $$[$0] };
          break;
        case 113:
          this.$ = { type: 'decimal', value: +($$[$0 - 2] + '.' + $$[$0]) };
          break;
        case 114:
          this.$ = { type: 'decimal', value: -($$[$0 - 2] + '.' + $$[$0]) };
          break;
        case 116:
          this.$ = -parseInt($$[$0], 10);
          break;
        case 117:
          this.$ = { type: 'string', value: $$[$0] };
          break;
        case 118:
          this.$ = { type: 'string', value: $$[$0], isEval: true };
          break;
        case 119:
        case 120:
          this.$ = $$[$0];
          break;
        case 122:
          this.$ = { type: 'array', value: $$[$0 - 1] };
          break;
        case 124:
          this.$ = { type: 'array', value: [] };
          break;
        case 125:
        case 126:
        case 127:
        case 128:
          this.$ = { type: 'array', isRange: true, value: [$$[$0 - 3], $$[$0 - 1]] };
          break;
        case 129:
          this.$ = { type: 'map', value: $$[$0 - 1] };
          break;
        case 130:
          this.$ = { type: 'map' };
          break;
        case 131:
        case 132:
          this.$ = {};
          this.$[$$[$0 - 2].value] = $$[$0];
          break;
        case 133:
          this.$ = {};
          this.$[$$[$0 - 1].value] = $$[$01];
          break;
        case 134:
        case 135:
          this.$ = $$[$0 - 4];
          this.$[$$[$0 - 2].value] = $$[$0];
          break;
        case 138:
        case 141:
          this.$ = $$[$0 - 1] + $$[$0];
          break;
        case 139:
          this.$ = $$[$0 - 2] + $$[$0 - 1] + $$[$0];
          break;
        case 140:
          this.$ = $$[$0 - 2] + $$[$0 - 1];
          break;
      }
    },
    table: [
      {
        3: 1,
        4: [1, 2],
        5: 3,
        6: 4,
        7: 5,
        8: 6,
        9: 7,
        10: $V0,
        11: $V1,
        12: 11,
        13: 12,
        14: 13,
        15: 14,
        16: 15,
        17: 16,
        18: 17,
        19: 18,
        20: 19,
        21: $V2,
        25: 21,
        26: 22,
        27: 23,
        36: $V3,
        37: $V4,
        48: $V5,
        84: $V6,
      },
      { 1: [3] },
      { 1: [2, 1] },
      {
        4: [1, 27],
        6: 28,
        7: 5,
        8: 6,
        9: 7,
        10: $V0,
        11: $V1,
        12: 11,
        13: 12,
        14: 13,
        15: 14,
        16: 15,
        17: 16,
        18: 17,
        19: 18,
        20: 19,
        21: $V2,
        25: 21,
        26: 22,
        27: 23,
        36: $V3,
        37: $V4,
        48: $V5,
        84: $V6,
      },
      o($V7, [2, 3]),
      o($V7, [2, 5]),
      o($V7, [2, 6]),
      o($V7, [2, 7]),
      o($V7, [2, 8]),
      o($V7, [2, 9]),
      { 37: $V8, 39: $V9, 72: 29, 75: 31, 76: $Va, 84: [1, 32] },
      o($V7, [2, 10]),
      o($V7, [2, 11]),
      o($V7, [2, 12]),
      o($V7, [2, 13]),
      o($V7, [2, 14]),
      o($V7, [2, 15]),
      o($V7, [2, 16]),
      o($V7, [2, 17]),
      o($V7, [2, 18]),
      {
        22: [1, 35],
        28: [1, 38],
        30: [1, 40],
        32: [1, 41],
        33: [1, 42],
        34: [1, 43],
        35: [1, 44],
        37: [1, 37],
        42: [1, 45],
        43: [1, 39],
        44: [1, 46],
        45: [1, 47],
        84: [1, 36],
      },
      o($V7, [2, 20]),
      o($V7, [2, 21]),
      o($V7, [2, 22]),
      o($V7, [2, 136]),
      o($V7, [2, 137]),
      { 37: [1, 48] },
      { 1: [2, 2] },
      o($V7, [2, 4]),
      { 37: [1, 49], 75: 50 },
      o($Vb, [2, 81], { 73: 51, 78: 53, 79: 54, 80: 55, 81: 56, 23: $Vc, 82: $Vd, 85: $Ve }),
      o($Vb, [2, 83], { 78: 53, 79: 54, 80: 55, 81: 56, 73: 59, 82: $Vd, 85: $Ve }),
      o($V7, [2, 141]),
      { 37: [2, 85] },
      { 37: [2, 86] },
      { 23: [1, 60] },
      o($V7, [2, 138]),
      { 4: [1, 62], 23: [1, 63], 84: [1, 61] },
      { 23: [1, 64] },
      o($V7, [2, 34], { 23: [1, 65] }),
      { 23: [1, 66] },
      { 23: [1, 67] },
      o($V7, [2, 26]),
      o($V7, [2, 27]),
      { 23: [1, 68] },
      o($V7, [2, 32]),
      { 23: [1, 69] },
      { 23: [1, 70] },
      { 23: [1, 71] },
      { 23: $Vc, 40: $Vf, 73: 72, 74: 73, 77: $Vg, 78: 53, 79: 54, 80: 55, 81: 56, 82: $Vd, 85: $Ve },
      { 40: $Vf, 73: 76, 74: 77, 77: $Vg, 78: 53, 79: 54, 80: 55, 81: 56, 82: $Vd, 85: $Ve },
      o($Vb, [2, 78], { 79: 54, 80: 55, 81: 56, 78: 78, 82: $Vd, 85: $Ve }),
      {
        7: 83,
        24: [1, 80],
        36: $Vh,
        37: $Vi,
        39: $Vj,
        41: 84,
        50: 81,
        54: 85,
        59: $Vk,
        71: 86,
        83: 79,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      o($Vq, [2, 89]),
      o($Vq, [2, 91]),
      o($Vq, [2, 92]),
      o($Vq, [2, 93]),
      { 37: [1, 100], 75: 99, 84: [1, 101] },
      { 7: 103, 36: $Vh, 59: $Vk, 71: 102, 84: [1, 104], 86: [1, 105], 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      o($Vb, [2, 80], { 79: 54, 80: 55, 81: 56, 78: 78, 82: $Vd, 85: $Ve }),
      { 24: [1, 106] },
      o($V7, [2, 139]),
      o($V7, [2, 140]),
      {
        7: 112,
        24: [1, 108],
        36: $Vh,
        39: $Vj,
        41: 84,
        47: 107,
        49: 109,
        50: 111,
        51: $Vr,
        54: 85,
        59: $Vk,
        71: 86,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      { 7: 114, 29: 113, 36: $Vh },
      {
        7: 122,
        23: $Vs,
        31: 115,
        36: $Vh,
        39: $Vj,
        41: 116,
        54: 117,
        55: 118,
        59: $Vt,
        69: 119,
        70: $Vu,
        71: 123,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      {
        7: 122,
        23: $Vs,
        31: 125,
        36: $Vh,
        39: $Vj,
        41: 116,
        54: 117,
        55: 118,
        59: $Vt,
        69: 119,
        70: $Vu,
        71: 123,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      {
        7: 122,
        23: $Vs,
        31: 126,
        36: $Vh,
        39: $Vj,
        41: 116,
        54: 117,
        55: 118,
        59: $Vt,
        69: 119,
        70: $Vu,
        71: 123,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      { 36: [1, 127] },
      { 36: [1, 128] },
      { 37: [1, 129] },
      {
        7: 112,
        24: [1, 131],
        36: $Vh,
        39: $Vj,
        41: 84,
        47: 130,
        49: 109,
        50: 111,
        51: $Vr,
        54: 85,
        59: $Vk,
        71: 86,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      { 40: $Vf, 74: 132, 77: $Vg, 78: 78, 79: 54, 80: 55, 81: 56, 82: $Vd, 85: $Ve },
      o($Vb, [2, 82]),
      o($Vb, [2, 87]),
      o($Vb, [2, 88]),
      { 40: $Vf, 74: 133, 77: $Vg, 78: 78, 79: 54, 80: 55, 81: 56, 82: $Vd, 85: $Ve },
      o($Vb, [2, 84]),
      o($Vq, [2, 90]),
      { 24: [1, 134], 52: $Vv },
      o($Vq, [2, 96]),
      o($Vw, [2, 97]),
      o($Vw, [2, 98]),
      o([24, 52], $Vx),
      o($Vy, [2, 119]),
      o($Vy, [2, 120]),
      o($Vy, [2, 121]),
      { 37: $V8, 39: $V9, 72: 29, 75: 31, 76: $Va },
      {
        7: 139,
        36: $Vh,
        37: $Vi,
        39: $Vj,
        41: 84,
        50: 81,
        54: 85,
        59: $Vk,
        71: 86,
        83: 136,
        85: $Vl,
        86: [1, 137],
        87: 91,
        88: 92,
        89: $Vm,
        90: 138,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      o($Vy, [2, 123]),
      { 40: [1, 141], 87: 142, 93: $Vo, 94: $Vp, 97: 140 },
      o($Vz, [2, 109]),
      o($Vz, [2, 110]),
      o($Vz, [2, 111]),
      o($VA, [2, 117]),
      o($VA, [2, 118]),
      o($Vz, $VB),
      o($VC, $VD, { 92: [1, 143] }),
      { 91: $VE },
      o($Vq, [2, 94]),
      o($Vq, [2, 102], { 23: $Vc }),
      o($Vq, [2, 103]),
      { 84: [1, 146], 86: [1, 145] },
      { 86: [1, 147] },
      o($Vq, [2, 107]),
      o($Vq, [2, 108]),
      o($V7, [2, 19]),
      { 24: [1, 148] },
      o($V7, [2, 41]),
      { 24: [2, 50], 51: [1, 149], 52: $VF },
      {
        7: 112,
        36: $Vh,
        39: $Vj,
        41: 84,
        49: 151,
        50: 111,
        54: 85,
        59: $Vk,
        71: 86,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      o($VG, [2, 44]),
      o($VG, [2, 45]),
      { 24: [1, 152] },
      { 53: [1, 153] },
      { 24: [1, 154] },
      { 24: [2, 55] },
      { 24: [2, 56] },
      { 24: [2, 57], 56: $VH, 57: $VI, 58: $VJ, 59: $VK, 60: $VL, 61: $VM, 62: $VN, 63: $VO, 64: $VP, 65: $VQ, 66: $VR, 67: $VS, 68: $VT },
      o($VU, [2, 71]),
      { 23: $Vs, 69: 168, 91: $VE },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 169, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      o($VU, [2, 74]),
      o($VU, [2, 75]),
      { 7: 122, 23: $Vs, 36: $Vh, 55: 170, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 24: [1, 171] },
      { 24: [1, 172] },
      { 37: [1, 173], 39: [1, 174] },
      { 37: [1, 175] },
      { 7: 178, 24: [1, 177], 36: $Vh, 46: 176 },
      { 24: [1, 179] },
      o($V7, [2, 43]),
      o($Vb, [2, 77]),
      o($Vb, [2, 79]),
      o($Vq, [2, 95]),
      {
        7: 181,
        36: $Vh,
        39: $Vj,
        41: 84,
        50: 180,
        54: 85,
        59: $Vk,
        71: 86,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      { 52: $Vv, 86: [1, 182] },
      o($Vy, [2, 124]),
      o($VV, $VB, { 96: [1, 183] }),
      o($VV, $Vx, { 96: [1, 184] }),
      { 40: [1, 185], 52: [1, 186] },
      o($Vy, [2, 130]),
      { 98: [1, 187] },
      { 91: [1, 188] },
      o($VC, $VW, { 92: [1, 189] }),
      o($Vq, [2, 104]),
      o($Vq, [2, 106]),
      o($Vq, [2, 105]),
      o($V7, [2, 40]),
      {
        7: 191,
        24: [2, 53],
        36: $Vh,
        39: $Vj,
        41: 84,
        50: 190,
        54: 85,
        59: $Vk,
        71: 86,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      {
        7: 193,
        36: $Vh,
        39: $Vj,
        41: 84,
        50: 192,
        54: 85,
        59: $Vk,
        71: 86,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      { 24: [2, 51], 51: [1, 194], 52: $VF },
      o($V7, [2, 23]),
      {
        7: 122,
        23: $Vs,
        31: 195,
        36: $Vh,
        39: $Vj,
        41: 116,
        54: 117,
        55: 118,
        59: $Vt,
        69: 119,
        70: $Vu,
        71: 123,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      o($V7, [2, 33]),
      { 7: 122, 23: $Vs, 36: $Vh, 55: 196, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 197, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 198, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 199, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 200, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 201, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 202, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 203, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 204, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 205, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 206, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 207, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      { 7: 122, 23: $Vs, 36: $Vh, 55: 208, 59: $Vt, 69: 119, 70: $Vu, 71: 123, 87: 91, 88: 92, 89: $Vm, 90: 96, 91: $Vn, 93: $Vo, 94: $Vp },
      o($VU, [2, 72]),
      o($VU, [2, 73]),
      { 24: [1, 209], 56: $VH, 57: $VI, 58: $VJ, 59: $VK, 60: $VL, 61: $VM, 62: $VN, 63: $VO, 64: $VP, 65: $VQ, 66: $VR, 67: $VS, 68: $VT },
      o($V7, [2, 24]),
      o($V7, [2, 25]),
      { 38: [1, 210] },
      { 37: [1, 211] },
      { 24: [1, 212] },
      { 7: 214, 24: [1, 213], 36: $Vh },
      o($V7, [2, 37]),
      o($VX, [2, 38]),
      o($V7, [2, 42]),
      o($Vw, [2, 100]),
      o($Vw, [2, 101]),
      o($Vy, [2, 122]),
      { 7: 216, 36: $Vh, 59: $VY, 90: 215, 91: $VZ },
      { 7: 220, 36: $Vh, 59: $VY, 90: 219, 91: $VZ },
      o($Vy, [2, 129]),
      { 87: 221, 93: $Vo, 94: $Vp },
      o($V_, [2, 133], {
        41: 84,
        54: 85,
        71: 86,
        95: 89,
        87: 91,
        88: 92,
        90: 96,
        50: 222,
        7: 223,
        36: $Vh,
        39: $Vj,
        59: $Vk,
        85: $Vl,
        89: $Vm,
        91: $Vn,
        93: $Vo,
        94: $Vp,
      }),
      o($Vz, [2, 113]),
      { 91: [1, 224] },
      o($VG, [2, 46]),
      o($VG, [2, 49]),
      o($VG, [2, 47]),
      o($VG, [2, 48]),
      {
        7: 191,
        24: [2, 52],
        36: $Vh,
        39: $Vj,
        41: 84,
        50: 190,
        54: 85,
        59: $Vk,
        71: 86,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      { 24: [2, 54] },
      o($V$, [2, 58], { 58: $VJ, 59: $VK, 60: $VL, 61: $VM, 62: $VN, 63: $VO, 64: $VP, 65: $VQ, 66: $VR, 67: $VS, 68: $VT }),
      o($V$, [2, 59], { 58: $VJ, 59: $VK, 60: $VL, 61: $VM, 62: $VN, 63: $VO, 64: $VP, 65: $VQ, 66: $VR, 67: $VS, 68: $VT }),
      o($V01, [2, 60], { 60: $VL, 61: $VM, 62: $VN }),
      o($V01, [2, 61], { 60: $VL, 61: $VM, 62: $VN }),
      o($VU, [2, 62]),
      o($VU, [2, 63]),
      o($VU, [2, 64]),
      o($V11, [2, 65], { 58: $VJ, 59: $VK, 60: $VL, 61: $VM, 62: $VN }),
      o($V11, [2, 66], { 58: $VJ, 59: $VK, 60: $VL, 61: $VM, 62: $VN }),
      o($V11, [2, 67], { 58: $VJ, 59: $VK, 60: $VL, 61: $VM, 62: $VN }),
      o($V11, [2, 68], { 58: $VJ, 59: $VK, 60: $VL, 61: $VM, 62: $VN }),
      o($V11, [2, 69], { 58: $VJ, 59: $VK, 60: $VL, 61: $VM, 62: $VN }),
      o($V11, [2, 70], { 58: $VJ, 59: $VK, 60: $VL, 61: $VM, 62: $VN }),
      o($VU, [2, 76]),
      { 7: 225, 36: $Vh, 41: 226, 85: $Vl, 95: 89 },
      { 40: [1, 227] },
      o($V7, [2, 35]),
      o($V7, [2, 36]),
      o($VX, [2, 39]),
      { 86: [1, 228] },
      { 86: [1, 229] },
      { 86: $VD },
      { 91: [1, 230] },
      { 86: [1, 231] },
      { 86: [1, 232] },
      { 98: [1, 233] },
      o($V_, [2, 131]),
      o($V_, [2, 132]),
      o($Vz, [2, 114]),
      { 24: [1, 234] },
      { 24: [1, 235] },
      { 38: [1, 236] },
      o($Vy, [2, 125]),
      o($Vy, [2, 127]),
      { 86: $VW },
      o($Vy, [2, 126]),
      o($Vy, [2, 128]),
      {
        7: 237,
        36: $Vh,
        39: $Vj,
        41: 84,
        50: 238,
        54: 85,
        59: $Vk,
        71: 86,
        85: $Vl,
        87: 91,
        88: 92,
        89: $Vm,
        90: 96,
        91: $Vn,
        93: $Vo,
        94: $Vp,
        95: 89,
      },
      o($V7, [2, 28]),
      o($V7, [2, 30]),
      { 7: 239, 36: $Vh, 41: 240, 85: $Vl, 95: 89 },
      o($V_, [2, 134]),
      o($V_, [2, 135]),
      { 24: [1, 241] },
      { 24: [1, 242] },
      o($V7, [2, 29]),
      o($V7, [2, 31]),
    ],
    defaultActions: {
      2: [2, 1],
      27: [2, 2],
      33: [2, 85],
      34: [2, 86],
      116: [2, 55],
      117: [2, 56],
      195: [2, 54],
      217: [2, 115],
      230: [2, 116],
    },
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
        stack = [0],
        tstack = [],
        vstack = [null],
        lstack = [],
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;
      var args = lstack.slice.call(arguments, 1);
      var lexer = Object.create(this.lexer);
      var sharedState = { yy: {} };
      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }
      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;
      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }
      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }
      _token_stack: var lex = function() {
        var token;
        token = lexer.lex() || EOF;
        if (typeof token !== 'number') {
          token = self.symbols_[token] || token;
        }
        return token;
      };
      var symbol,
        preErrorSymbol,
        state,
        action,
        a,
        r,
        yyval = {},
        p,
        len,
        newState,
        expected;
      while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          }
          action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
          var errStr = '';
          expected = [];
          for (p in table[state]) {
            if (this.terminals_[p] && p > TERROR) {
              expected.push("'" + this.terminals_[p] + "'");
            }
          }
          if (lexer.showPosition) {
            errStr =
              'Parse error on line ' +
              (yylineno + 1) +
              ':\n' +
              lexer.showPosition() +
              '\nExpecting ' +
              expected.join(', ') +
              ", got '" +
              (this.terminals_[symbol] || symbol) +
              "'";
          } else {
            errStr =
              'Parse error on line ' +
              (yylineno + 1) +
              ': Unexpected ' +
              (symbol == EOF ? 'end of input' : "'" + (this.terminals_[symbol] || symbol) + "'");
          }
          this.parseError(errStr, {
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            line: lexer.yylineno,
            loc: yyloc,
            expected: expected,
          });
        }
        if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
          case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              if (recovering > 0) {
                recovering--;
              }
            } else {
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }
            break;
          case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column,
            };
            if (ranges) {
              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
            if (typeof r !== 'undefined') {
              return r;
            }
            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
          case 3:
            return true;
        }
      }
      return true;
    },
  };
  /* generated by jison-lex 0.3.4 */
  var lexer = (function() {
    var lexer = {
      EOF: 1,

      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },

      // resets the lexer, sets new input
      setInput: function(input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0,
        };
        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
      },

      // consumes and returns one char from the input
      input: function() {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }
        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },

      // unshifts one char (or a string) into the input
      unput: function(ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines
            ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) +
              oldLines[oldLines.length - lines.length].length -
              lines[0].length
            : this.yylloc.first_column - len,
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
      },

      // When called from action, caches matched text and appends it on next action
      more: function() {
        this._more = true;
        return this;
      },

      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function() {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError(
            'Lexical error on line ' +
              (this.yylineno + 1) +
              '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' +
              this.showPosition(),
            {
              text: '',
              token: null,
              line: this.yylineno,
            },
          );
        }
        return this;
      },

      // retain first n characters of the match
      less: function(n) {
        this.unput(this.match.slice(n));
      },

      // displays already matched input, i.e. for error messages
      pastInput: function() {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, '');
      },

      // displays upcoming input, i.e. for error messages
      upcomingInput: function() {
        var next = this.match;
        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, '');
      },

      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function() {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput() + '\n' + c + '^';
      },

      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function(match, indexed_rule) {
        var token, lines, backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column,
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done,
          };
          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno += lines.length;
        }
        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines
            ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length
            : this.yylloc.last_column + match[0].length,
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
          this.yylloc.range = [this.offset, (this.offset += this.yyleng)];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
          this.done = false;
        }
        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
      },

      // return next match in input
      next: function() {
        if (this.done) {
          return this.EOF;
        }
        if (!this._input) {
          this.done = true;
        }

        var token, match, tempMatch, index;
        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;
            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);
              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }
        if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
            return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
        }
        if (this._input === '') {
          return this.EOF;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
            text: '',
            token: null,
            line: this.yylineno,
          });
        }
      },

      // return next match that has a token
      lex: function lex() {
        var r = this.next();
        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },

      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },

      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },

      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions['INITIAL'].rules;
        }
      },

      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return 'INITIAL';
        }
      },

      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },

      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: {},
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
          case 0:
            var _reg = /\\+$/;
            var _esc = yy_.yytext.match(_reg);
            var _num = _esc ? _esc[0].length : null;
            /*转义实现，非常恶心，暂时没有好的解决方案*/
            if (!_num || !(_num % 2)) {
              this.begin('mu');
            } else {
              yy_.yytext = yy_.yytext.replace(/\\$/, '');
              this.begin('esc');
            }
            if (_num > 1) yy_.yytext = yy_.yytext.replace(/(\\\\)+$/, '\\');
            if (yy_.yytext) return 84;

            break;
          case 1:
            var _reg = /\\+$/;
            var _esc = yy_.yytext.match(_reg);
            var _num = _esc ? _esc[0].length : null;
            if (!_num || !(_num % 2)) {
              this.begin('h');
            } else {
              yy_.yytext = yy_.yytext.replace(/\\$/, '');
              this.begin('esc');
            }
            if (_num > 1) yy_.yytext = yy_.yytext.replace(/(\\\\)+$/, '\\');
            if (yy_.yytext) return 84;

            break;
          case 2:
            return 84;
            break;
          case 3:
            this.popState();
            return 11;
            break;
          case 4:
            this.popState();
            yy_.yytext = yy_.yytext.replace(/^#\[\[|\]\]#$/g, '');
            return 10;
            break;
          case 5:
            this.popState();
            return 11;
            break;
          case 6:
            return 48;
            break;
          case 7:
            return 21;
            break;
          case 8:
            return 28;
            break;
          case 9:
            return 30;
            break;
          case 10:
            return 32;
            break;
          case 11:
            this.popState();
            return 33;
            break;
          case 12:
            this.popState();
            return 33;
            break;
          case 13:
            this.popState();
            return 34;
            break;
          case 14:
            this.popState();
            return 34;
            break;
          case 15:
            this.popState();
            return 42;
            break;
          case 16:
            return 43;
            break;
          case 17:
            return 35;
            break;
          case 18:
            return 22;
            break;
          case 19:
            return 44;
            break;
          case 20:
            return 45;
            break;
          case 21:
            return 38;
            break;
          case 22:
            return yy_.yytext;
            break;
          case 23:
            return yy_.yytext;
            break;
          case 24:
            return yy_.yytext;
            break;
          case 25:
            return yy_.yytext;
            break;
          case 26:
            return yy_.yytext;
            break;
          case 27:
            return yy_.yytext;
            break;
          case 28:
            return yy_.yytext;
            break;
          case 29:
            return yy_.yytext;
            break;
          case 30:
            return 56;
            break;
          case 31:
            return yy_.yytext;
            break;
          case 32:
            return 57;
            break;
          case 33:
            return yy_.yytext;
            break;
          case 34:
            return 70;
            break;
          case 35:
            return 36;
            break;
          case 36:
            return 36;
            break;
          case 37:
            return yy_.yytext;
            break;
          case 38:
            return 53;
            break;
          case 39:
            var len = this.stateStackSize();
            if (len >= 2 && this.topState() === 'c' && this.topState(1) === 'run') {
              return 51;
            }

            break;
          case 40 /*ignore whitespace*/:
            break;
          case 41:
            return 39;
            break;
          case 42:
            return 40;
            break;
          case 43:
            return 98;
            break;
          case 44:
            yy.begin = true;
            return 76;
            break;
          case 45:
            this.popState();
            if (yy.begin === true) {
              yy.begin = false;
              return 77;
            } else {
              return 84;
            }
            break;
          case 46:
            this.begin('c');
            return 23;
            break;
          case 47:
            if (this.popState() === 'c') {
              var len = this.stateStackSize();

              if (this.topState() === 'run') {
                this.popState();
                len = len - 1;
              }

              var tailStack = this.topState(len - 2);
              /** 遇到#set(a = b)括号结束后结束状态h*/
              if (len === 2 && tailStack === 'h') {
                this.popState();
              } else if (len === 3 && tailStack === 'mu' && this.topState(len - 3) === 'h') {
                // issue#7 $foo#if($a)...#end
                this.popState();
                this.popState();
              }

              return 24;
            } else {
              return 84;
            }

            break;
          case 48:
            this.begin('i');
            return 85;
            break;
          case 49:
            if (this.popState() === 'i') {
              return 86;
            } else {
              return 84;
            }

            break;
          case 50:
            return 96;
            break;
          case 51:
            return 82;
            break;
          case 52:
            return 92;
            break;
          case 53:
            return 52;
            break;
          case 54:
            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2).replace(/\\"/g, '"');
            return 94;
            break;
          case 55:
            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2).replace(/\\'/g, "'");
            return 93;
            break;
          case 56:
            return 89;
            break;
          case 57:
            return 89;
            break;
          case 58:
            return 89;
            break;
          case 59:
            return 91;
            break;
          case 60:
            /* return ID */ return 37;
            break;
          case 61:
            this.begin('run');
            return 37;
            break;
          case 62:
            this.popState();
            yy_.yytext = '#';
            return 84;
            break;
          case 63:
            this.begin('h');
            return 21;
            break;
          case 64:
            this.popState();
            return 84;
            break;
          case 65:
            this.popState();
            return 84;
            break;
          case 66:
            this.popState();
            return 84;
            break;
          case 67:
            this.popState();
            return 4;
            break;
          case 68:
            return 4;
            break;
        }
      },
      rules: [
        /^(?:[^#]*?(?=\$))/,
        /^(?:[^\$]*?(?=#))/,
        /^(?:[^\x00]+)/,
        /^(?:#\*[\s\S]+?\*#)/,
        /^(?:#\[\[[\s\S]+?\]\]#)/,
        /^(?:##[^\n]*)/,
        /^(?:#@)/,
        /^(?:#(?=[a-zA-Z{]))/,
        /^(?:set[ ]*(?=[^a-zA-Z0-9_]+))/,
        /^(?:if[ ]*(?=[^a-zA-Z0-9_]+))/,
        /^(?:elseif[ ]*(?=[^a-zA-Z0-9_]+))/,
        /^(?:else\b)/,
        /^(?:\{else\})/,
        /^(?:end\b)/,
        /^(?:\{end\})/,
        /^(?:break\b)/,
        /^(?:return[ ]*(?=[^a-zA-Z0-9_]+))/,
        /^(?:foreach[ ]*(?=[^a-zA-Z0-9_]+))/,
        /^(?:noescape(?=[^a-zA-Z0-9_]+))/,
        /^(?:define[ ]*(?=[^a-zA-Z0-9_]+))/,
        /^(?:macro[ ]*(?=[^a-zA-Z0-9_]+))/,
        /^(?:in\b)/,
        /^(?:[%\+\-\*/])/,
        /^(?:<=)/,
        /^(?:>=)/,
        /^(?:[><])/,
        /^(?:==)/,
        /^(?:>)/,
        /^(?:<)/,
        /^(?:\|\|)/,
        /^(?:or\b)/,
        /^(?:&&)/,
        /^(?:and\b)/,
        /^(?:!=)/,
        /^(?:not\b)/,
        /^(?:\$!(?=[{a-zA-Z_]))/,
        /^(?:\$(?=[{a-zA-Z_]))/,
        /^(?:!)/,
        /^(?:=)/,
        /^(?:[ ]+(?=[^,]))/,
        /^(?:\s+)/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?::[\s]*)/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:\([\s]*(?=[$'"\[\{\-0-9\w()!]))/,
        /^(?:\))/,
        /^(?:\[[\s]*(?=[\-$"'0-9{\[\]]+))/,
        /^(?:\])/,
        /^(?:\.\.)/,
        /^(?:\.(?=[a-zA-Z_]))/,
        /^(?:\.(?=[\d]))/,
        /^(?:,[ ]*)/,
        /^(?:"(\\"|[^\"])*")/,
        /^(?:'(\\'|[^\'])*')/,
        /^(?:null\b)/,
        /^(?:false\b)/,
        /^(?:true\b)/,
        /^(?:[0-9]+)/,
        /^(?:[_a-zA-Z][a-zA-Z0-9_-]*)/,
        /^(?:[_a-zA-Z][a-zA-Z0-9_\-]*[ ]*(?=\())/,
        /^(?:\\#)/,
        /^(?:#)/,
        /^(?:.)/,
        /^(?:\s+)/,
        /^(?:[\$#])/,
        /^(?:$)/,
        /^(?:$)/,
      ],
      conditions: {
        mu: { rules: [5, 35, 36, 44, 45, 46, 47, 48, 49, 51, 60, 62, 63, 64, 65, 67], inclusive: false },
        c: {
          rules: [
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            46,
            47,
            48,
            49,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
          ],
          inclusive: false,
        },
        i: {
          rules: [
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            40,
            41,
            41,
            42,
            42,
            43,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
          ],
          inclusive: false,
        },
        h: {
          rules: [
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            35,
            36,
            37,
            38,
            43,
            46,
            47,
            48,
            49,
            51,
            59,
            61,
            62,
            64,
            65,
            67,
          ],
          inclusive: false,
        },
        esc: { rules: [66], inclusive: false },
        run: {
          rules: [35, 36, 37, 39, 40, 41, 42, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 67],
          inclusive: false,
        },
        INITIAL: { rules: [0, 1, 2, 68], inclusive: true },
      },
    };
    return lexer;
  })();
  parser.lexer = lexer;
  function Parser() {
    this.yy = {};
  }
  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser();
})();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = index;
  exports.Parser = index.Parser;
  exports.parse = function() {
    return index.parse.apply(index, arguments);
  };
  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log('Usage: ' + args[0] + ' FILE');
      process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), 'utf8');
    return exports.parser.parse(source);
  };
  if (typeof module !== 'undefined' && require.main === module) {
    exports.main(process.argv.slice(1));
  }
}
