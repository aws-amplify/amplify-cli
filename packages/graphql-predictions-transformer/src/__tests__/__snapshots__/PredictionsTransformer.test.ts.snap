// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lambda function is added to pipeline when lambda dependent action is added 1`] = `
"type Query {
  speakTranslatedText(input: SpeakTranslatedTextInput!): String
}

input SpeakTranslatedTextTranslateTextInput {
  sourceLanguage: String!
  targetLanguage: String!
  text: String!
}

input SpeakTranslatedTextConvertTextToSpeechInput {
  voiceID: String!
}

input SpeakTranslatedTextInput {
  translateText: SpeakTranslatedTextTranslateTextInput!
  convertTextToSpeech: SpeakTranslatedTextConvertTextToSpeechInput!
}
"
`;

exports[`return type is a list based on the action 1`] = `
"type Query {
  translateLabels(input: TranslateLabelsInput!): [String]
}

input TranslateLabelsIdentifyLabelsInput {
  key: String!
}

input TranslateLabelsTranslateTextInput {
  sourceLanguage: String!
  targetLanguage: String!
}

input TranslateLabelsInput {
  identifyLabels: TranslateLabelsIdentifyLabelsInput!
  translateText: TranslateLabelsTranslateTextInput!
}
"
`;

exports[`snapshot test to check generated function resolvers 1`] = `
Object {
  "DependsOn": Array [],
  "Properties": Object {
    "ApiId": Object {
      "Ref": "AppSyncApiId",
    },
    "FieldName": "speakTranslatedImageText",
    "Kind": "PIPELINE",
    "PipelineConfig": Object {
      "Functions": Array [
        Object {
          "Fn::GetAtt": Array [
            "identifyTextFunction",
            "FunctionId",
          ],
        },
        Object {
          "Fn::GetAtt": Array [
            "translateTextFunction",
            "FunctionId",
          ],
        },
        Object {
          "Fn::GetAtt": Array [
            "convertTextToSpeechFunction",
            "FunctionId",
          ],
        },
      ],
    },
    "RequestMappingTemplate": Object {
      "Fn::Join": Array [
        "
",
        Array [
          Object {
            "Fn::If": Array [
              "HasEnvironmentParameter",
              Object {
                "Fn::Sub": Array [
                  "$util.qr($ctx.stash.put(\\"s3Bucket\\", \\"myStorage\${hash}-\${env}\\"))",
                  Object {
                    "env": Object {
                      "Ref": "env",
                    },
                    "hash": Object {
                      "Fn::Select": Array [
                        3,
                        Object {
                          "Fn::Split": Array [
                            "-",
                            Object {
                              "Ref": "AWS::StackName",
                            },
                          ],
                        },
                      ],
                    },
                  },
                ],
              },
              Object {
                "Fn::Sub": Array [
                  "$util.qr($ctx.stash.put(\\"s3Bucket\\", \\"myStorage\${hash}\\"))",
                  Object {
                    "hash": Object {
                      "Fn::Select": Array [
                        3,
                        Object {
                          "Fn::Split": Array [
                            "-",
                            Object {
                              "Ref": "AWS::StackName",
                            },
                          ],
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
          "$util.qr($ctx.stash.put(\\"isList\\", false))
{}",
        ],
      ],
    },
    "ResponseMappingTemplate": "## If the result is a list return the result as a list **
#if( $ctx.stash.get(\\"isList\\") )
  #set( $result = $ctx.result.split(\\"[ ,]+\\") )
  $util.toJson($result)
#else
  $util.toJson($ctx.result)
#end",
    "TypeName": "Query",
  },
  "Type": "AWS::AppSync::Resolver",
}
`;

exports[`snapshot test to check generated function resolvers 2`] = `
"#set( $bucketName = $ctx.stash.get(\\"s3Bucket\\") )
$util.qr($ctx.stash.put(\\"isList\\", false))
#set( $text = $util.defaultIfNull($ctx.args.input.convertTextToSpeech.text, $ctx.prev.result) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson({
  \\"uuid\\": \\"$util.autoId()\\",
  \\"action\\": \\"convertTextToSpeech\\",
  \\"voiceID\\": $ctx.args.input.convertTextToSpeech.voiceID,
  \\"text\\": $text
})
}"
`;

exports[`snapshot test to check generated function resolvers 3`] = `
"#set( $bucketName = $ctx.stash.get(\\"s3Bucket\\") )
#set( $identityTextKey = $ctx.args.input.identifyText.key )
#set( $identifyTextPayload = {
  \\"version\\": \\"2018-05-29\\",
  \\"method\\": \\"POST\\",
  \\"resourcePath\\": \\"/\\",
  \\"params\\": {
      \\"body\\": {
          \\"Image\\": {
              \\"S3Object\\": {
                  \\"Bucket\\": \\"$bucketName\\",
                  \\"Name\\": \\"public/$identityTextKey\\"
        }
      }
    },
      \\"headers\\": {
          \\"Content-Type\\": \\"application/x-amz-json-1.1\\",
          \\"X-Amz-Target\\": \\"RekognitionService.DetectText\\"
    }
  }
} )
$util.toJson($identifyTextPayload)"
`;

exports[`snapshot test to check generated function resolvers 4`] = `
"#set( $text = $util.defaultIfNull($ctx.args.input.translateText.text, $ctx.prev.result) )
#set( $translateTextPayload = {
  \\"version\\": \\"2018-05-29\\",
  \\"method\\": \\"POST\\",
  \\"resourcePath\\": \\"/\\",
  \\"params\\": {
      \\"body\\": {
          \\"SourceLanguageCode\\": $ctx.args.input.translateText.sourceLanguage,
          \\"TargetLanguageCode\\": $ctx.args.input.translateText.targetLanguage,
          \\"Text\\": $text
    },
      \\"headers\\": {
          \\"Content-Type\\": \\"application/x-amz-json-1.1\\",
          \\"X-Amz-Target\\": \\"AWSShineFrontendService_20170701.TranslateText\\"
    }
  }
} )
$util.toJson($translateTextPayload)"
`;
