// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`owner based @auth owner field where the field is a list 1`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )
#set( $isAuthorized = false )
#set( $allowedFields = [] )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $ownerEntity0 = $util.defaultIfNull($ctx.args.input.editors, null) )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #set( $currentClaim1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #set( $ownerClaim0 = \\"$ownerClaim0::$currentClaim1\\" )
    #set( $ownerClaimsList0 = [] )
    $util.qr($ownerClaimsList0.add($util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\")))
    $util.qr($ownerClaimsList0.add($util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\"))))
    #set( $ownerAllowedFields0 = [\\"id\\",\\"title\\",\\"editors\\",\\"createdAt\\",\\"updatedAt\\"] )
    #set( $isAuthorizedOnAllFields0 = true )
    #foreach( $allowedOwner in $ownerEntity0 )
      #if( $allowedOwner == $ownerClaim0 || $ownerClaimsList0.contains($ownerEntity0) )
        #if( $isAuthorizedOnAllFields0 )
          #set( $isAuthorized = true )
          #break
        #else
          $util.qr($allowedFields.addAll($ownerAllowedFields0))
        #end
      #end
    #end
    #if( $util.isNull($ownerEntity0) && !$ctx.args.input.containsKey(\\"editors\\") )
      $util.qr($ctx.args.input.put(\\"editors\\", [$ownerClaim0]))
      #if( $isAuthorizedOnAllFields0 )
        #set( $isAuthorized = true )
      #else
        $util.qr($allowedFields.addAll($ownerAllowedFields0))
      #end
    #end
  #end
#end
#if( !$isAuthorized && $allowedFields.isEmpty() )
$util.unauthorized()
#end
#if( !$isAuthorized )
  #set( $deniedFields = $util.list.copyAndRemoveAll($inputFields, $allowedFields) )
  #if( $deniedFields.size() > 0 )
    $util.error(\\"Unauthorized on \${deniedFields}\\", \\"Unauthorized\\")
  #end
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth owner field where the field is a list 2`] = `
"## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **"
`;

exports[`owner based @auth owner field where the field is a list 3`] = `
"## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **"
`;

exports[`owner based @auth owner field where the field is a list 4`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $authFilter = [] )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #set( $currentClaim1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #set( $ownerClaim0 = \\"$ownerClaim0::$currentClaim1\\" )
    #if( $role0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"editors\\": { \\"contains\\": $ownerClaim0 }}))
    #end
    #set( $role0_0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #if( $role0_0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"editors\\": { \\"contains\\": $role0_0 }}))
    #end
    #set( $role0_1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #if( $role0_1 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"editors\\": { \\"contains\\": $role0_1 }}))
    #end
    #if( !$authFilter.isEmpty() )
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth owner field where the field is a list 5`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $authFilter = [] )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #set( $currentClaim1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #set( $ownerClaim0 = \\"$ownerClaim0::$currentClaim1\\" )
    #if( $role0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"editors\\": { \\"contains\\": $ownerClaim0 }}))
    #end
    #set( $role0_0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #if( $role0_0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"editors\\": { \\"contains\\": $role0_0 }}))
    #end
    #set( $role0_1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #if( $role0_1 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"editors\\": { \\"contains\\": $role0_1 }}))
    #end
    #if( !$authFilter.isEmpty() )
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth owner field with custom cognito field 1`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )
#set( $isAuthorized = false )
#set( $allowedFields = [] )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $ownerEntity0 = $util.defaultIfNull($ctx.args.input.owner, null) )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get(\\"custom:my_field\\"), \\"___xamznone____\\") )
    #set( $ownerClaimsList0 = [] )
    #set( $ownerAllowedFields0 = [\\"id\\",\\"title\\",\\"createdAt\\",\\"updatedAt\\"] )
    #set( $isAuthorizedOnAllFields0 = true )
    #if( $ownerClaim0 == $ownerEntity0 || $ownerClaimsList0.contains($ownerEntity0) )
      #if( $isAuthorizedOnAllFields0 )
        #set( $isAuthorized = true )
      #else
        $util.qr($allowedFields.addAll($ownerAllowedFields0))
      #end
    #end
    #if( $util.isNull($ownerEntity0) && !$ctx.args.input.containsKey(\\"owner\\") )
      $util.qr($ctx.args.input.put(\\"owner\\", $ownerClaim0))
      #if( $isAuthorizedOnAllFields0 )
        #set( $isAuthorized = true )
      #else
        $util.qr($allowedFields.addAll($ownerAllowedFields0))
      #end
    #end
  #end
#end
#if( !$isAuthorized && $allowedFields.isEmpty() )
$util.unauthorized()
#end
#if( !$isAuthorized )
  #set( $deniedFields = $util.list.copyAndRemoveAll($inputFields, $allowedFields) )
  #if( $deniedFields.size() > 0 )
    $util.error(\\"Unauthorized on \${deniedFields}\\", \\"Unauthorized\\")
  #end
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth owner field with custom cognito field 2`] = `
"## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **"
`;

exports[`owner based @auth owner field with custom cognito field 3`] = `
"## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **"
`;

exports[`owner based @auth owner field with custom cognito field 4`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $authFilter = [] )
    #set( $role0 = $util.defaultIfNull($ctx.identity.claims.get(\\"custom:my_field\\"), \\"___xamznone____\\") )
    #if( $role0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $role0 }}))
    #end
    #if( !$authFilter.isEmpty() )
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth owner field with custom cognito field 5`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $authFilter = [] )
    #set( $role0 = $util.defaultIfNull($ctx.identity.claims.get(\\"custom:my_field\\"), \\"___xamznone____\\") )
    #if( $role0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $role0 }}))
    #end
    #if( !$authFilter.isEmpty() )
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth owner fields on primaryKey create auth filter for scan operation 1`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #set( $parentClaim = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
  #set( $ownerClaimsList0 = [] )
  $util.qr($ownerClaimsList0.add($parentClaim))
  #if( !$util.isNull($ctx.args.parent) )
    #if( $util.isString($ctx.args.parent) )
      #set( $parentCondition = (($parentClaim == $ctx.args.parent) || $ownerClaimsList0.contains($ctx.args.parent)) )
    #else
      #set( $parentCondition = ($parentClaim == $util.defaultIfNull($ctx.args.parent.get(\\"eq\\"), \\"___xamznone____\\") || $ownerClaimsList0.contains($util.defaultIfNull($ctx.args.parent.get(\\"eq\\"), \\"___xamznone____\\"))) )
      #if( !$parentCondition )
        #set( $entityValues = 0 )
        #foreach( $argEntity in $ctx.args.parent.get(\\"eq\\") )
          #if( $ownerClaimsList0.contains($argEntity) )
            #set( $entityValues = $entityValues + 1 )
          #end
        #end
        #if( $entityValues == $ctx.args.parent.get(\\"eq\\").size() )
          #set( $parentCondition = true )
        #end
      #end
    #end
    #if( $parentCondition )
      #set( $isAuthorized = true )
      $util.qr($ctx.stash.put(\\"authFilter\\", null))
    #end
  #else
    $util.qr($primaryFieldMap.put(\\"parent\\", $parentClaim))
  #end
  #set( $childClaim = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
  #set( $ownerClaimsList1 = [] )
  $util.qr($ownerClaimsList1.add($childClaim))
  #if( !$util.isNull($ctx.args.child) )
    #if( $util.isString($ctx.args.child) )
      #set( $childCondition = (($childClaim == $ctx.args.child) || $ownerClaimsList1.contains($ctx.args.child)) )
    #else
      #set( $childCondition = ($childClaim == $util.defaultIfNull($ctx.args.child.get(\\"eq\\"), \\"___xamznone____\\") || $ownerClaimsList1.contains($util.defaultIfNull($ctx.args.child.get(\\"eq\\"), \\"___xamznone____\\"))) )
      #if( !$childCondition )
        #set( $entityValues = 0 )
        #foreach( $argEntity in $ctx.args.child.get(\\"eq\\") )
          #if( $ownerClaimsList1.contains($argEntity) )
            #set( $entityValues = $entityValues + 1 )
          #end
        #end
        #if( $entityValues == $ctx.args.child.get(\\"eq\\").size() )
          #set( $childCondition = true )
        #end
      #end
    #end
    #if( $childCondition )
      #set( $isAuthorized = true )
      $util.qr($ctx.stash.put(\\"authFilter\\", null))
    #end
  #else
    $util.qr($primaryFieldMap.put(\\"child\\", $childClaim))
  #end
  #if( !$isAuthorized && !$primaryFieldMap.isEmpty() )
    #if( $util.isNull($ctx.args.parent) )
      #set( $authFilter = $util.defaultIfNull($ctx.stash.get(\\"authFilter\\").get(\\"or\\"), []) )
      #foreach( $entry in $primaryFieldMap.entrySet() )
        #set( $filterMap = {} )
        #if( $util.isList($entry.value) )
          $util.qr($filterMap.put($entry.key, { \\"in\\": $entry.value }))
        #else
          $util.qr($filterMap.put($entry.key, { \\"eq\\": $entry.value }))
        #end
        $util.qr($authFilter.add($filterMap))
      #end
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #else
      #if( $util.isNull($ctx.stash.authFilter) )
        #set( $modelQueryExpression = $ctx.stash.modelQueryExpression )
        #foreach( $entry in $primaryFieldMap.entrySet() )
          #set( $modelQueryExpression.expression = \\"\${modelQueryExpression.expression} AND #\${entry.key} = :\${entry.key}\\" )
          $util.qr($modelQueryExpression.expressionNames.put(\\"#\${entry.key}\\", $entry.key))
          $util.qr($modelQueryExpression.expressionValues.put(\\":\${entry.key}\\", $util.dynamodb.toDynamoDB($entry.value)))
        #end
        $util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
        #set( $isAuthorized = true )
      #end
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth owner where field is "::" delimited string 1`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )
#set( $isAuthorized = false )
#set( $allowedFields = [] )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $ownerEntity0 = $util.defaultIfNull($ctx.args.input.owner, null) )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #set( $currentClaim1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #set( $ownerClaim0 = \\"$ownerClaim0::$currentClaim1\\" )
    #set( $ownerClaimsList0 = [] )
    $util.qr($ownerClaimsList0.add($util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\")))
    $util.qr($ownerClaimsList0.add($util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\"))))
    #set( $ownerAllowedFields0 = [\\"id\\",\\"title\\",\\"createdAt\\",\\"updatedAt\\"] )
    #set( $isAuthorizedOnAllFields0 = true )
    #if( $ownerClaim0 == $ownerEntity0 || $ownerClaimsList0.contains($ownerEntity0) )
      #if( $isAuthorizedOnAllFields0 )
        #set( $isAuthorized = true )
      #else
        $util.qr($allowedFields.addAll($ownerAllowedFields0))
      #end
    #end
    #if( $util.isNull($ownerEntity0) && !$ctx.args.input.containsKey(\\"owner\\") )
      $util.qr($ctx.args.input.put(\\"owner\\", $ownerClaim0))
      #if( $isAuthorizedOnAllFields0 )
        #set( $isAuthorized = true )
      #else
        $util.qr($allowedFields.addAll($ownerAllowedFields0))
      #end
    #end
  #end
#end
#if( !$isAuthorized && $allowedFields.isEmpty() )
$util.unauthorized()
#end
#if( !$isAuthorized )
  #set( $deniedFields = $util.list.copyAndRemoveAll($inputFields, $allowedFields) )
  #if( $deniedFields.size() > 0 )
    $util.error(\\"Unauthorized on \${deniedFields}\\", \\"Unauthorized\\")
  #end
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth owner where field is "::" delimited string 2`] = `
"## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **"
`;

exports[`owner based @auth owner where field is "::" delimited string 3`] = `
"## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **"
`;

exports[`owner based @auth owner where field is "::" delimited string 4`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $authFilter = [] )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #set( $currentClaim1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #set( $ownerClaim0 = \\"$ownerClaim0::$currentClaim1\\" )
    #if( $role0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $ownerClaim0 }}))
    #end
    #set( $role0_0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #if( $role0_0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $role0_0 }}))
    #end
    #set( $role0_1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #if( $role0_1 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $role0_1 }}))
    #end
    #if( !$authFilter.isEmpty() )
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth owner where field is "::" delimited string 5`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $authFilter = [] )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #set( $currentClaim1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #set( $ownerClaim0 = \\"$ownerClaim0::$currentClaim1\\" )
    #if( $role0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $ownerClaim0 }}))
    #end
    #set( $role0_0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #if( $role0_0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $role0_0 }}))
    #end
    #set( $role0_1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #if( $role0_1 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $role0_1 }}))
    #end
    #if( !$authFilter.isEmpty() )
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth with identity claim feature flag disabled owner field where the field is a list 1`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )
#set( $isAuthorized = false )
#set( $allowedFields = [] )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $ownerEntity0 = $util.defaultIfNull($ctx.args.input.editors, null) )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #set( $ownerClaimsList0 = [] )
    #set( $ownerAllowedFields0 = [\\"id\\",\\"title\\",\\"editors\\",\\"createdAt\\",\\"updatedAt\\"] )
    #set( $isAuthorizedOnAllFields0 = true )
    #foreach( $allowedOwner in $ownerEntity0 )
      #if( $allowedOwner == $ownerClaim0 || $ownerClaimsList0.contains($ownerEntity0) )
        #if( $isAuthorizedOnAllFields0 )
          #set( $isAuthorized = true )
          #break
        #else
          $util.qr($allowedFields.addAll($ownerAllowedFields0))
        #end
      #end
    #end
    #if( $util.isNull($ownerEntity0) && !$ctx.args.input.containsKey(\\"editors\\") )
      $util.qr($ctx.args.input.put(\\"editors\\", [$ownerClaim0]))
      #if( $isAuthorizedOnAllFields0 )
        #set( $isAuthorized = true )
      #else
        $util.qr($allowedFields.addAll($ownerAllowedFields0))
      #end
    #end
  #end
#end
#if( !$isAuthorized && $allowedFields.isEmpty() )
$util.unauthorized()
#end
#if( !$isAuthorized )
  #set( $deniedFields = $util.list.copyAndRemoveAll($inputFields, $allowedFields) )
  #if( $deniedFields.size() > 0 )
    $util.error(\\"Unauthorized on \${deniedFields}\\", \\"Unauthorized\\")
  #end
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth with identity claim feature flag disabled owner field where the field is a list 2`] = `
"## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **"
`;

exports[`owner based @auth with identity claim feature flag disabled owner field where the field is a list 3`] = `
"## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **"
`;

exports[`owner based @auth with identity claim feature flag disabled owner field where the field is a list 4`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $authFilter = [] )
    #set( $role0 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #if( $role0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"editors\\": { \\"contains\\": $role0 }}))
    #end
    #if( !$authFilter.isEmpty() )
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth with identity claim feature flag disabled owner field where the field is a list 5`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $authFilter = [] )
    #set( $role0 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #if( $role0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"editors\\": { \\"contains\\": $role0 }}))
    #end
    #if( !$authFilter.isEmpty() )
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth with identity claim feature flag disabled owner fields on primaryKey create auth filter for scan operation 1`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #set( $parentClaim = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
  #set( $ownerClaimsList0 = [] )
  $util.qr($ownerClaimsList0.add($parentClaim))
  #if( !$util.isNull($ctx.args.parent) )
    #if( $util.isString($ctx.args.parent) )
      #set( $parentCondition = (($parentClaim == $ctx.args.parent) || $ownerClaimsList0.contains($ctx.args.parent)) )
    #else
      #set( $parentCondition = ($parentClaim == $util.defaultIfNull($ctx.args.parent.get(\\"eq\\"), \\"___xamznone____\\") || $ownerClaimsList0.contains($util.defaultIfNull($ctx.args.parent.get(\\"eq\\"), \\"___xamznone____\\"))) )
      #if( !$parentCondition )
        #set( $entityValues = 0 )
        #foreach( $argEntity in $ctx.args.parent.get(\\"eq\\") )
          #if( $ownerClaimsList0.contains($argEntity) )
            #set( $entityValues = $entityValues + 1 )
          #end
        #end
        #if( $entityValues == $ctx.args.parent.get(\\"eq\\").size() )
          #set( $parentCondition = true )
        #end
      #end
    #end
    #if( $parentCondition )
      #set( $isAuthorized = true )
      $util.qr($ctx.stash.put(\\"authFilter\\", null))
    #end
  #else
    $util.qr($primaryFieldMap.put(\\"parent\\", $parentClaim))
  #end
  #set( $childClaim = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
  #set( $ownerClaimsList1 = [] )
  $util.qr($ownerClaimsList1.add($childClaim))
  #if( !$util.isNull($ctx.args.child) )
    #if( $util.isString($ctx.args.child) )
      #set( $childCondition = (($childClaim == $ctx.args.child) || $ownerClaimsList1.contains($ctx.args.child)) )
    #else
      #set( $childCondition = ($childClaim == $util.defaultIfNull($ctx.args.child.get(\\"eq\\"), \\"___xamznone____\\") || $ownerClaimsList1.contains($util.defaultIfNull($ctx.args.child.get(\\"eq\\"), \\"___xamznone____\\"))) )
      #if( !$childCondition )
        #set( $entityValues = 0 )
        #foreach( $argEntity in $ctx.args.child.get(\\"eq\\") )
          #if( $ownerClaimsList1.contains($argEntity) )
            #set( $entityValues = $entityValues + 1 )
          #end
        #end
        #if( $entityValues == $ctx.args.child.get(\\"eq\\").size() )
          #set( $childCondition = true )
        #end
      #end
    #end
    #if( $childCondition )
      #set( $isAuthorized = true )
      $util.qr($ctx.stash.put(\\"authFilter\\", null))
    #end
  #else
    $util.qr($primaryFieldMap.put(\\"child\\", $childClaim))
  #end
  #if( !$isAuthorized && !$primaryFieldMap.isEmpty() )
    #if( $util.isNull($ctx.args.parent) )
      #set( $authFilter = $util.defaultIfNull($ctx.stash.get(\\"authFilter\\").get(\\"or\\"), []) )
      #foreach( $entry in $primaryFieldMap.entrySet() )
        #set( $filterMap = {} )
        #if( $util.isList($entry.value) )
          $util.qr($filterMap.put($entry.key, { \\"in\\": $entry.value }))
        #else
          $util.qr($filterMap.put($entry.key, { \\"eq\\": $entry.value }))
        #end
        $util.qr($authFilter.add($filterMap))
      #end
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #else
      #if( $util.isNull($ctx.stash.authFilter) )
        #set( $modelQueryExpression = $ctx.stash.modelQueryExpression )
        #foreach( $entry in $primaryFieldMap.entrySet() )
          #set( $modelQueryExpression.expression = \\"\${modelQueryExpression.expression} AND #\${entry.key} = :\${entry.key}\\" )
          $util.qr($modelQueryExpression.expressionNames.put(\\"#\${entry.key}\\", $entry.key))
          $util.qr($modelQueryExpression.expressionValues.put(\\":\${entry.key}\\", $util.dynamodb.toDynamoDB($entry.value)))
        #end
        $util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
        #set( $isAuthorized = true )
      #end
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth with identity claim feature flag disabled owner where field is "::" delimited string 1`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )
#set( $isAuthorized = false )
#set( $allowedFields = [] )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $ownerEntity0 = $util.defaultIfNull($ctx.args.input.owner, null) )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #set( $currentClaim1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #set( $ownerClaim0 = \\"$ownerClaim0::$currentClaim1\\" )
    #set( $ownerClaimsList0 = [] )
    $util.qr($ownerClaimsList0.add($util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\")))
    $util.qr($ownerClaimsList0.add($util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\"))))
    #set( $ownerAllowedFields0 = [\\"id\\",\\"title\\",\\"createdAt\\",\\"updatedAt\\"] )
    #set( $isAuthorizedOnAllFields0 = true )
    #if( $ownerClaim0 == $ownerEntity0 || $ownerClaimsList0.contains($ownerEntity0) )
      #if( $isAuthorizedOnAllFields0 )
        #set( $isAuthorized = true )
      #else
        $util.qr($allowedFields.addAll($ownerAllowedFields0))
      #end
    #end
    #if( $util.isNull($ownerEntity0) && !$ctx.args.input.containsKey(\\"owner\\") )
      $util.qr($ctx.args.input.put(\\"owner\\", $ownerClaim0))
      #if( $isAuthorizedOnAllFields0 )
        #set( $isAuthorized = true )
      #else
        $util.qr($allowedFields.addAll($ownerAllowedFields0))
      #end
    #end
  #end
#end
#if( !$isAuthorized && $allowedFields.isEmpty() )
$util.unauthorized()
#end
#if( !$isAuthorized )
  #set( $deniedFields = $util.list.copyAndRemoveAll($inputFields, $allowedFields) )
  #if( $deniedFields.size() > 0 )
    $util.error(\\"Unauthorized on \${deniedFields}\\", \\"Unauthorized\\")
  #end
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth with identity claim feature flag disabled owner where field is "::" delimited string 2`] = `
"## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **"
`;

exports[`owner based @auth with identity claim feature flag disabled owner where field is "::" delimited string 3`] = `
"## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **"
`;

exports[`owner based @auth with identity claim feature flag disabled owner where field is "::" delimited string 4`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $authFilter = [] )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #set( $currentClaim1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #set( $ownerClaim0 = \\"$ownerClaim0::$currentClaim1\\" )
    #if( $role0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $ownerClaim0 }}))
    #end
    #set( $role0_0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #if( $role0_0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $role0_0 }}))
    #end
    #set( $role0_1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #if( $role0_1 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $role0_1 }}))
    #end
    #if( !$authFilter.isEmpty() )
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;

exports[`owner based @auth with identity claim feature flag disabled owner where field is "::" delimited string 5`] = `
"## [Start] Authorization Steps. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $isAuthorized = false )
#set( $primaryFieldMap = {} )
#if( $util.authType() == \\"User Pool Authorization\\" )
  #if( !$isAuthorized )
    #set( $authFilter = [] )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #set( $currentClaim1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #set( $ownerClaim0 = \\"$ownerClaim0::$currentClaim1\\" )
    #if( $role0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $ownerClaim0 }}))
    #end
    #set( $role0_0 = $util.defaultIfNull($ctx.identity.claims.get(\\"sub\\"), \\"___xamznone____\\") )
    #if( $role0_0 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $role0_0 }}))
    #end
    #set( $role0_1 = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #if( $role0_1 != \\"___xamznone____\\" )
      $util.qr($authFilter.add({\\"owner\\": { \\"eq\\": $role0_1 }}))
    #end
    #if( !$authFilter.isEmpty() )
      $util.qr($ctx.stash.put(\\"authFilter\\", { \\"or\\": $authFilter }))
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization Steps. **"
`;
