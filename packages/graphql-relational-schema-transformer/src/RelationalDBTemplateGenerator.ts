import ApiKey from 'cloudform-types/types/appSync/apiKey'
import GraphQLSchema from 'cloudform-types/types/appSync/graphQlSchema'
import GraphQLApi from 'cloudform-types/types/appSync/graphQlApi'
import Role, { Policy } from 'cloudform-types/types/iam/role'
import { ResourceConstants, ModelResourceIDs } from 'graphql-transformer-common'
import { print } from 'graphql'
import DataSource from 'cloudform-types/types/appSync/dataSource'
import IAM from 'cloudform-types/types/iam'

import cloudform, { Fn, StringParameter, Refs } from 'cloudform'
import Template from 'cloudform-types/types/template'
import Output from 'cloudform-types/types/output'
import TemplateContext from './RelationalDBSchemaTransformer'
import RelationalDBResolverGenerator from './RelationalDBResolverGenerator'

const category = 'api'
const service = 'awscloudformation'

/**
 * This is the Class responsible for generating and managing the CloudForm template
 * provided a TemplateContext object, which is generated by the RelationalDBSchemaTransformer.
 *
 * It will generate the basic CloudForm template needed for getting the AppSync API and
 * RDS DataSource provisioned. It also allows for adding the CRUDL+Q Resolvers upon need.
 */
export default class RelationalDBTemplateGenerator {
    context: TemplateContext

    constructor(context: TemplateContext) {
        this.context = context
    }

    /**
     * Creates and returns the basic Cloudform template needed for setting
     * up an AppSync API pointing at the RDS DataSource.
     * 
     * @returns the created CloudFormation template.
     */
    public createTemplate(context: any): Template {
        const schemaString = print(this.context.schemaDoc)

        const template =  {
            AWSTemplateFormatVersion: "2010-09-09",
            Parameters: this.makeParameters(this.context.databaseName),
            Resources: {
                [ResourceConstants.RESOURCES.APIKeyLogicalID]: this.makeAPIKey(),
                [ResourceConstants.RESOURCES.GraphQLAPILogicalID]: this.makeGraphQLApi(),
                [ResourceConstants.RESOURCES.GraphQLSchemaLogicalID]: this.makeAPISchema(schemaString),
                ['RelationalDatabaseAccessRole']: this.makeIAMDataSourceRole(),
                //TODO: use ModelResourceIds to provide the IAM service role
                ['RelationalDatabaseDataSource']: this.makeRelationalDataSource('RelationalDatabaseAccessRole', context)
            },
            Outputs: {
                [ResourceConstants.OUTPUTS.GraphQLAPIApiKeyOutput]: this.makeAPIKeyOutput(),
                [ResourceConstants.OUTPUTS.GraphQLAPIEndpointOutput]: this.makeGraphQLApiEndpointOutput(),
                [ResourceConstants.OUTPUTS.GraphQLAPIIdOutput]: this.makeGraphQLApiIdOutput()
            }
        }

        return template
    }

    /**
     * Provided a Cloudform Template, this method adds Resolver Resources to the
     * Template.
     *
     * @param template - the Cloudform template
     * @returns the given template, updated with new resolvers.
     */
    public addRelationalResolvers(template: Template) : Template {
        let resolverGenerator = new RelationalDBResolverGenerator(this.context)
        template.Resources = {...template.Resources, ...resolverGenerator.createRelationalResolvers()}
        return template
    }

    /**
     * Provided a Cloudform Template, this method returns the cfn json template as a string
     *
     * @param template - the Cloudform template
     * @returns the json, string form of the template given.
     */
    public printCloudformationTemplate(template: Template): string {
        return cloudform(template)
    }

    /*
     * Private Helper Methods for Generating the Necessary CFN Specs for the CFN Template
     */

    /**
     * Creates any Parmaters needed for the CFN Template
     * 
     * @param databaseName - the name of the database being parsed.
     * @returns the parameters for the template.
     */
    private makeParameters(databaseName: string) {
        return {
            [ResourceConstants.PARAMETERS.AppSyncApiName]: new StringParameter({
                Description: `AppSync API for ${databaseName} generated by Amplify Relational Transformer`,
                Default: `${databaseName} App`
            })
        }
    }

    /*
     * Resources
     */

    /**
     * Creates the GraphQL API CFN Spec using API_KEY as the Auth Type
     * 
     * @returns the GraphQLAPI CloudFormation resource.
     */
    private makeGraphQLApi(): GraphQLApi {
        return new GraphQLApi ({
            Name: Fn.Ref(ResourceConstants.PARAMETERS.AppSyncApiName),
            AuthenticationType: "API_KEY"
        })
    }

    /**
     * Provided the GraphQL Schema as a string (this should be generated by the RelationalDBSchemaTransformer),
     * it creates the GraphQLSchema CFN spec
     * 
     * @param schemaString the schema body to be used.
     * @returns the schema CloudFormation resource for the API being worked on.
     */
    private makeAPISchema(schemaString: string): GraphQLSchema {
        return new GraphQLSchema ({
            ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
            Definition: schemaString
        }).dependsOn([ResourceConstants.RESOURCES.GraphQLAPILogicalID])
    }

    /**
     * Creates the API Key CFN Spec for the GraphQL API
     * 
     * @returns the API key CloudFormation resource.
     */
    private makeAPIKey(): ApiKey {
        return new ApiKey ({
            ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
            Description: 'AWS AppSync api key'
        }).dependsOn([ResourceConstants.RESOURCES.GraphQLAPILogicalID])
    }

    /**
     * Creates the IAM Role CFN Spec to allow AppSync to interact with the RDS cluster
     * 
     * @returns the IAM role CloudFormation resource.
     */
    private makeIAMDataSourceRole() {
        return new IAM.Role ({
            RoleName: 'RDSDataSource_Access_Role',
            AssumeRolePolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Effect: 'Allow',
                        Principal: {
                            Service: 'appsync.amazonaws.com'
                        },
                        Action: 'sts:AssumeRole'
                    }
                ]
            },
            Policies: [
                new IAM.Role.Policy ({
                    PolicyName: 'RelationalDatabaseAccessPolicy',
                    PolicyDocument: {
                        Version: '2012-10-17',
                        Statement: [
                            {
                                Effect: 'Allow',
                                Action: [
                                    'rds-data:ExecuteSql',
                                    'rds-data:DeleteItems',
                                    'rds-data:GetItems',
                                    'rds-data:InsertItems',
                                    'rds-data:UpdateItems'
                                ],
                                Resource: [
                                    '*'
                                ]
                            },
                            {
                                Effect: 'Allow',
                                Action: [
                                    'secretsmanager:GetSecretValue'
                                ],
                                Resource: [
                                    '*'
                                ]
                            }
                        ]
                    }
                })
            ]
        })
    }

    /**
     * Creates the AppSync DataSource CFN Spec pointing at the provided RDS Cluster
     * 
     * @param iamRoleLogicalID
     * @returns the data source CloudFormation resource.
     */
    private makeRelationalDataSource(iamRoleLogicalID: string, cliContext: any): DataSource {
        const currentEnvValues = cliContext.amplify.loadEnvResourceParameters(
            cliContext,
            category,
            service,
        );
        return new DataSource ({
            Type: 'RELATIONAL_DATABASE',
            Name: `${this.context.databaseName}_rds_DataSource`,
            Description: `RDS Data Source Provisioned for ${this.context.databaseName}`,
            ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
            ServiceRoleArn: Fn.GetAtt(iamRoleLogicalID, 'Arn'),
            RelationalDatabaseConfig: {
                RelationalDatabaseSourceType: 'RDS_HTTP_ENDPOINT',
                RdsHttpEndpointConfig: {
                    AwsRegion: currentEnvValues[ResourceConstants.ENVIRONMENT_CONTEXT_KEYS.RDSRegion],
                    DbClusterIdentifier: currentEnvValues[ResourceConstants.ENVIRONMENT_CONTEXT_KEYS.RDSClusterIdentifier],
                    DatabaseName: currentEnvValues[ResourceConstants.ENVIRONMENT_CONTEXT_KEYS.RDSDatabaseName],
                    Schema: this.context.databaseSchema,
                    AwsSecretStoreArn: currentEnvValues[ResourceConstants.ENVIRONMENT_CONTEXT_KEYS.RDSSecretStoreArn]
                }
            }
        }).dependsOn([ResourceConstants.RESOURCES.GraphQLAPILogicalID, iamRoleLogicalID])
    }

    /*
     * Outputs
     */

    private makeAPIKeyOutput(): Output {
        return {
            Value: Fn.GetAtt(ResourceConstants.RESOURCES.APIKeyLogicalID, 'ApiKey'),
            Export: {
                Name: Fn.Join(':', [Refs.StackName, "AppSyncApiKey"])
            }
        }
    }

    private makeGraphQLApiIdOutput(): Output {
        return {
            Value: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
            Export: {
                Name: Fn.Join(':', [Refs.StackName, "AppSyncApiId"])
            }
        }
    }

    private makeGraphQLApiEndpointOutput(): Output {
        return {
            Value: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'GraphQLUrl'),
            Export: {
                Name: Fn.Join(':', [Refs.StackName, "AppSyncApiEndpoint"])
            }
        }
    }
}