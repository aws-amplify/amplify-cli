import { CfnResource, Construct, IAsset, IConstruct } from '@aws-cdk/core';
import { Grant, IGrantable, IRole } from '@aws-cdk/aws-iam';
import {TransformHostProvider} from './transform-host-provider';

export interface AppSyncFunctionConfigurationProvider extends IConstruct {
  readonly arn: string;
  readonly functionId: string;
}
export interface DataSourceOptions {
  /**
   * The name of the data source, overrides the id given by cdk
   *
   * @default - generated by cdk given the id
   */
  readonly name?: string;
  /**
   * The description of the data source
   *
   * @default - No description
   */
  readonly description?: string;
}

export interface SearchableDataSourceOptions extends DataSourceOptions {
  /**
   * ServiceRole for the Amazon OpenSearch
   */
  readonly serviceRole: IRole;
}

export enum TemplateType {
  INLINE = 'INLINE',
  S3_LOCATION = 'S3_LOCATION',
}
export interface InlineMappingTemplateProvider {
  type: TemplateType.INLINE;
  bind(scope: Construct): string;
}
export interface S3MappingTemplateProvider {
  type: TemplateType.S3_LOCATION;
  bind(scope: Construct): string;
}

export interface S3MappingFunctionCodeProvider {
  type: TemplateType.S3_LOCATION;
  bind(scope: Construct): IAsset;
}

export type MappingTemplateProvider = InlineMappingTemplateProvider | S3MappingTemplateProvider;

export interface GraphQLAPIProvider {
  readonly apiId: string;
  readonly host: TransformHostProvider;

  // getDefaultAuthorization(): Readonly<AuthorizationMode>;
  // getAdditionalAuthorizationModes(): Readonly<AuthorizationMode[]>;
  addToSchema(addition: string): void;
  addSchemaDependency(construct: CfnResource): boolean;

  grant(grantee: IGrantable, resources: APIIAMResourceProvider, ...actions: string[]): Grant;
  // /**
  //  *  Adds an IAM policy statement for Mutation access to this GraphQLApi to an IAM principal's policy.
  //  *
  //  * @param grantee The principal.
  //  * @param fields The fields to grant access to that are Mutations (leave blank for all).
  //  */
  grantMutation(grantee: IGrantable, ...fields: string[]): Grant;
  // /**
  //  *  Adds an IAM policy statement for Query access to this GraphQLApi to an IAM principal's policy.
  //  *
  //  * @param grantee The principal.
  //  * @param fields The fields to grant access to that are Queries (leave blank for all).
  //  */
  grantQuery(grantee: IGrantable, ...fields: string[]): Grant;
  // /**
  //  *  Adds an IAM policy statement for Subscription access to this GraphQLApi to an IAM principal's policy.
  //  *
  //  * @param grantee The principal.
  //  * @param fields The fields to grant access to that are Subscriptions (leave blank for all).
  //  */
  grantSubscription(grantee: IGrantable, ...fields: string[]): Grant;
}

export interface APIIAMResourceProvider {
  /**
   * Return the Resource ARN
   *
   * @param api The GraphQL API to give permissions
   */
  resourceArns(api: GraphQLAPIProvider): string[];
}
