// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@mapsTo with multiple foreign key field renames on single model 1`] = `
"$util.qr($ctx.args.input.put(\\"checklistTasksId\\", $ctx.args.input.agendaTasksId))
$util.qr($ctx.args.input.remove(\\"agendaTasksId\\"))
$util.qr($ctx.args.input.put(\\"taskLocId\\", $ctx.args.input.todoLocId))
$util.qr($ctx.args.input.remove(\\"todoLocId\\"))
$util.qr($ctx.args.input.put(\\"taskDayId\\", $ctx.args.input.todoDayId))
$util.qr($ctx.args.input.remove(\\"todoDayId\\"))
$util.toJson({})"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 2`] = `
"#set( $fieldMap = {\\"agendaTasksId\\":\\"checklistTasksId\\",\\"todoLocId\\":\\"taskLocId\\",\\"todoDayId\\":\\"taskDayId\\"} )
#if( $util.isNull($fieldMap) || $fieldMap.keySet().size() <= 0 )
  #return($ctx.args)
#end
#if( $util.isNull($ctx.args.filter) && $util.isNull($ctx.args.condition) && $util.isNull($ctx.args.sort) && $util.isNull($ctx.args.aggregates) )
  #return($ctx.args)
#end
#set( $invoke = {
  \\"operation\\": \\"Invoke\\",
  \\"payload\\": {
      \\"args\\": $ctx.args,
      \\"fieldMap\\": $fieldMap
  }
} )
$util.toJson($invoke)"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 3`] = `
"#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#set( $ctx.stash.transformedArgs = $ctx.result )
$util.toJson({})"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 4`] = `
"$util.qr($ctx.prev.result.put(\\"agendaTasksId\\", $ctx.prev.result.checklistTasksId))
$util.qr($ctx.prev.result.remove(\\"checklistTasksId\\"))
$util.qr($ctx.prev.result.put(\\"todoLocId\\", $ctx.prev.result.taskLocId))
$util.qr($ctx.prev.result.remove(\\"taskLocId\\"))
$util.qr($ctx.prev.result.put(\\"todoDayId\\", $ctx.prev.result.taskDayId))
$util.qr($ctx.prev.result.remove(\\"taskDayId\\"))
$util.toJson($ctx.prev.result)"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 5`] = `
"$util.qr($ctx.args.input.put(\\"checklistTasksId\\", $ctx.args.input.agendaTasksId))
$util.qr($ctx.args.input.remove(\\"agendaTasksId\\"))
$util.qr($ctx.args.input.put(\\"taskLocId\\", $ctx.args.input.todoLocId))
$util.qr($ctx.args.input.remove(\\"todoLocId\\"))
$util.qr($ctx.args.input.put(\\"taskDayId\\", $ctx.args.input.todoDayId))
$util.qr($ctx.args.input.remove(\\"todoDayId\\"))
$util.toJson({})"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 6`] = `
"#set( $fieldMap = {\\"agendaTasksId\\":\\"checklistTasksId\\",\\"todoLocId\\":\\"taskLocId\\",\\"todoDayId\\":\\"taskDayId\\"} )
#if( $util.isNull($fieldMap) || $fieldMap.keySet().size() <= 0 )
  #return($ctx.args)
#end
#if( $util.isNull($ctx.args.filter) && $util.isNull($ctx.args.condition) && $util.isNull($ctx.args.sort) && $util.isNull($ctx.args.aggregates) )
  #return($ctx.args)
#end
#set( $invoke = {
  \\"operation\\": \\"Invoke\\",
  \\"payload\\": {
      \\"args\\": $ctx.args,
      \\"fieldMap\\": $fieldMap
  }
} )
$util.toJson($invoke)"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 7`] = `
"#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#set( $ctx.stash.transformedArgs = $ctx.result )
$util.toJson({})"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 8`] = `
"$util.qr($ctx.prev.result.put(\\"agendaTasksId\\", $ctx.prev.result.checklistTasksId))
$util.qr($ctx.prev.result.remove(\\"checklistTasksId\\"))
$util.qr($ctx.prev.result.put(\\"todoLocId\\", $ctx.prev.result.taskLocId))
$util.qr($ctx.prev.result.remove(\\"taskLocId\\"))
$util.qr($ctx.prev.result.put(\\"todoDayId\\", $ctx.prev.result.taskDayId))
$util.qr($ctx.prev.result.remove(\\"taskDayId\\"))
$util.toJson($ctx.prev.result)"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 9`] = `
"$util.qr($ctx.args.input.put(\\"checklistTasksId\\", $ctx.args.input.agendaTasksId))
$util.qr($ctx.args.input.remove(\\"agendaTasksId\\"))
$util.qr($ctx.args.input.put(\\"taskLocId\\", $ctx.args.input.todoLocId))
$util.qr($ctx.args.input.remove(\\"todoLocId\\"))
$util.qr($ctx.args.input.put(\\"taskDayId\\", $ctx.args.input.todoDayId))
$util.qr($ctx.args.input.remove(\\"todoDayId\\"))
$util.toJson({})"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 10`] = `
"#set( $fieldMap = {\\"agendaTasksId\\":\\"checklistTasksId\\",\\"todoLocId\\":\\"taskLocId\\",\\"todoDayId\\":\\"taskDayId\\"} )
#if( $util.isNull($fieldMap) || $fieldMap.keySet().size() <= 0 )
  #return($ctx.args)
#end
#if( $util.isNull($ctx.args.filter) && $util.isNull($ctx.args.condition) && $util.isNull($ctx.args.sort) && $util.isNull($ctx.args.aggregates) )
  #return($ctx.args)
#end
#set( $invoke = {
  \\"operation\\": \\"Invoke\\",
  \\"payload\\": {
      \\"args\\": $ctx.args,
      \\"fieldMap\\": $fieldMap
  }
} )
$util.toJson($invoke)"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 11`] = `
"#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#set( $ctx.stash.transformedArgs = $ctx.result )
$util.toJson({})"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 12`] = `
"$util.qr($ctx.prev.result.put(\\"agendaTasksId\\", $ctx.prev.result.checklistTasksId))
$util.qr($ctx.prev.result.remove(\\"checklistTasksId\\"))
$util.qr($ctx.prev.result.put(\\"todoLocId\\", $ctx.prev.result.taskLocId))
$util.qr($ctx.prev.result.remove(\\"taskLocId\\"))
$util.qr($ctx.prev.result.put(\\"todoDayId\\", $ctx.prev.result.taskDayId))
$util.qr($ctx.prev.result.remove(\\"taskDayId\\"))
$util.toJson($ctx.prev.result)"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 13`] = `
"$util.qr($ctx.prev.result.put(\\"agendaTasksId\\", $ctx.prev.result.checklistTasksId))
$util.qr($ctx.prev.result.remove(\\"checklistTasksId\\"))
$util.qr($ctx.prev.result.put(\\"todoLocId\\", $ctx.prev.result.taskLocId))
$util.qr($ctx.prev.result.remove(\\"taskLocId\\"))
$util.qr($ctx.prev.result.put(\\"todoDayId\\", $ctx.prev.result.taskDayId))
$util.qr($ctx.prev.result.remove(\\"taskDayId\\"))
$util.toJson($ctx.prev.result)"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 14`] = `
"#set( $fieldMap = {\\"agendaTasksId\\":\\"checklistTasksId\\",\\"todoLocId\\":\\"taskLocId\\",\\"todoDayId\\":\\"taskDayId\\"} )
#if( $util.isNull($fieldMap) || $fieldMap.keySet().size() <= 0 )
  #return($ctx.args)
#end
#if( $util.isNull($ctx.args.filter) && $util.isNull($ctx.args.condition) && $util.isNull($ctx.args.sort) && $util.isNull($ctx.args.aggregates) )
  #return($ctx.args)
#end
#set( $invoke = {
  \\"operation\\": \\"Invoke\\",
  \\"payload\\": {
      \\"args\\": $ctx.args,
      \\"fieldMap\\": $fieldMap
  }
} )
$util.toJson($invoke)"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 15`] = `
"#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#set( $ctx.stash.transformedArgs = $ctx.result )
$util.toJson({})"
`;

exports[`@mapsTo with multiple foreign key field renames on single model 16`] = `
"#foreach( $item in $ctx.prev.result.items )
  $util.qr($item.put(\\"agendaTasksId\\", $item.checklistTasksId))
  $util.qr($item.remove(\\"checklistTasksId\\"))
  $util.qr($item.put(\\"todoLocId\\", $item.taskLocId))
  $util.qr($item.remove(\\"taskLocId\\"))
  $util.qr($item.put(\\"todoDayId\\", $item.taskDayId))
  $util.qr($item.remove(\\"taskDayId\\"))
#end
$util.toJson($ctx.prev.result)"
`;

exports[`maps sync resolvers when DataStore is enabled 1`] = `
"#set( $fieldMap = {\\"agendaTasksId\\":\\"checklistTasksId\\",\\"todoLocId\\":\\"taskLocId\\",\\"todoDayId\\":\\"taskDayId\\"} )
#if( $util.isNull($fieldMap) || $fieldMap.keySet().size() <= 0 )
  #return($ctx.args)
#end
#if( $util.isNull($ctx.args.filter) && $util.isNull($ctx.args.condition) && $util.isNull($ctx.args.sort) && $util.isNull($ctx.args.aggregates) )
  #return($ctx.args)
#end
#set( $invoke = {
  \\"operation\\": \\"Invoke\\",
  \\"payload\\": {
      \\"args\\": $ctx.args,
      \\"fieldMap\\": $fieldMap
  }
} )
$util.toJson($invoke)"
`;

exports[`maps sync resolvers when DataStore is enabled 2`] = `
"#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#set( $ctx.stash.transformedArgs = $ctx.result )
$util.toJson({})"
`;

exports[`maps sync resolvers when DataStore is enabled 3`] = `
"#foreach( $item in $ctx.prev.result.items )
  $util.qr($item.put(\\"agendaTasksId\\", $item.checklistTasksId))
  $util.qr($item.remove(\\"checklistTasksId\\"))
  $util.qr($item.put(\\"todoLocId\\", $item.taskLocId))
  $util.qr($item.remove(\\"taskLocId\\"))
  $util.qr($item.put(\\"todoDayId\\", $item.taskDayId))
  $util.qr($item.remove(\\"taskDayId\\"))
#end
$util.toJson($ctx.prev.result)"
`;
