// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppSyncSwiftVisitor Should generate a class for a Model 1`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct SimpleModel: Model {
  public let id: String
  public var name: String?
  public var bar: String?
  
  public init(id: String = UUID().uuidString,
      name: String? = nil,
      bar: String? = nil) {
      self.id = id
      self.name = name
      self.bar = bar
  }
}"
`;

exports[`AppSyncSwiftVisitor Should generate a class for a Model 2`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct SimpleModel: Model {
  public let id: String
  public var name: String?
  public var bar: String?
  
  public init(id: String = UUID().uuidString,
      name: String? = nil,
      bar: String? = nil) {
      self.id = id
      self.name = name
      self.bar = bar
  }
}"
`;

exports[`AppSyncSwiftVisitor connection One to Many connection should generate many side of the connection 1`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct task: Model {
  public let id: String
  public var title: String
  public var done: Bool
  public var todo: Todo?
  public var time: Date?
  public var createdOn: Date?
  
  public init(id: String = UUID().uuidString,
      title: String,
      done: Bool,
      todo: Todo? = nil,
      time: Date? = nil,
      createdOn: Date? = nil) {
      self.id = id
      self.title = title
      self.done = done
      self.todo = todo
      self.time = time
      self.createdOn = createdOn
  }
}"
`;

exports[`AppSyncSwiftVisitor connection One to Many connection should generate many side of the connection 2`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct task: Model {
  public let id: String
  public var title: String
  public var done: Bool
  public var todo: Todo?
  public var time: Date?
  public var createdOn: Date?
  
  public init(id: String = UUID().uuidString,
      title: String,
      done: Bool,
      todo: Todo? = nil,
      time: Date? = nil,
      createdOn: Date? = nil) {
      self.id = id
      self.title = title
      self.done = done
      self.todo = todo
      self.time = time
      self.createdOn = createdOn
  }
}"
`;

exports[`AppSyncSwiftVisitor connection One to Many connection should generate one side of the connection 1`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct Todo: Model {
  public let id: String
  public var title: String
  public var done: Bool
  public var description: String?
  public var due_date: String?
  public var version: Int
  public var value: Double?
  public var tasks: List<task>?
  
  public init(id: String = UUID().uuidString,
      title: String,
      done: Bool,
      description: String? = nil,
      due_date: String? = nil,
      version: Int,
      value: Double? = nil,
      tasks: List<task>? = []) {
      self.id = id
      self.title = title
      self.done = done
      self.description = description
      self.due_date = due_date
      self.version = version
      self.value = value
      self.tasks = tasks
  }
}"
`;

exports[`AppSyncSwiftVisitor connection One to Many connection should generate one side of the connection 2`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct Todo: Model {
  public let id: String
  public var title: String
  public var done: Bool
  public var description: String?
  public var due_date: String?
  public var version: Int
  public var value: Double?
  public var tasks: List<task>?
  
  public init(id: String = UUID().uuidString,
      title: String,
      done: Bool,
      description: String? = nil,
      due_date: String? = nil,
      version: Int,
      value: Double? = nil,
      tasks: List<task>? = []) {
      self.id = id
      self.title = title
      self.done = done
      self.description = description
      self.due_date = due_date
      self.version = version
      self.value = value
      self.tasks = tasks
  }
}"
`;

exports[`AppSyncSwiftVisitor should generate an enum for enum type 1`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public enum Status: String {
  case pending
  case done
}"
`;

exports[`AppSyncSwiftVisitor should generate an enum for enum type 2`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public enum Status: String {
  case pending
  case done
}"
`;

exports[`AppSyncSwiftVisitor should generate model with key directive 1`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct authorBook: Model {
  public let id: String
  public var author_id: String
  public var book_id: String
  public var author: String?
  public var book: String?
  
  public init(id: String = UUID().uuidString,
      author_id: String,
      book_id: String,
      author: String? = nil,
      book: String? = nil) {
      self.id = id
      self.author_id = author_id
      self.book_id = book_id
      self.author = author
      self.book = book
  }
}"
`;

exports[`AppSyncSwiftVisitor should generate model with key directive 2`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct authorBook: Model {
  public let id: String
  public var author_id: String
  public var book_id: String
  public var author: String?
  public var book: String?
  
  public init(id: String = UUID().uuidString,
      author_id: String,
      book_id: String,
      author: String? = nil,
      book: String? = nil) {
      self.id = id
      self.author_id = author_id
      self.book_id = book_id
      self.author = author
      self.book = book
  }
}"
`;

exports[`AppSyncSwiftVisitor should generate model with snake case 1`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct snake_case: Model {
  public let id: String
  public var name: String?
  
  public init(id: String = UUID().uuidString,
      name: String? = nil) {
      self.id = id
      self.name = name
  }
}"
`;

exports[`AppSyncSwiftVisitor should generate model with snake case 2`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct snake_case: Model {
  public let id: String
  public var name: String?
  
  public init(id: String = UUID().uuidString,
      name: String? = nil) {
      self.id = id
      self.name = name
  }
}"
`;

exports[`AppSyncSwiftVisitor should generate model with with snake_case field 1`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct SnakeCaseField: Model {
  public let id: String
  public var first_name: String?
  
  public init(id: String = UUID().uuidString,
      first_name: String? = nil) {
      self.id = id
      self.first_name = first_name
  }
}"
`;

exports[`AppSyncSwiftVisitor should not covert Native types to List<type> 1`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct ObjectWithNativeTypes: Model {
  public let id: String
  public var intArr: [Int]?
  public var strArr: [String]?
  public var floatArr: [Double]?
  public var boolArr: [Bool]?
  public var dateArr: [Date]?
  public var enumArr: [EnumType]?
  
  public init(id: String = UUID().uuidString,
      intArr: [Int]? = [],
      strArr: [String]? = [],
      floatArr: [Double]? = [],
      boolArr: [Bool]? = [],
      dateArr: [Date]? = [],
      enumArr: [EnumType]? = []) {
      self.id = id
      self.intArr = intArr
      self.strArr = strArr
      self.floatArr = floatArr
      self.boolArr = boolArr
      self.dateArr = dateArr
      self.enumArr = enumArr
  }
}"
`;

exports[`AppSyncSwiftVisitor should not covert Native types to List<type> 2`] = `
"// swiftlint:disable all
import Amplify
import Foundation

public struct ObjectWithNativeTypes: Model {
  public let id: String
  public var intArr: [Int]?
  public var strArr: [String]?
  public var floatArr: [Double]?
  public var boolArr: [Bool]?
  public var dateArr: [Date]?
  public var enumArr: [EnumType]?
  
  public init(id: String = UUID().uuidString,
      intArr: [Int]? = [],
      strArr: [String]? = [],
      floatArr: [Double]? = [],
      boolArr: [Bool]? = [],
      dateArr: [Date]? = [],
      enumArr: [EnumType]? = []) {
      self.id = id
      self.intArr = intArr
      self.strArr = strArr
      self.floatArr = floatArr
      self.boolArr = boolArr
      self.dateArr = dateArr
      self.enumArr = enumArr
  }
}"
`;
