{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Pinpoint resource stack creation using Amplify CLI",
  "Parameters": {
    "appName": {
      "Type": "String"
    },
    "appId": {
      "Type": "String",
      "Default": "NONE"
    },
    "roleName": {
      "Type": "String"
    },
    "cloudformationPolicyName": {
      "Type": "String"
    },
    "cloudWatchPolicyName": {
      "Type": "String"
    },
    "pinpointPolicyName": {
      "Type": "String"
    },
    "authPolicyName": {
      "Type": "String"
    },
    "unauthPolicyName": {
      "Type": "String"
    },
    "authRoleName": {
      "Type": "String"
    },
    "unauthRoleName": {
      "Type": "String"
    },
    "authRoleArn": {
      "Type": "String"
    },
    "env": {
      "Type": "String"
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Creating pinpoint app"
          },
          "Parameters": ["appName"]
        }
      ]
    }
  },
  "Conditions": {
    "ShouldCreatePinpointApp": {
      "Fn::Equals": [
        {
          "Ref": "appId"
        },
        "NONE"
      ]
    },
    "ShouldNotCreateEnvResources": {
      "Fn::Equals": [
        {
          "Ref": "env"
        },
        "NONE"
      ]
    }
  },
  "Resources": {
    "LambdaExecutionRole": {
      "Condition": "ShouldCreatePinpointApp",
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            {
              "Ref": "roleName"
            },
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "roleName"
                  },
                  "-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Ref": "cloudWatchPolicyName"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": {
              "Ref": "pinpointPolicyName"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["mobileanalytics:*", "mobiletargeting:*"],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": {
              "Ref": "cloudformationPolicyName"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["cloudformation:*"],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "PinpointFunction": {
      "Type": "AWS::Lambda::Function",
      "Condition": "ShouldCreatePinpointApp",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const response = require('cfn-response');",
                "const aws = require('aws-sdk');",
                "exports.handler = function(event, context) {",
                "    if (event.RequestType == 'Delete') {",
                "      const stackID = event.StackId;",
                "      const cloudFormationClient = new aws.CloudFormation({ apiVersion: '2016-12-01', region: event.ResourceProperties.region });",
                "      cloudFormationClient.describeStacks({ StackName: stackID }).promise()",
                "        .then(describeStacksOutput => {",
                "          let appId;",
                "          if (describeStacksOutput.Stacks && describeStacksOutput.Stacks.length > 0) {",
                "            const { Outputs } = describeStacksOutput.Stacks[0];",
                "            const appIdOutput = Outputs.find((output)=>{ return output.OutputKey === 'Id'});",
                "            appId = appIdOutput ? appIdOutput.OutputValue : undefined;  ",
                "          }",
                "          return appId;",
                "        })",
                "        .then(appId => {",
                "          if (appId) {",
                "            const pinpointClient = new aws.Pinpoint({ apiVersion: '2016-12-01', region: event.ResourceProperties.pingPointRegion });",
                "            const params = {",
                "              ApplicationId: appId,",
                "            };",
                "            pinpointClient.deleteApp(params).promise();",
                "          }",
                "        })",
                "        .then(()=>{",
                "          response.send(event, context, response.SUCCESS, {'message': `Successfully deleted pinpoint project`});",
                "        })",
                "        .catch(e=>{",
                "          response.send(event, context, response.FAILED, {'message': `Failed to deleted Pinpoint project`, 'exception': e});",
                "        }); ",
                "    }",
                "    if (event.RequestType == 'Update') {",
                "        response.send(event, context, response.SUCCESS);",
                "        return;",
                "    }",
                "    if (event.RequestType == 'Create') {",
                "       const appName = event.ResourceProperties.appName;",
                "       let responseData = {};",
                "       const params = {",
                "           CreateApplicationRequest: {",
                "               Name: appName",
                "           }",
                "       };",
                "       const pinpoint = new aws.Pinpoint({ apiVersion: '2016-12-01', region: event.ResourceProperties.pingPointRegion });",
                "       pinpoint.createApp(params).promise()",
                "           .then((res) => {",
                "               responseData = res.ApplicationResponse;",
                "               response.send(event, context, response.SUCCESS, responseData);",
                "           }).catch((err) => {",
                "               console.log(err.stack);",
                "               responseData = {Error: err};",
                "               response.send(event, context, response.FAILED, responseData);",
                "               throw err;",
                "           });",
                "    }",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Role": {
          "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
        }
      }
    },
    "PinpointFunctionOutputs": {
      "Type": "Custom::LambdaCallout",
      "Condition": "ShouldCreatePinpointApp",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": ["PinpointFunction", "Arn"]
        },
        "region": {
          "Ref": "AWS::Region"
        },
        "pingPointRegion": {
          "Fn::FindInMap": ["RegionMapping", { "Ref": "AWS::Region" }, "pinpointRegion"]
        },
        "appName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            {
              "Ref": "appName"
            },
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "appName"
                  },
                  "-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        }
      },
      "DependsOn": "PinpointFunction"
    },
    "CognitoUnauthPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ShouldCreatePinpointApp",
      "Properties": {
        "PolicyName": { "Ref": "unauthPolicyName" },
        "Roles": [{ "Ref": "unauthRoleName" }],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["mobiletargeting:PutEvents", "mobiletargeting:UpdateEndpoint"],
              "Resource": [
                {
                  "Fn::If": [
                    "ShouldCreatePinpointApp",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:mobiletargeting:*:",
                          { "Fn::Select": ["4", { "Fn::Split": [":", { "Ref": "authRoleArn" }] }] },
                          ":apps/",
                          {
                            "Fn::GetAtt": ["PinpointFunctionOutputs", "Id"]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:mobiletargeting:*:",
                          { "Fn::Select": ["4", { "Fn::Split": [":", { "Ref": "authRoleArn" }] }] },
                          ":apps/",
                          {
                            "Ref": "appId"
                          },
                          "*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "CognitoAuthPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ShouldCreatePinpointApp",
      "Properties": {
        "PolicyName": { "Ref": "authPolicyName" },
        "Roles": [{ "Ref": "authRoleName" }],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["mobiletargeting:PutEvents", "mobiletargeting:UpdateEndpoint"],
              "Resource": [
                {
                  "Fn::If": [
                    "ShouldCreatePinpointApp",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:mobiletargeting:*:",
                          { "Fn::Select": ["4", { "Fn::Split": [":", { "Ref": "authRoleArn" }] }] },
                          ":apps/",
                          {
                            "Fn::GetAtt": ["PinpointFunctionOutputs", "Id"]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:mobiletargeting:*:",
                          { "Fn::Select": ["4", { "Fn::Split": [":", { "Ref": "authRoleArn" }] }] },
                          ":apps/",
                          {
                            "Ref": "appId"
                          },
                          "*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "Region": {
      "Value": {
        "Fn::FindInMap": ["RegionMapping", { "Ref": "AWS::Region" }, "pinpointRegion"]
      }
    },
    "Id": {
      "Value": {
        "Fn::If": [
          "ShouldCreatePinpointApp",
          {
            "Fn::GetAtt": ["PinpointFunctionOutputs", "Id"]
          },
          {
            "Ref": "appId"
          }
        ]
      }
    },
    "appName": {
      "Value": {
        "Fn::If": [
          "ShouldCreatePinpointApp",
          {
            "Fn::GetAtt": ["PinpointFunctionOutputs", "Name"]
          },
          {
            "Ref": "appName"
          }
        ]
      }
    }
  }
}
