{"version":3,"file":"in-app-messaging-migration.js","sourceRoot":"","sources":["../../src/migrations/in-app-messaging-migration.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  $TSAny,\n  $TSContext,\n  AmplifyCategories,\n  AmplifySupportedService,\n  JSONUtilities,\n  pathManager,\n  stateManager,\n  readCFNTemplate,\n  writeCFNTemplate,\n} from '@aws-amplify/amplify-cli-core';\nimport fs from 'fs-extra';\nimport * as path from 'path';\nimport { analyticsPush } from '../commands/analytics';\nimport { invokeAuthPush } from '../plugin-client-api-auth';\nimport { getAllDefaults } from '../provider-utils/awscloudformation/default-values/pinpoint-defaults';\nimport { getAnalyticsResources } from '../utils/analytics-helper';\n\nimport {\n  getNotificationsCategoryHasPinpointIfExists,\n  getPinpointRegionMappings,\n  pinpointHasInAppMessagingPolicy,\n  pinpointInAppMessagingPolicyName,\n} from '../utils/pinpoint-helper';\n\n/**\n * checks if the project has been migrated to the latest version of in-app messaging\n */\nexport const inAppMessagingMigrationCheck = async (context: $TSContext): Promise<void> => {\n  const projectBackendDirPath = pathManager.getBackendDirPath();\n  const resources = getAnalyticsResources(context);\n\n  if (resources.length > 0 && !pinpointHasInAppMessagingPolicy(context)) {\n    const amplifyMeta = stateManager.getMeta();\n    const analytics = amplifyMeta[AmplifyCategories.ANALYTICS] || {};\n    Object.keys(analytics).forEach((resourceName) => {\n      const analyticsResourcePath = path.join(projectBackendDirPath, AmplifyCategories.ANALYTICS, resourceName);\n      const templateFilePath = path.join(analyticsResourcePath, 'pinpoint-cloudformation-template.json');\n      if (fs.existsSync(templateFilePath)) {\n        const cfn = JSONUtilities.readJson(templateFilePath);\n        const updatedCfn = migratePinpointCFN(cfn);\n        fs.ensureDirSync(analyticsResourcePath);\n        JSONUtilities.writeJson(templateFilePath, updatedCfn);\n      }\n    });\n  }\n\n  const pinpointApp = getNotificationsCategoryHasPinpointIfExists();\n  if (resources.length === 0 && pinpointApp) {\n    const resourceParameters = getAllDefaults(context.amplify.getProjectDetails());\n    const notificationsInfo = {\n      appName: pinpointApp.appName,\n      resourceName: pinpointApp.appName,\n    };\n\n    Object.assign(resourceParameters, notificationsInfo);\n\n    const resource = resourceParameters.resourceName;\n    delete resourceParameters.resourceName;\n    const analyticsResourcePath = path.join(projectBackendDirPath, AmplifyCategories.ANALYTICS, resource);\n    stateManager.setResourceParametersJson(undefined, AmplifyCategories.ANALYTICS, resource, resourceParameters);\n\n    const templateFileName = 'pinpoint-cloudformation-template.json';\n    const templateFilePath = path.join(analyticsResourcePath, templateFileName);\n    if (!fs.existsSync(templateFilePath)) {\n      const templateSourceFilePath = path.join(\n        __dirname,\n        '..',\n        'provider-utils',\n        'awscloudformation',\n        'cloudformation-templates',\n        templateFileName,\n      );\n      const { cfnTemplate } = readCFNTemplate(templateSourceFilePath);\n      cfnTemplate.Mappings = await getPinpointRegionMappings(context);\n      await writeCFNTemplate(cfnTemplate, templateFilePath);\n    }\n\n    const options = {\n      service: AmplifySupportedService.PINPOINT,\n      providerPlugin: 'awscloudformation',\n    };\n    context.amplify.updateamplifyMetaAfterResourceAdd(AmplifyCategories.ANALYTICS, resource, options);\n\n    context.parameters.options = context.parameters.options ?? {};\n    context.parameters.options.yes = true;\n    context.exeInfo.inputParams = context.exeInfo.inputParams || {};\n    context.exeInfo.inputParams.yes = true;\n\n    await invokeAuthPush(context);\n    await analyticsPush(context);\n  }\n};\n\nconst migratePinpointCFN = (cfn: $TSAny): $TSAny => {\n  const { Parameters, Conditions, Resources } = cfn;\n\n  Parameters[pinpointInAppMessagingPolicyName] = {\n    Type: 'String',\n    Default: 'NONE',\n  };\n\n  Conditions.ShouldEnablePinpointInAppMessaging = {\n    'Fn::Not': [\n      {\n        'Fn::Equals': [\n          {\n            Ref: 'pinpointInAppMessagingPolicyName',\n          },\n          'NONE',\n        ],\n      },\n    ],\n  };\n\n  Resources.PinpointInAppMessagingPolicy = {\n    Condition: 'ShouldEnablePinpointInAppMessaging',\n    Type: 'AWS::IAM::Policy',\n    Properties: {\n      PolicyName: {\n        Ref: 'pinpointInAppMessagingPolicyName',\n      },\n      Roles: [\n        {\n          Ref: 'unauthRoleName',\n        },\n        {\n          Ref: 'authRoleName',\n        },\n      ],\n      PolicyDocument: {\n        Version: '2012-10-17',\n        Statement: [\n          {\n            Effect: 'Allow',\n            Action: ['mobiletargeting:GetInAppMessages'],\n            Resource: [\n              {\n                'Fn::Join': [\n                  '',\n                  [\n                    'arn:aws:mobiletargeting:',\n                    {\n                      'Fn::FindInMap': [\n                        'RegionMapping',\n                        {\n                          Ref: 'AWS::Region',\n                        },\n                        'pinpointRegion',\n                      ],\n                    },\n                    ':',\n                    {\n                      Ref: 'AWS::AccountId',\n                    },\n                    ':apps/',\n                    {\n                      'Fn::GetAtt': ['PinpointFunctionOutputs', 'Id'],\n                    },\n                    '*',\n                  ],\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    },\n  };\n\n  return cfn;\n};\n"]}