{"version":3,"file":"analytics-resource-api.js","sourceRoot":"","sources":["../src/analytics-resource-api.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-depth */\n/* eslint-disable spellcheck/spell-checker */\nimport {\n  AmplifyCategories,\n  AmplifySupportedService,\n  stateManager,\n  IAmplifyResource,\n  pathManager,\n  $TSContext,\n  IAnalyticsResource,\n  PluginAPIError,\n  NotificationChannels,\n  IPluginCapabilityAPIResponse,\n  $TSAny,\n  AmplifyError,\n} from '@aws-amplify/amplify-cli-core';\nimport { getEnvParamManager } from '@aws-amplify/amplify-environment-parameters';\nimport { addResource } from './provider-utils/awscloudformation/index';\nimport { analyticsPush } from './commands/analytics';\nimport { invokeAuthPush } from './plugin-client-api-auth';\nimport { invokeNotificationsAPIGetAvailableChannelNames } from './plugin-client-api-notifications';\nimport { pinpointHasInAppMessagingPolicy } from './utils/pinpoint-helper';\nimport { getAnalyticsResources } from './utils/analytics-helper';\nimport { analyticsMigrations } from './migrations';\nimport { LocalEnvInfo } from '@aws-amplify/amplify-cli-core';\n\n/**\n * Get all analytics resources. If resourceProviderService name is provided,\n * then only return resources matching the service.\n * @returns Array of resources in Analytics category (IAmplifyResource type)\n */\nexport const analyticsPluginAPIGetResources = (resourceProviderServiceName?: string, context?: $TSContext): Array<IAnalyticsResource> =>\n  getAnalyticsResources(context, resourceProviderServiceName);\n\n/**\n * Create an Analytics resource of the given provider type. e.g Pinpoint or Kinesis\n * @param context : CLI Context\n * @param resourceProviderServiceName AWS service which provides the Analytics category.\n * @returns Created amplify resource\n */\nexport const analyticsPluginAPICreateResource = async (\n  context: $TSContext,\n  resourceProviderServiceName: string,\n): Promise<IAmplifyResource> => {\n  const resources: Array<IAmplifyResource> = analyticsPluginAPIGetResources(resourceProviderServiceName);\n  if (resources.length > 0) {\n    return resources[0];\n  }\n  // start add walkthrough for given service.\n  const options = {\n    service: resourceProviderServiceName,\n    providerPlugin: 'awscloudformation',\n  };\n  const resourceName: string = await addResource(context, AmplifyCategories.ANALYTICS, resourceProviderServiceName);\n  context.amplify.updateamplifyMetaAfterResourceAdd(AmplifyCategories.ANALYTICS, resourceName, options);\n  const output: IAmplifyResource = {\n    category: AmplifyCategories.ANALYTICS,\n    resourceName,\n    service: resourceProviderServiceName,\n  };\n  return output;\n};\n\n/**\n * Configure Analytics service to enable Notification channels to client.\n * Currently only Pinpoint supports notifications to the client.\n * @param resourceProviderServiceName - Pinpoint or Kinesis\n * @param channel - Notification channel to be toggled\n * @param enableChannel - True - enable notification/ false - disable notification\n */\nexport const analyticsPluginAPIToggleNotificationChannel = async (\n  resourceProviderServiceName: string,\n  channel: NotificationChannels,\n  enableChannel: boolean,\n): Promise<IPluginCapabilityAPIResponse> => {\n  const response: IPluginCapabilityAPIResponse = {\n    pluginName: AmplifyCategories.ANALYTICS,\n    resourceProviderServiceName,\n    capability: AmplifyCategories.NOTIFICATIONS,\n    subCapability: channel,\n    status: false,\n  };\n\n  if (!isSupportAnalytics(resourceProviderServiceName)) {\n    response.status = false;\n    response.errorCode = PluginAPIError.E_NO_SVC_PROVIDER;\n    response.reasonMsg = `${resourceProviderServiceName} is not a provider for ${AmplifyCategories.ANALYTICS} category`;\n    return response;\n  }\n\n  if (!isSupportNotifications(resourceProviderServiceName)) {\n    response.status = false;\n    response.errorCode = PluginAPIError.E_SVC_PROVIDER_NO_CAPABILITY;\n    response.reasonMsg = `${AmplifyCategories.NOTIFICATIONS} not supported on ${AmplifyCategories.ANALYTICS} provider ${resourceProviderServiceName}`;\n    return response;\n  }\n\n  // Get all resources belonging to the Analytics category and support Notifications capability\n  const resources = analyticsPluginAPIGetResources(resourceProviderServiceName);\n  if (!resources) {\n    response.status = false;\n    response.errorCode = PluginAPIError.E_NO_RESPONSE;\n    response.reasonMsg = `No Resources Found for ${AmplifyCategories.ANALYTICS} category`;\n    return response;\n  }\n\n  // Add notifications to the first pinpoint resource available\n  const pinpointResource = resources[0];\n  if (enableChannel) {\n    await pinpointAPIEnableNotificationChannel(pinpointResource, channel);\n  } else {\n    await pinpointAPIDisableNotificationChannel(pinpointResource, channel);\n  }\n\n  response.status = true;\n  return response;\n};\n\n/**\n * Push Analytics resource to the cloud. If the resourceProviderService exists in the configuration,\n * then this function will attempt to push to the cloud, else return failure.\n * @param context amplify cli context\n * @param resourceProviderServiceName - Pinpoint or Kinesis\n * @returns analytics push status\n */\nexport const analyticsPluginAPIPush = async (\n  context: $TSContext,\n  resourceProviderServiceName: string,\n): Promise<IPluginCapabilityAPIResponse> => {\n  const pushResponse: IPluginCapabilityAPIResponse = {\n    pluginName: AmplifyCategories.ANALYTICS,\n    resourceProviderServiceName,\n    capability: AmplifyCategories.NOTIFICATIONS,\n    status: true,\n  };\n\n  const resources = analyticsPluginAPIGetResources(resourceProviderServiceName, context);\n  if (!resources || resources.length === 0) {\n    pushResponse.status = false;\n    pushResponse.errorCode = PluginAPIError.E_NO_RESPONSE;\n    pushResponse.reasonMsg = `No Resources of ${resourceProviderServiceName} found for ${AmplifyCategories.ANALYTICS} category`;\n  } else {\n    try {\n      await invokeAuthPush(context);\n      await analyticsPushYes(context);\n    } catch (err) {\n      pushResponse.status = false;\n      pushResponse.errorCode = PluginAPIError.E_PUSH_FAILED;\n      pushResponse.reasonMsg = err.message;\n    }\n  }\n  return pushResponse;\n};\n\n/**\n * Execute analytics push command with force yes\n * @param {Object} context - The amplify context.\n */\nexport const analyticsPushYes = async (context: $TSContext): Promise<void> => {\n  const exeInfoClone = { ...context?.exeInfo };\n  const parametersClone = { ...context?.parameters };\n  try {\n    context.exeInfo ??= { inputParams: {}, localEnvInfo: {} as unknown as LocalEnvInfo };\n    context.exeInfo.inputParams = context.exeInfo.inputParams || {};\n    context.exeInfo.inputParams.yes = true; // force yes to avoid prompts\n    context.parameters = context.parameters || {};\n    context.parameters.options = context.parameters.options ?? {};\n    context.parameters.options.yes = true;\n    context.parameters.first = undefined;\n    await analyticsPush(context);\n  } finally {\n    context.exeInfo = exeInfoClone;\n    context.parameters = parametersClone;\n  }\n};\n\n/**\n * Invoke post push hook for all dependent plugins ( e.g. notifications )\n */\nexport const analyticsPluginAPIPostPush = async (context: $TSContext): Promise<$TSContext> => {\n  const amplifyMeta = stateManager.getMeta();\n  let pinpointNotificationsMeta; // build this to update amplify-meta and team-provider-info.json\n  // update state only if analytics and notifications resources are present\n  if (\n    amplifyMeta?.[AmplifyCategories.ANALYTICS] &&\n    Object.keys(amplifyMeta[AmplifyCategories.ANALYTICS]).length > 0 &&\n    amplifyMeta[AmplifyCategories.NOTIFICATIONS] &&\n    Object.keys(amplifyMeta[AmplifyCategories.NOTIFICATIONS]).length > 0\n  ) {\n    // Fetch Analytics data from persistent amplify-meta.json. This is expected to be updated by the push operation.\n    const analyticsResourceList = analyticsPluginAPIGetResources(AmplifySupportedService.PINPOINT);\n    const notificationsResourceName = Object.keys(amplifyMeta[AmplifyCategories.NOTIFICATIONS])[0];\n\n    // Populate the outputs for the notifications plugin.\n    // Get analytics resource on which notifications are enabled\n    const analyticsResource = analyticsResourceList.find((p) => p.resourceName === notificationsResourceName);\n    // Check if the resource is deployed to the cloud.\n    if (analyticsResource?.output?.Id) {\n      pinpointNotificationsMeta = amplifyMeta[AmplifyCategories.NOTIFICATIONS][analyticsResource.resourceName];\n      pinpointNotificationsMeta.Name = pinpointNotificationsMeta.Name || analyticsResource.output.appName;\n      pinpointNotificationsMeta.Id = analyticsResource.output.Id;\n      pinpointNotificationsMeta.Region = analyticsResource.output.Region;\n      // Update Notifications output and channel metadata\n      pinpointNotificationsMeta.output = pinpointNotificationsMeta.output || {};\n      pinpointNotificationsMeta.output.Id = analyticsResource.output.Id;\n      pinpointNotificationsMeta.output.regulatedResourceName = analyticsResource.resourceName; // without the env suffix\n      pinpointNotificationsMeta.output.region = analyticsResource.output.Region;\n\n      amplifyMeta[AmplifyCategories.NOTIFICATIONS][analyticsResource.resourceName] = pinpointNotificationsMeta;\n      // For each channel, update the ApplicationId into the Notification resource.\n      const channelNames = await invokeNotificationsAPIGetAvailableChannelNames(context);\n      for (const channelName of channelNames) {\n        if (pinpointNotificationsMeta.output[channelName]) {\n          pinpointNotificationsMeta.output[channelName].ApplicationId = analyticsResource.output.Id;\n          pinpointNotificationsMeta.output[channelName].Name = analyticsResource.output.appName; // with the env suffix\n        }\n      }\n      // update the notifications meta into the context\n      amplifyMeta[AmplifyCategories.NOTIFICATIONS][analyticsResource.resourceName] = pinpointNotificationsMeta;\n    }\n  }\n\n  if (amplifyMeta.analytics && context.exeInfo.amplifyMeta) {\n    context.exeInfo.amplifyMeta.analytics = Object.assign(context.exeInfo.amplifyMeta.analytics, amplifyMeta.analytics);\n  }\n  if (amplifyMeta.notifications && context.exeInfo.amplifyMeta) {\n    context.exeInfo.amplifyMeta.notifications = Object.assign(context.exeInfo.amplifyMeta.notifications, amplifyMeta.notifications);\n  }\n  // save updated notifications meta\n  if (amplifyMeta) {\n    stateManager.setMeta(undefined, amplifyMeta);\n  }\n  // save updated notifications team-provider-info.json\n  if (pinpointNotificationsMeta) {\n    await writeNotificationsTeamProviderInfo(pinpointNotificationsMeta);\n  }\n\n  // Generate frontend exports from currentMeta.\n  // note:- Since this is postPush - currentMeta is the source of truth.\n  await context.amplify.onCategoryOutputsChange(context, undefined, undefined);\n  // note:-\n  // The calling function is expected to\n  // 1. Copy the team-provider-info and backend-config file into currentCloudBackendDir\n  // 2. Upload the currentCloudBackendDir to the cloud.\n  return context;\n};\n\n/**\n * Build team provider info for notifications\n * @param pinpointMeta ( for Id, Region and env specific resource name)\n */\nconst writeNotificationsTeamProviderInfo = async (pinpointMeta: $TSAny): Promise<void> => {\n  if (!pinpointMeta) {\n    return;\n  }\n  const envParamManager = getEnvParamManager();\n  const params = {\n    Name: pinpointMeta.Name,\n    Id: pinpointMeta.Id,\n    Region: pinpointMeta.Region,\n  };\n  // set params in the notifications and analytics resource param manager\n  [AmplifyCategories.NOTIFICATIONS, AmplifyCategories.ANALYTICS]\n    .map((category) => envParamManager.getResourceParamManager(category, AmplifySupportedService.PINPOINT))\n    .forEach((resourceParamManager) => {\n      resourceParamManager.setAllParams(params);\n    });\n};\n\n/**\n * Build the Notification channel's IAM policy name using the same shortID as the pinpoint policy name\n **/\nconst buildPolicyName = (channel: string, pinpointPolicyName: string): string => {\n  // split the policy name by the prefix\n  const shortId = pinpointPolicyName.split('pinpointPolicy')[1];\n  return `pinpoint${channel}PolicyName${shortId}`;\n};\n\n// Capability: In the future replace with \"capabilities\" lookup\nconst isSupportNotifications = (resourceProviderName: string): boolean => resourceProviderName === AmplifySupportedService.PINPOINT;\n\n// Capability: In the future replace with \"capabilities\" lookup\nconst isSupportAnalytics = (resourceProviderName: string): boolean =>\n  resourceProviderName === AmplifySupportedService.PINPOINT || resourceProviderName === AmplifySupportedService.KINESIS;\n\nconst pinpointAPIEnableNotificationChannel = (\n  pinpointResource: IAmplifyResource,\n  notificationChannel: NotificationChannels,\n): Promise<unknown> => {\n  const pinpointResourceName = pinpointResource.resourceName;\n  const projectPath = pathManager.findProjectRoot();\n  const pinPointCFNInputParams = stateManager.getResourceParametersJson(projectPath, AmplifyCategories.ANALYTICS, pinpointResourceName);\n  const uniqueChannelPolicyName = buildPolicyName(notificationChannel, pinPointCFNInputParams.pinpointPolicyName);\n  switch (notificationChannel) {\n    case NotificationChannels.IN_APP_MSG: {\n      pinPointCFNInputParams[`pinpoint${notificationChannel}PolicyName`] = uniqueChannelPolicyName;\n      stateManager.setResourceParametersJson(projectPath, AmplifyCategories.ANALYTICS, pinpointResourceName, pinPointCFNInputParams);\n      break;\n    }\n    default: {\n      throw new AmplifyError('ConfigurationError', {\n        message: `Channel ${notificationChannel} is not supported on Analytics resource`,\n        resolution: 'Use one of the supported channels',\n      });\n    }\n  }\n  return pinPointCFNInputParams;\n};\n\nconst pinpointAPIDisableNotificationChannel = (\n  pinpointResource: IAmplifyResource,\n  notificationChannel: NotificationChannels,\n): Promise<unknown> => {\n  const pinpointResourceName = pinpointResource.resourceName;\n  const projectPath = pathManager.findProjectRoot();\n  const pinPointCFNInputParams = stateManager.getResourceParametersJson(projectPath, AmplifyCategories.ANALYTICS, pinpointResourceName);\n  switch (notificationChannel) {\n    case NotificationChannels.IN_APP_MSG: {\n      // Remove IAM policy required for given channel from params.json\n      delete pinPointCFNInputParams[`pinpoint${notificationChannel}PolicyName`];\n      stateManager.setResourceParametersJson(projectPath, AmplifyCategories.ANALYTICS, pinpointResourceName, pinPointCFNInputParams);\n      break;\n    }\n    default: {\n      throw new AmplifyError('ConfigurationError', {\n        message: `Channel ${notificationChannel} is not supported on Analytics resource`,\n        resolution: 'Use one of the supported channels',\n      });\n    }\n  }\n  return pinPointCFNInputParams;\n};\n\n/**\n * Checks if analytics pinpoint resource has in-app messaging policy\n */\nexport const analyticsPluginAPIPinpointHasInAppMessagingPolicy = async (context: $TSContext): Promise<boolean> =>\n  pinpointHasInAppMessagingPolicy(context);\n\n/**\n * Exposes the analytics migration API\n */\nexport const analyticsPluginAPIMigrations = (context: $TSContext): Promise<void> => analyticsMigrations(context);\n"]}