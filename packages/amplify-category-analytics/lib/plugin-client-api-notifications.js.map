{"version":3,"file":"plugin-client-api-notifications.js","sourceRoot":"","sources":["../src/plugin-client-api-notifications.ts"],"names":[],"mappings":";;;AAAA,oEAA0H;AAMnH,MAAM,iCAAiC,GAAG,KAAK,EAAE,OAAmB,EAA+C,EAAE;IAC1H,MAAM,qBAAqB,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,kBAAkB,CACpE,OAAO,EACP,oCAAiB,CAAC,aAAa,EAC/B,SAAS,EACT,mCAAmC,EACnC,CAAC,OAAO,CAAC,CACV,CAAC;IACF,OAAO,qBAAqB,CAAC,CAAC,CAAE,qBAAgD,CAAC,CAAC,CAAC,SAAS,CAAC;AAC/F,CAAC,CAAC;AATW,QAAA,iCAAiC,qCAS5C;AAMK,MAAM,wCAAwC,GAAG,KAAK,EAAE,OAAmB,EAAE,OAAe,EAA+B,EAAE,CAClI,CAAC,MAAM,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,iCAAiC,EAAE;IAChH,OAAO;IACP,OAAO;CACR,CAAC,CAAuB,CAAC;AAJf,QAAA,wCAAwC,4CAIzB;AAQrB,MAAM,iCAAiC,GAAG,KAAK,EAAE,OAAmB,EAAE,YAAoB,EAAoB,EAAE;IACrH,MAAM,qBAAqB,GAAG,MAAM,IAAA,yCAAiC,EAAC,OAAO,CAAC,CAAC;IAC/E,IAAI,CAAC,CAAA,qBAAqB,aAArB,qBAAqB,uBAArB,qBAAqB,CAAE,YAAY,CAAA;QAAE,OAAO,KAAK,CAAC;IACvD,OAAO,CAAA,qBAAqB,aAArB,qBAAqB,uBAArB,qBAAqB,CAAE,YAAY,MAAK,YAAY,CAAC;AAC9D,CAAC,CAAC;AAJW,QAAA,iCAAiC,qCAI5C;AAOK,MAAM,8CAA8C,GAAG,KAAK,EAAE,OAAmB,EAAqB,EAAE,CAC7G,CAAC,MAAM,OAAO,CAAC,OAAO,CAAC,kBAAkB,CACvC,OAAO,EACP,oCAAiB,CAAC,aAAa,EAC/B,SAAS,EACT,0CAA0C,EAC1C,CAAC,OAAO,CAAC,CACV,CAAa,CAAC;AAPJ,QAAA,8CAA8C,kDAO1C","sourcesContent":["import { $TSContext, AmplifyCategories, INotificationsResource, IPluginAPIResponse } from '@aws-amplify/amplify-cli-core';\n\n/**\n * Get the notification resource config.\n * @returns Resource in Notifications category (IAmplifyResource type)\n */\nexport const invokeNotificationsAPIGetResource = async (context: $TSContext): Promise<INotificationsResource | undefined> => {\n  const notificationsResource = await context.amplify.invokePluginMethod(\n    context,\n    AmplifyCategories.NOTIFICATIONS,\n    undefined,\n    'notificationsPluginAPIGetResource',\n    [context],\n  );\n  return notificationsResource ? (notificationsResource as INotificationsResource) : undefined;\n};\n\n/**\n * Remove Notifications resource and all channels\n * @returns API response\n */\nexport const invokeNotificationsAPIRecursiveRemoveApp = async (context: $TSContext, appName: string): Promise<IPluginAPIResponse> =>\n  (await context.amplify.invokePluginMethod(context, 'notifications', undefined, 'notificationsPluginAPIRemoveApp', [\n    context,\n    appName,\n  ])) as IPluginAPIResponse;\n\n/**\n * Checks if Pinpoint resource is in use by Notifications category\n * @param context amplify cli context\n * @param resourceName Pinpoint resource name\n * @returns true if Pinpoint resource is in use\n */\nexport const checkResourceInUseByNotifications = async (context: $TSContext, resourceName: string): Promise<boolean> => {\n  const notificationsResource = await invokeNotificationsAPIGetResource(context);\n  if (!notificationsResource?.resourceName) return false;\n  return notificationsResource?.resourceName === resourceName;\n};\n\n/**\n * Returns all the channel names allowed in the Notifications category\n * @param context amplify cli context\n * @returns array of allowed channel names\n */\nexport const invokeNotificationsAPIGetAvailableChannelNames = async (context: $TSContext): Promise<string[]> =>\n  (await context.amplify.invokePluginMethod(\n    context,\n    AmplifyCategories.NOTIFICATIONS,\n    undefined,\n    'notificationsAPIGetAvailableChannelNames',\n    [context],\n  )) as string[];\n"]}