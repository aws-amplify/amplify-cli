{"version":3,"file":"add.js","sourceRoot":"","sources":["../../../src/commands/analytics/add.ts"],"names":[],"mappings":";;;AAIA,kEAAuD;AAEvD,MAAM,UAAU,GAAG,KAAK,CAAC;AACzB,MAAM,QAAQ,GAAG,WAAW,CAAC;AAE7B,IAAI,OAAe,CAAC;AAMb,MAAM,GAAG,GAAG,KAAK,EAAE,OAAmB,EAAmB,EAAE;IAChE,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;IAC5B,MAAM,gBAAgB,GAAG,OAAO,CAAC,YAAY,CAAC,GAAG,SAAS,+CAA+C,CAAC,CAAC;IAC3G,OAAO,OAAO;SACX,sBAAsB,CAAC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,8BAA8B,CAAC;SAC3F,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;QACf,OAAO,GAAG;YACR,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,cAAc,EAAE,MAAM,CAAC,YAAY;SACpC,CAAC;QACF,MAAM,kBAAkB,GAAG,OAAO,CAAC,wBAAwB,MAAM,CAAC,YAAY,QAAQ,CAAC,CAAC;QACxF,IAAI,CAAC,kBAAkB,EAAE;YACvB,yBAAO,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC3D,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,kBAAkB,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAC3E,CAAC,CAAC;SACD,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE;QACrB,IAAI,YAAY,EAAE;YAChB,OAAO,CAAC,iCAAiC,CAAC,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YAC3E,yBAAO,CAAC,OAAO,CAAC,+BAA+B,YAAY,UAAU,CAAC,CAAC;YACvE,yBAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACjB,yBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YACpC,yBAAO,CAAC,IAAI,CAAC,4FAA4F,CAAC,CAAC;YAC3G,yBAAO,CAAC,IAAI,CACV,+IAA+I,CAChJ,CAAC;YACF,yBAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAClB;IACH,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QACb,yBAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,yBAAO,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAC;QAClE,KAAK,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AApCW,QAAA,GAAG,OAoCd;AAEW,QAAA,IAAI,GAAG,UAAU,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\n/* eslint-disable import/no-dynamic-require */\nimport { $TSAny, $TSContext } from '@aws-amplify/amplify-cli-core';\nimport { printer } from '@aws-amplify/amplify-prompts';\n\nconst subcommand = 'add';\nconst category = 'analytics';\n\nlet options: $TSAny;\n\n/**\n * Add handling for Analytics resource\n * @param context amplify cli context\n */\nexport const run = async (context: $TSContext): Promise<$TSAny> => {\n  const { amplify } = context;\n  const servicesMetadata = amplify.readJsonFile(`${__dirname}/../../provider-utils/supported-services.json`);\n  return amplify\n    .serviceSelectionPrompt(context, category, servicesMetadata, 'Select an Analytics provider')\n    .then((result) => {\n      options = {\n        service: result.service,\n        providerPlugin: result.providerName,\n      };\n      const providerController = require(`../../provider-utils/${result.providerName}/index`);\n      if (!providerController) {\n        printer.error('Provider not configured for this category');\n        return undefined;\n      }\n      return providerController.addResource(context, category, result.service);\n    })\n    .then((resourceName) => {\n      if (resourceName) {\n        amplify.updateamplifyMetaAfterResourceAdd(category, resourceName, options);\n        printer.success(`Successfully added resource ${resourceName} locally`);\n        printer.info('');\n        printer.success('Some next steps:');\n        printer.info('\"amplify push\" builds all of your local backend resources and provisions them in the cloud');\n        printer.info(\n          '\"amplify publish\" builds all your local backend and front-end resources (if you have hosting category added) and provisions them in the cloud',\n        );\n        printer.info('');\n      }\n    })\n    .catch((err) => {\n      printer.info(err.stack);\n      printer.error('There was an error adding the analytics resource');\n      void context.usageData.emitError(err);\n      process.exitCode = 1;\n    });\n};\n\nexport const name = subcommand;\n"]}