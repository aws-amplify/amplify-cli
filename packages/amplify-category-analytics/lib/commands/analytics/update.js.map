{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../src/commands/analytics/update.ts"],"names":[],"mappings":";;;AACA,kEAAuD;AAEvD,MAAM,UAAU,GAAG,QAAQ,CAAC;AAC5B,MAAM,QAAQ,GAAG,WAAW,CAAC;AAOtB,MAAM,GAAG,GAAG,KAAK,EAAE,OAAmB,EAAmB,EAAE;IAChE,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;IAC5B,MAAM,gBAAgB,GAAG,OAAO,CAAC,YAAY,CAAC,GAAG,SAAS,+CAA+C,CAAC,CAAC;IAE3G,OAAO,OAAO;SACX,sBAAsB,CAAC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,CAAC;SAC3D,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;QACf,MAAM,OAAO,GAAG;YACd,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,cAAc,EAAE,MAAM,CAAC,YAAY;SACpC,CAAC;QAGF,MAAM,kBAAkB,GAAG,OAAO,CAAC,wBAAwB,MAAM,CAAC,YAAY,QAAQ,CAAC,CAAC;QACxF,IAAI,CAAC,kBAAkB,EAAE;YACvB,yBAAO,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC3D,OAAO,SAAS,CAAC;SAClB;QAED,OAAO,kBAAkB,CAAC,cAAc,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACvF,CAAC,CAAC;SACD,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE;QACrB,yBAAO,CAAC,OAAO,CAAC,iCAAiC,YAAY,UAAU,CAAC,CAAC;QACzE,yBAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACjB,yBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QACpC,yBAAO,CAAC,IAAI,CAAC,0FAA0F,CAAC,CAAC;QACzG,yBAAO,CAAC,IAAI,CACV,+IAA+I,CAChJ,CAAC;QACF,yBAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACnB,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QACb,yBAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,yBAAO,CAAC,KAAK,CAAC,mCAAmC,QAAQ,WAAW,CAAC,CAAC;QACtE,KAAK,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AArCW,QAAA,GAAG,OAqCd;AAEW,QAAA,IAAI,GAAG,UAAU,CAAC;AAClB,QAAA,KAAK,GAAG,CAAC,WAAW,CAAC,CAAC","sourcesContent":["import { $TSContext, $TSAny } from '@aws-amplify/amplify-cli-core';\nimport { printer } from '@aws-amplify/amplify-prompts';\n\nconst subcommand = 'update';\nconst category = 'analytics';\n\n/**\n * Update resource handler for Analytics category\n * @param context amplify cli context\n * @returns response from the resource's update function\n */\nexport const run = async (context: $TSContext): Promise<$TSAny> => {\n  const { amplify } = context;\n  const servicesMetadata = amplify.readJsonFile(`${__dirname}/../../provider-utils/supported-services.json`);\n\n  return amplify\n    .serviceSelectionPrompt(context, category, servicesMetadata)\n    .then((result) => {\n      const options = {\n        service: result.service,\n        providerPlugin: result.providerName,\n      };\n\n      // eslint-disable-next-line import/no-dynamic-require, global-require, @typescript-eslint/no-var-requires\n      const providerController = require(`../../provider-utils/${result.providerName}/index`);\n      if (!providerController) {\n        printer.error('Provider not configured for this category');\n        return undefined;\n      }\n\n      return providerController.updateResource(context, category, result.service, options);\n    })\n    .then((resourceName) => {\n      printer.success(`Successfully updated resource ${resourceName} locally`);\n      printer.info('');\n      printer.success('Some next steps:');\n      printer.info('\"amplify push\" will build all your local backend resources and provision it in the cloud');\n      printer.info(\n        '\"amplify publish\" will build all your local backend and frontend resources (if you have hosting category added) and provision it in the cloud',\n      );\n      printer.info('');\n    })\n    .catch((err) => {\n      printer.info(err.stack);\n      printer.error(`There was an error updating the ${category} resource`);\n      void context.usageData.emitError(err);\n      process.exitCode = 1;\n    });\n};\n\nexport const name = subcommand;\nexport const alias = ['configure'];\n"]}