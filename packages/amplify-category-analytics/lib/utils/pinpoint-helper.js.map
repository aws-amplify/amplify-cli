{"version":3,"file":"pinpoint-helper.js","sourceRoot":"","sources":["../../src/utils/pinpoint-helper.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AmplifySupportedService,\n  pathManager,\n  readCFNTemplate,\n  open,\n  $TSAny,\n  $TSContext,\n  $TSMeta,\n  AmplifyCategories,\n  stateManager,\n} from '@aws-amplify/amplify-cli-core';\nimport { printer } from '@aws-amplify/amplify-prompts';\nimport * as path from 'path';\nimport { getAnalyticsResources } from './analytics-helper';\n\n/**\n * Pinpoint app type definition\n */\nexport type PinpointApp = {\n  appId: string;\n  appName: string;\n};\n\nexport const pinpointInAppMessagingPolicyName = 'pinpointInAppMessagingPolicyName';\n\n/**\n * opens resource in AWS console\n */\nexport const console = async (context: $TSContext): Promise<void> => {\n  const amplifyMeta = context.amplify.getProjectMeta();\n  let pinpointApp = scanCategoryMetaForPinpoint(amplifyMeta[AmplifyCategories.ANALYTICS]);\n  if (!pinpointApp) {\n    pinpointApp = scanCategoryMetaForPinpoint(amplifyMeta[AmplifyCategories.NOTIFICATIONS]);\n  }\n  if (pinpointApp) {\n    const { Id, Region } = pinpointApp;\n    const consoleUrl = `https://${Region}.console.aws.amazon.com/pinpoint/home/?region=${Region}#/apps/${Id}/analytics/overview`;\n    await open(consoleUrl, { wait: false });\n  } else {\n    printer.error('Neither analytics nor notifications is enabled in the cloud.');\n  }\n};\n\nconst scanCategoryMetaForPinpoint = (categoryMeta: $TSMeta): $TSAny => {\n  let result: $TSAny;\n  if (categoryMeta) {\n    const services = Object.keys(categoryMeta);\n    for (const service of services) {\n      const serviceMeta = categoryMeta[service];\n      if (serviceMeta.service === 'Pinpoint' && serviceMeta.output && serviceMeta.output.Id) {\n        result = {\n          Id: serviceMeta.output.Id,\n        };\n        if (serviceMeta.output.Name) {\n          result.Name = serviceMeta.output.Name;\n        } else if (serviceMeta.output.appName) {\n          result.Name = serviceMeta.output.appName;\n        }\n\n        if (serviceMeta.output.Region) {\n          result.Region = serviceMeta.output.Region;\n        }\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * checks if the project has a pinpoint resource\n */\nexport const hasResource = (context: $TSContext): boolean => {\n  const amplifyMeta = context.amplify.getProjectMeta();\n  let pinpointApp = scanCategoryMetaForPinpoint(amplifyMeta[AmplifyCategories.ANALYTICS]);\n  if (!pinpointApp) {\n    pinpointApp = scanCategoryMetaForPinpoint(amplifyMeta[AmplifyCategories.NOTIFICATIONS]);\n  }\n\n  return pinpointApp !== undefined;\n};\n\n/**\n * Checks if pinpoint has in app messaging policy\n */\nexport const pinpointHasInAppMessagingPolicy = (context: $TSContext): boolean => {\n  const resources = getAnalyticsResources(context, AmplifySupportedService.PINPOINT);\n  if (resources?.length === 0) {\n    return false;\n  }\n\n  const pinpointCloudFormationTemplatePath = path.join(\n    pathManager.getBackendDirPath(),\n    AmplifyCategories.ANALYTICS,\n    resources[0].resourceName,\n    `pinpoint-cloudformation-template.json`,\n  );\n  const { cfnTemplate } = readCFNTemplate(pinpointCloudFormationTemplatePath, { throwIfNotExist: false }) || {};\n  return !!cfnTemplate?.Parameters?.[pinpointInAppMessagingPolicyName];\n};\n\n/**\n * checks if notifications category has a pinpoint resource - legacy projects\n */\nexport const getNotificationsCategoryHasPinpointIfExists = (): PinpointApp | undefined => {\n  const amplifyMeta = stateManager.getMeta();\n  if (amplifyMeta.notifications) {\n    const categoryResources = amplifyMeta.notifications;\n    const pinpointServiceResource = Object.keys(categoryResources).find(\n      (resource: string) =>\n        categoryResources[resource].service === AmplifySupportedService.PINPOINT && categoryResources[resource].output.Id,\n    );\n\n    if (pinpointServiceResource) {\n      return {\n        appId: categoryResources[pinpointServiceResource].output.Id,\n        appName: pinpointServiceResource,\n      };\n    }\n  }\n\n  return undefined;\n};\n\n/**\n * returns provider pinpoint region mapping\n */\nexport const getPinpointRegionMappings = async (context: $TSContext): Promise<Record<string, $TSAny>> => {\n  const Mappings: Record<string, $TSAny> = {\n    RegionMapping: {},\n  };\n  const regionMapping: $TSAny = await context.amplify.invokePluginMethod(\n    context,\n    'awscloudformation',\n    undefined,\n    'getPinpointRegionMapping',\n    [],\n  );\n  Object.keys(regionMapping).forEach((region) => {\n    Mappings.RegionMapping[region] = {\n      pinpointRegion: regionMapping[region],\n    };\n  });\n  return Mappings;\n};\n"]}