{"version":3,"file":"kinesis-helper.js","sourceRoot":"","sources":["../../src/utils/kinesis-helper.ts"],"names":[],"mappings":";;;AAAA,oEAA8H;AAC9H,kEAAuD;AAKhD,MAAM,OAAO,GAAG,KAAK,EAAE,OAAmB,EAAiB,EAAE;IAClE,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;IACrD,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;IACjD,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC;IAEjF,MAAM,UAAU,GAAG,0BAA0B,CAAC,WAAW,CAAC,oCAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;IACxF,IAAI,UAAU,EAAE;QACd,MAAM,EAAE,EAAE,EAAE,GAAG,UAAU,CAAC;QAC1B,MAAM,UAAU,GAAG,WAAW,MAAM,+CAA+C,MAAM,gCAAgC,EAAE,cAAc,CAAC;QAC1I,MAAM,IAAA,uBAAI,EAAC,UAAU,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;KACzC;SAAM;QACL,yBAAO,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;KACvD;AACH,CAAC,CAAC;AAbW,QAAA,OAAO,WAalB;AAEF,MAAM,0BAA0B,GAAG,CAAC,YAAqB,EAAU,EAAE;IAEnE,IAAI,MAAc,CAAC;IACnB,IAAI,YAAY,EAAE;QAChB,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC3C,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC9B,MAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;YAC1C,IAAI,WAAW,CAAC,OAAO,KAAK,0CAAuB,CAAC,OAAO,IAAI,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,MAAM,CAAC,eAAe,EAAE;gBACvH,MAAM,GAAG;oBACP,EAAE,EAAE,WAAW,CAAC,MAAM,CAAC,eAAe;iBACvC,CAAC;gBACF,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE;oBAC3B,MAAM,CAAC,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC;iBACvC;qBAAM,IAAI,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE;oBACrC,MAAM,CAAC,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC;iBAC1C;gBAED,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE;oBAC7B,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC;iBAC3C;gBACD,MAAM;aACP;SACF;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAKK,MAAM,WAAW,GAAG,CAAC,OAAmB,EAAW,EAAE;IAC1D,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;IACrD,OAAO,0BAA0B,CAAC,WAAW,CAAC,oCAAiB,CAAC,SAAS,CAAC,CAAC,KAAK,SAAS,CAAC;AAC5F,CAAC,CAAC;AAHW,QAAA,WAAW,eAGtB","sourcesContent":["import { $TSAny, $TSContext, $TSMeta, AmplifyCategories, AmplifySupportedService, open } from '@aws-amplify/amplify-cli-core';\nimport { printer } from '@aws-amplify/amplify-prompts';\n\n/**\n * opens resource in AWS console\n */\nexport const console = async (context: $TSContext): Promise<void> => {\n  const amplifyMeta = context.amplify.getProjectMeta();\n  const { envName } = context.amplify.getEnvInfo();\n  const region = context.amplify.getEnvDetails()[envName].awscloudformation.Region;\n\n  const kinesisApp = scanCategoryMetaForKinesis(amplifyMeta[AmplifyCategories.ANALYTICS]);\n  if (kinesisApp) {\n    const { Id } = kinesisApp;\n    const consoleUrl = `https://${region}.console.aws.amazon.com/kinesis/home?region=${region}#/streams/details?streamName=${Id}&tab=details`;\n    await open(consoleUrl, { wait: false });\n  } else {\n    printer.error('Kinesis is not enabled in the cloud.');\n  }\n};\n\nconst scanCategoryMetaForKinesis = (categoryMeta: $TSMeta): $TSAny => {\n  // single kinesis resource for now\n  let result: $TSAny;\n  if (categoryMeta) {\n    const services = Object.keys(categoryMeta);\n    for (const service of services) {\n      const serviceMeta = categoryMeta[service];\n      if (serviceMeta.service === AmplifySupportedService.KINESIS && serviceMeta.output && serviceMeta.output.kinesisStreamId) {\n        result = {\n          Id: serviceMeta.output.kinesisStreamId,\n        };\n        if (serviceMeta.output.Name) {\n          result.Name = serviceMeta.output.Name;\n        } else if (serviceMeta.output.appName) {\n          result.Name = serviceMeta.output.appName;\n        }\n\n        if (serviceMeta.output.Region) {\n          result.Region = serviceMeta.output.Region;\n        }\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * checks if the project has a kinesis resource\n */\nexport const hasResource = (context: $TSContext): boolean => {\n  const amplifyMeta = context.amplify.getProjectMeta();\n  return scanCategoryMetaForKinesis(amplifyMeta[AmplifyCategories.ANALYTICS]) !== undefined;\n};\n"]}