{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { $TSContext, $TSAny, AmplifyFault } from '@aws-amplify/amplify-cli-core';\nimport * as path from 'path';\nimport { printer, prompter } from '@aws-amplify/amplify-prompts';\nimport * as pinpointHelper from './utils/pinpoint-helper';\nimport * as kinesisHelper from './utils/kinesis-helper';\nimport { migrationCheck } from './migrations';\n\nexport { migrate } from './provider-utils/awscloudformation/service-walkthroughs/pinpoint-walkthrough';\n\nexport {\n  analyticsPluginAPIGetResources,\n  analyticsPluginAPICreateResource,\n  analyticsPluginAPIToggleNotificationChannel,\n  analyticsPluginAPIPinpointHasInAppMessagingPolicy,\n  analyticsPluginAPIMigrations,\n  analyticsPluginAPIPostPush,\n  analyticsPluginAPIPush,\n} from './analytics-resource-api';\n\nconst category = 'analytics';\n\n/**\n * Command to open AWS console for kinesis/pinpoint\n * @param context amplify cli context\n */\nexport const console = async (context: $TSContext): Promise<void> => {\n  const hasKinesisResource = kinesisHelper.hasResource(context);\n  const hasPinpointResource = pinpointHelper.hasResource(context);\n\n  let selectedResource;\n  if (hasKinesisResource && hasPinpointResource) {\n    selectedResource = await prompter.pick('Select resource', ['kinesis', 'pinpoint']);\n  } else if (hasKinesisResource) {\n    selectedResource = 'kinesis';\n  } else if (hasPinpointResource) {\n    selectedResource = 'pinpoint';\n  } else {\n    printer.error('Neither analytics nor notifications is enabled in the cloud.');\n  }\n\n  switch (selectedResource) {\n    case 'kinesis':\n      await kinesisHelper.console(context);\n      break;\n    case 'pinpoint':\n      await pinpointHelper.console(context);\n      break;\n    default:\n      break;\n  }\n};\n\n/**\n * Get Permission policies for CloudFormation\n * @param context cli context\n * @param resourceOpsMapping - get permission policies for each analytics resource\n */\nexport const getPermissionPolicies = async (context: $TSContext, resourceOpsMapping: { [x: string]: $TSAny }): Promise<$TSAny> => {\n  const amplifyMetaFilePath = context.amplify.pathManager.getAmplifyMetaFilePath();\n  const amplifyMeta = context.amplify.readJsonFile(amplifyMetaFilePath);\n  const permissionPolicies: $TSAny[] = [];\n  const resourceAttributes: $TSAny[] = [];\n\n  for (const resourceName of Object.keys(resourceOpsMapping)) {\n    try {\n      const providerName = amplifyMeta[category][resourceName].providerPlugin;\n      if (providerName) {\n        const providerController = await import(`./provider-utils/${providerName}/index`);\n        const { policy, attributes } = providerController.getPermissionPolicies(\n          context,\n          amplifyMeta[category][resourceName].service,\n          resourceName,\n          resourceOpsMapping[resourceName],\n        );\n        permissionPolicies.push(policy);\n        resourceAttributes.push({ resourceName, attributes, category });\n      } else {\n        printer.error(`Provider not configured for ${category}: ${resourceName}`);\n      }\n    } catch (e) {\n      throw new AmplifyFault(\n        'AnalyticsCategoryFault',\n        {\n          message: `Could not get policies for ${category}: ${resourceName}`,\n        },\n        e,\n      );\n    }\n  }\n  return { permissionPolicies, resourceAttributes };\n};\n\n/**\n * Execute the Amplify CLI command\n * @param context - Amplify CLI context\n */\nexport const executeAmplifyCommand = async (context: $TSContext): Promise<$TSAny> => {\n  context.exeInfo = context.amplify.getProjectDetails();\n  await migrationCheck(context);\n\n  let commandPath = path.normalize(path.join(__dirname, 'commands'));\n  commandPath =\n    context.input.command === 'help' ? path.join(commandPath, category) : path.join(commandPath, category, context.input.command);\n\n  const commandModule = await import(commandPath);\n  await commandModule.run(context);\n};\n\n/**\n *  Placeholder for Amplify events\n *  @param __context amplify cli context\n *  @param args event handler arguments\n */\nexport const handleAmplifyEvent = async (__context: $TSContext, args: $TSAny): Promise<void> => {\n  printer.info(`${category} handleAmplifyEvent to be implemented`);\n  printer.info(`Received event args ${args}`);\n};\n"]}