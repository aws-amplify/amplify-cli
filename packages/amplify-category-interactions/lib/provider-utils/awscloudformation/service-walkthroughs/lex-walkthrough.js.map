{"version":3,"file":"lex-walkthrough.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/service-walkthroughs/lex-walkthrough.ts"],"names":[],"mappings":"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","sourcesContent":["import { $TSAny, $TSContext, $TSMeta, AmplifyError, AmplifyFault } from '@aws-amplify/amplify-cli-core';\nimport { alphanumeric, and, between, matchRegex, maxLength, minLength, printer, prompter } from '@aws-amplify/amplify-prompts';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { JSONUtilities } from '@aws-amplify/amplify-cli-core';\nimport { LexSlot, LexSlotType, LexSamples } from '../../supported-services';\n\nconst category = 'interactions';\nconst parametersFileName = 'lex-params.json';\nconst cfnParametersFilename = 'parameters.json';\nconst serviceName = 'Lex';\n\ntype LexAnswers = {\n  resourceName: string;\n  botName: string;\n  intentName?: string;\n  outputVoice?: string;\n  utterances?: string[];\n  intents?: { intentName: string }[];\n  slots?: LexSlot[];\n  newSlotTypes?: string[];\n  coppa?: boolean;\n  sessionTimeout?: number;\n};\n\nexport const addWalkthrough = async (context: $TSContext, defaultValuesFilename: string, serviceMetadata: string): Promise<LexAnswers> => {\n  return configure(context, defaultValuesFilename, serviceMetadata);\n};\n\nexport const updateWalkthrough = async (\n  context: $TSContext,\n  defaultValuesFilename: string,\n  serviceMetadata: $TSMeta,\n): Promise<LexAnswers> => {\n  // const resourceName = resourceAlreadyExists(context);\n  const { amplify } = context;\n  context.exeInfo = amplify.getProjectDetails();\n  const { amplifyMeta } = context.exeInfo;\n\n  const lexResources: $TSAny = {};\n\n  Object.keys(amplifyMeta[category]).forEach((resourceName) => {\n    if (amplifyMeta[category][resourceName].service === serviceName && amplifyMeta[category][resourceName].mobileHubMigrated !== true) {\n      lexResources[resourceName] = amplifyMeta[category][resourceName];\n    }\n  });\n\n  if (!amplifyMeta[category] || Object.keys(lexResources).length === 0) {\n    throw new AmplifyFault('ResourceNotFoundFault', {\n      message: 'No resources to update. You need to add a resource.',\n    });\n  }\n\n  const answer = await prompter.pick('Specify the resource that you would want to update', Object.keys(lexResources));\n  return configure(context, defaultValuesFilename, serviceMetadata, answer);\n};\n\n// Goes through Lex walkthrough\nconst configure = async (\n  context: $TSContext,\n  defaultValuesFilename: string,\n  serviceMetadata: $TSMeta,\n  resourceName?: string,\n): Promise<LexAnswers> => {\n  const { amplify } = context;\n  context.exeInfo = amplify.getProjectDetails();\n\n  const { samples } = serviceMetadata;\n  const defaultValuesSrc = `${__dirname}/../default-values/${defaultValuesFilename}`;\n  const { getAllDefaults } = require(defaultValuesSrc);\n  const defaultValues = getAllDefaults(amplify.getProjectDetails());\n\n  printer.blankLine();\n  printer.info('Welcome to the Amazon Lex chatbot wizard');\n  printer.info('You will be asked a series of questions to help determine how to best construct your chatbot.');\n  printer.blankLine();\n\n  let startChoice;\n\n  const resolvedResourceName =\n    resourceName ||\n    (await prompter.input('Provide a friendly resource name that will be used to label this category in the project:', {\n      validate: alphanumeric(),\n      initial: defaultValues['resourceName'],\n    }));\n\n  if (!resourceName) {\n    startChoice = await prompter.pick('Would you like to start with a sample chatbot or start from scratch?', [\n      'Start with a sample',\n      'Start from scratch',\n    ]);\n  } else {\n    startChoice = 'Update an existing chatbot';\n  }\n\n  let answers: LexAnswers;\n  let parameters;\n  let deleteIntentConfirmed = false;\n\n  if (startChoice === 'Start with a sample') {\n    // TODO: get list of samples from Lex, if possible\n    // Currently samples are hardcoded in supported-services\n    answers = await startWithSampleBotWalkthrough(samples, resolvedResourceName);\n  } else if (startChoice === 'Update an existing chatbot') {\n    ({ parameters, deleteIntentConfirmed, answers } = await updateExistingBotWalkthrough(resolvedResourceName, parameters, context));\n  } else if (startChoice === 'Start from scratch') {\n    answers = await startBotFromScratchWalkthrough(resolvedResourceName, context, parameters, defaultValuesFilename);\n  } else {\n    throw new AmplifyError('InputValidationError', {\n      message: 'Valid option not chosen',\n    });\n  }\n\n  if (parameters) {\n    if (answers.intentName) {\n      if (deleteIntentConfirmed) {\n        parameters.intents = parameters.intents.filter(\n          (intent: { intentName: string | undefined }) => intent.intentName !== answers.intentName,\n        );\n      } else {\n        parameters.intents.forEach(\n          (intent: { intentName: string | undefined; utterances: string[]; slots: LexSlot[]; newSlotTypes: string[] }) => {\n            if (intent.intentName === answers.intentName) {\n              if (answers.utterances) {\n                intent.utterances = intent.utterances.concat(answers.utterances);\n              }\n              if (answers.slots) {\n                intent.slots = intent.slots.concat(answers.slots);\n              }\n              if (answers.newSlotTypes) {\n                if (intent.newSlotTypes) {\n                  intent.newSlotTypes = intent.newSlotTypes.concat(answers.newSlotTypes);\n                } else {\n                  intent.newSlotTypes = answers.newSlotTypes;\n                }\n              }\n            }\n          },\n        );\n      }\n    } else if (!answers.intents) {\n      throw new AmplifyError('InputValidationError', {\n        message: 'Valid option not chosen',\n      });\n    } else {\n      parameters.intents = parameters.intents.concat(answers.intents);\n    }\n    answers = parameters;\n  }\n  return answers;\n};\n\nconst addIntent = async (\n  context: $TSContext,\n  resourceName: string,\n  intents: { intentName: string }[],\n  parameters: $TSAny,\n): Promise<$TSAny> => {\n  let intentName = await askIntent();\n\n  // Checks for duplicate intent names\n  while (\n    intents.filter((intent) => intent.intentName === intentName).length > 0 ||\n    (parameters && parameters.intents.filter((intent: $TSAny) => intent.intentName === intentName).length > 0)\n  ) {\n    printer.blankLine();\n    printer.info('Intent names must be unique');\n    printer.blankLine();\n    intentName = await askIntent();\n  }\n\n  const utterances = await addUtterance(resourceName);\n\n  printer.blankLine();\n  printer.info('Now, add a slot to your intent. A slot is data the user must provide to fulfill the intent.');\n  printer.blankLine();\n\n  const { slots, newSlotTypes } = await addSlot(context, intentName, resourceName, parameters);\n\n  let confirmationQuestion;\n  let cancelMessage;\n  if (await prompter.yesOrNo('Would you like to add a confirmation prompt to your intent?', false)) {\n    confirmationQuestion = await prompter.input('Enter a confirmation message (e.g. Are you sure you want to order a {Drink_name}?):', {\n      validate: and([minLength(1), maxLength(1000)], 'Confirmation questions can have a maximum of 1000 characters and cannot be empty'),\n    });\n    cancelMessage = await prompter.input(\n      'Enter a cancel message for when the user says no to the confirmation message (e.g. Okay. Your order will not be placed.):',\n      { validate: and([minLength(1), maxLength(1000)], 'Cancel messages can have a maximum of 1000 characters and cannot be empty') },\n    );\n  }\n\n  const intentFulfillment = await prompter.pick<'one', string>('How would you like the intent to be fulfilled?', [\n    {\n      name: 'AWS Lambda Function',\n      value: 'lambdaFunction',\n    },\n    {\n      name: 'Return parameters to client',\n      value: 'returnParameters',\n    },\n  ]);\n\n  let lambda;\n  if (intentFulfillment === 'lambdaFunction') {\n    lambda = await askLambda(context);\n  }\n\n  return {\n    lambda,\n    cancelMessage,\n    confirmationQuestion,\n    slots,\n    utterances,\n    intentName,\n    newSlotTypes,\n  };\n};\n\nconst askIntent = async (): Promise<string> => {\n  return prompter.input('Give a unique name for the new intent:', {\n    validate: matchRegex(\n      /^([A-Za-z]_?){1,100}$/,\n      'Intent name can only contain letters and underscores, cannot be empty, and must be no longer than 100 characters',\n    ),\n  });\n};\n\nconst addUtterance = async (resourceName: string): Promise<string[]> => {\n  const utterances = [];\n  do {\n    utterances.push(\n      await prompter.input('Enter a sample utterance (spoken or typed phrase that invokes your intent. e.g. Book a hotel)', {\n        validate: matchRegex(/^.{1,200}$/, 'Utterances can be a maximum of 200 characters and cannot be empty'),\n        initial: resourceName,\n      }),\n    );\n  } while (await prompter.yesOrNo('Would you like to add another utterance?', false));\n\n  return utterances;\n};\n\nconst addSlot = async (context: $TSContext, intentName: string, resourceName: string, parameters: $TSAny): Promise<$TSAny> => {\n  const slots = [];\n  const newSlotTypes = [];\n\n  do {\n    const slot: LexSlot = {\n      name: '',\n      type: '',\n      prompt: '',\n      required: true,\n      customType: false,\n    };\n    slot.name = await askSlotName();\n\n    // Checks for duplicate slot names\n    while (\n      slots.filter((existingSlot) => existingSlot.name === slot.name).length > 0 ||\n      (parameters &&\n        parameters.intents.filter((intent: { intentName: string }) => intent.intentName === intentName)[0] &&\n        parameters.intents\n          .filter((intent: { intentName: string }) => intent.intentName === intentName)[0]\n          .slots.filter((existingSlot: { name: string }) => existingSlot.name === slot.name).length > 0)\n    ) {\n      printer.blankLine();\n      printer.info('Slot names must be unique');\n      printer.blankLine();\n      slot.name = await askSlotName();\n    }\n\n    const slotType: LexSlotType = await getSlotType(context, newSlotTypes, parameters);\n    slot.type = slotType.slotType;\n    slot.customType = slotType.customType ?? false;\n    if (slotType.slotTypeDescription) {\n      newSlotTypes.push(slotType);\n    }\n\n    slot.prompt = await prompter.input('Enter a prompt for your slot (e.g. What city?)', {\n      initial: resourceName,\n      validate: matchRegex(/^.{1,1000}$/, 'Prompts can have a maximum of 1000 characters and cannot be empty'),\n    });\n    slot.required = await prompter.yesOrNo('Should this slot be required?', true);\n\n    slots.push(slot);\n  } while (await prompter.yesOrNo('Would you like to add another slot?', true));\n\n  return {\n    slots,\n    newSlotTypes,\n  };\n};\n\nconst askSlotName = async (): Promise<string> => {\n  return prompter.input('Enter a name for your slot (e.g. Location)', {\n    validate: matchRegex(\n      /^([A-Za-z]_?){1,100}$/,\n      'Slot name can only contain letters, must be no longer than 100 characters, and cannot be empty',\n    ),\n  });\n};\n\nconst getSlotType = async (context: $TSContext, newSlotTypes: LexSlotType[], parameters: $TSAny): Promise<LexSlotType> => {\n  let slotType;\n\n  const slotTypeChoice = await prompter.pick(\n    \"Would you like to choose an Amazon built-in slot type, a slot type you've already made, or create a new slot type?\",\n    ['Amazon built-in slot type', \"Slot type I've already made\", 'Create a new slot type'],\n  );\n\n  if (slotTypeChoice === 'Amazon built-in slot type') {\n    let slotTypeOptions = '';\n    let builtInSlotTypes: $TSAny[] = [];\n    let builtInSlotTypesReturn;\n    do {\n      builtInSlotTypesReturn = await context.amplify.executeProviderUtils(\n        context,\n        'awscloudformation',\n        'getBuiltInSlotTypes',\n        slotTypeOptions,\n      );\n      builtInSlotTypes = builtInSlotTypes.concat(\n        builtInSlotTypesReturn.slotTypes.map((builtinSlotType: { signature: LexSlotType }) => builtinSlotType.signature),\n      );\n      slotTypeOptions = builtInSlotTypesReturn.nextToken;\n    } while (slotTypeOptions);\n\n    slotType = await prompter.pick('Choose a slot type:', builtInSlotTypes);\n    return {\n      slotType,\n      customType: false,\n    };\n  } else if (slotTypeChoice === \"Slot type I've already made\") {\n    let slotTypes = await context.amplify.executeProviderUtils(context, 'awscloudformation', 'getSlotTypes');\n    slotTypes = slotTypes.slotTypes.map((cloudSlotType: LexSlot) => cloudSlotType.name);\n    if (newSlotTypes) {\n      slotTypes = slotTypes.concat(newSlotTypes.map((newSlotType) => newSlotType.slotType));\n    }\n    if (parameters) {\n      if (parameters.intents) {\n        for (let i = 0; i < parameters.intents.length; i++) {\n          if (parameters.intents[i].newSlotTypes) {\n            slotTypes = slotTypes.concat(\n              parameters.intents[i].newSlotTypes.map((paramsSlotType: { slotType: LexSlotType }) => paramsSlotType.slotType),\n            );\n          }\n        }\n      }\n    }\n    slotTypes = slotTypes.filter((value: string, index: number, self: string[]) => self.indexOf(value) === index);\n    slotType = await prompter.pick('Choose a slot type:', slotTypes);\n    return {\n      slotType,\n      customType: true,\n    };\n  } else if (slotTypeChoice === 'Create a new slot type') {\n    slotType = await prompter.input('What would you like to name your slot type?', {\n      validate: matchRegex(\n        /^([A-Za-z]_?){1,100}$/,\n        'The slot name must contain only letters and non-consecutive underscores, start with a letter, and be no more than 100 characters',\n      ),\n    });\n\n    const slotTypeDescription = await prompter.input('Give a description of your slot type:', {\n      validate: matchRegex(/^.{1,1000}$/, 'Slot type descriptions can have a maximum of 1000 characters and cannot be empty'),\n    });\n    const slotValues = [];\n    do {\n      let slotValue = await askSlotTypeValue();\n\n      // Checks for duplicate slot values\n      while (slotValues.filter((existingSlotValue) => existingSlotValue === slotValue).length > 0) {\n        printer.blankLine();\n        printer.info('Slot values must be unique');\n        printer.blankLine();\n        slotValue = await askSlotTypeValue();\n      }\n\n      slotValues.push(slotValue);\n    } while (await prompter.yesOrNo('Add another slot value?', true));\n\n    return {\n      slotType,\n      slotTypeDescription,\n      slotValues,\n      customType: true,\n    };\n  }\n\n  throw new AmplifyError('InputValidationError', {\n    message: 'Valid option not chosen',\n  });\n};\n\nconst askSlotTypeValue = async (): Promise<string> => {\n  return prompter.input('Add a possible value for your slot:', {\n    validate: matchRegex(/^.{1,1000}$/, 'Slot values can have a maximum of 1000 characters and cannot be empty'),\n  });\n};\n\nconst askLambda = async (\n  context: $TSContext,\n): Promise<{ region: string; accountId: string; lambdaArn: string; lambdaName: string } | null> => {\n  const projectRegion = context.exeInfo.amplifyMeta.providers.awscloudformation.Region;\n  const accountID = context.exeInfo.amplifyMeta.providers.awscloudformation.AuthRoleArn.split(':')[4];\n\n  const lambdaFunctions = await context.amplify.executeProviderUtils(context, 'awscloudformation', 'getLambdaFunctions', {\n    region: projectRegion,\n  });\n\n  const lambdaOptions = lambdaFunctions.map((lambdaFunction: { FunctionName: string; FunctionArn: string }) => ({\n    value: {\n      resourceName: lambdaFunction.FunctionName.replace(/[^0-9a-zA-Z]/gi, ''),\n      Arn: lambdaFunction.FunctionArn,\n      FunctionName: lambdaFunction.FunctionName,\n    },\n    name: `${lambdaFunction.FunctionName}`,\n  }));\n\n  if (lambdaOptions.length === 0) {\n    printer.error(`You do not have any lambda functions configured in the region ${projectRegion}`);\n    return null;\n  }\n\n  const lambdaChoice = await prompter.pick<'one', { resourceName: string; Arn: string; FunctionName: string }>(\n    'Select a Lambda function',\n    lambdaOptions,\n  );\n\n  return {\n    region: projectRegion,\n    accountId: accountID,\n    lambdaArn: lambdaChoice.Arn,\n    lambdaName: lambdaChoice.FunctionName,\n  };\n};\n\nexport const migrate = async (context: $TSContext, projectPath: string, resourceName: string): Promise<void> => {\n  const { amplify } = context;\n\n  const targetDir = amplify.pathManager.getBackendDirPath();\n  const resourceDirPath = path.join(targetDir, category, resourceName);\n  const parametersFilePath = path.join(resourceDirPath, parametersFileName);\n  const defaultValuesSrc = `${__dirname}/../default-values/lex-defaults.js`;\n  const { getAllDefaults } = require(defaultValuesSrc);\n  const defaultValues = getAllDefaults(amplify.getProjectDetails());\n\n  let parameters;\n  try {\n    parameters = JSONUtilities.readJson(parametersFilePath);\n  } catch (e) {\n    throw new AmplifyFault('FileNotFoundFault', {\n      message: `Error reading api-params.json file for ${resourceName} resource`,\n    });\n  }\n  Object.assign(defaultValues, parameters);\n  const pluginDir = `${__dirname}/../`;\n  const copyJobs = [\n    {\n      dir: pluginDir,\n      template: 'cloudformation-templates/lex-cloudformation-template.json.ejs',\n      target: `${targetDir}/${category}/${resourceName}/${resourceName}-cloudformation-template.json`,\n    },\n  ];\n\n  // copy over the files\n  await context.amplify.copyBatch(context, copyJobs, defaultValues, true, false);\n\n  // Create parameters.json file\n  const cfnParameters = {\n    authRoleArn: {\n      'Fn::GetAtt': ['AuthRole', 'Arn'],\n    },\n    authRoleName: {\n      Ref: 'AuthRoleName',\n    },\n    unauthRoleName: {\n      Ref: 'UnauthRoleName',\n    },\n  };\n\n  const cfnParametersFilePath = path.join(resourceDirPath, cfnParametersFilename);\n  const jsonString = JSON.stringify(cfnParameters, null, 4);\n  fs.writeFileSync(cfnParametersFilePath, jsonString, 'utf8');\n};\n\nexport const getIAMPolicies = (resourceName: string, crudOptions: string[]): $TSAny => {\n  let policy = {};\n  const actions: string[] = [];\n\n  crudOptions.forEach((crudOption) => {\n    switch (crudOption) {\n      case 'create':\n        actions.push('lex:Create*', 'lex:Post*');\n        break;\n      case 'update':\n        actions.push('lex:Put*');\n        break;\n      case 'read':\n        actions.push('lex:Get*');\n        break;\n      case 'delete':\n        actions.push('lex:Delete*');\n        break;\n      default:\n        console.log(`${crudOption} not supported`);\n    }\n  });\n\n  policy = {\n    Effect: 'Allow',\n    Action: actions,\n    Resource: [\n      {\n        'Fn::Join': [\n          '',\n          [\n            'arn:aws:lex:',\n            { Ref: 'AWS::Region' },\n            ':',\n            { Ref: 'AWS::AccountId' },\n            ':bot:',\n            {\n              Ref: `${category}${resourceName}BotName`,\n            },\n            ':*',\n          ],\n        ],\n      },\n    ],\n  };\n\n  const attributes = ['BotName'];\n\n  return { policy, attributes };\n};\nconst startWithSampleBotWalkthrough = async (samples: LexSamples, resourceName: string): Promise<LexAnswers> => {\n  const botName = await prompter.pick('Choose a sample chatbot:', ['BookTrip', 'OrderFlowers', 'ScheduleAppointment']);\n\n  const coppa = await prompter.yesOrNo(\n    \"Please indicate if your use of this bot is subject to the Children's Online Privacy Protection Act(COPPA).\\nLearn more: https://www.ftc.gov/tips-advice/business-center/guidance/complying-coppa-frequently-asked-questions\",\n    false,\n  );\n  if (coppa) {\n    printer.blankLine();\n    printer.info('You must obtain any required verifiable parental consent under COPPA.');\n    printer.blankLine();\n  }\n\n  const intents = samples[botName];\n\n  return {\n    resourceName: resourceName,\n    intents,\n    outputVoice: 'Matthew',\n    botName,\n    coppa,\n  };\n};\n\nconst updateExistingBotWalkthrough = async (resourceName: string, parameters: $TSAny, context: $TSContext): Promise<$TSAny> => {\n  if (resourceName) {\n    const projectBackendDirPath = context.amplify.pathManager.getBackendDirPath();\n    const resourceDirPath = path.join(projectBackendDirPath, category, resourceName);\n    const parametersFilePath = path.join(resourceDirPath, parametersFileName);\n    parameters = JSONUtilities.readJson(parametersFilePath, { throwIfNotExist: false });\n  } else {\n    throw new AmplifyError('InputValidationError', {\n      message: 'No chat bots to update',\n    });\n  }\n\n  let deleteIntentConfirmed = false;\n  let utterances: string[] = [];\n  const intents: { intentName: string }[] = [];\n  let slots = [];\n  let newSlotTypes = [];\n  const intentChoice = await prompter.pick('Would you like to add an intent or choose and existing intent?', [\n    'Update an existing intent',\n    'Add an intent',\n    'Delete an intent',\n  ]);\n\n  let intentName = '';\n\n  if (intentChoice === 'Update an existing intent') {\n    const intentList = parameters.intents.map((x: { intentName: string }) => x.intentName);\n    intentName = await prompter.pick('Choose an intent: ', intentList);\n\n    if (await prompter.yesOrNo('Would you like to add an utterance?', true)) {\n      utterances = await addUtterance(resourceName);\n    }\n\n    let slotReturn = [];\n    if (await prompter.yesOrNo('Would you like to add a slot?', true)) {\n      slotReturn = await addSlot(context, intentName, resourceName, parameters);\n    }\n    if (slotReturn.length > 1) {\n      newSlotTypes = slotReturn[1];\n    }\n    slots = slotReturn[0];\n  } else if (intentChoice === 'Add an intent') {\n    do {\n      intents.push(await addIntent(context, resourceName, intents, parameters));\n    } while (await prompter.yesOrNo('Would you like to create another intent?', false));\n  } else if (intentChoice === 'Delete an intent') {\n    const intentList = parameters.intents.map((x: { intentName: string }) => x.intentName);\n    intentName = await prompter.pick('Choose an intent: ', intentList);\n    deleteIntentConfirmed = await prompter.yesOrNo('Are you sure you want to delete this intent?', false);\n  } else {\n    printer.error('Valid option not chosen');\n  }\n  const answers = {\n    resourceName: resourceName,\n    botName: parameters.botName,\n    intentName,\n    utterances,\n    intents,\n    slots,\n    newSlotTypes,\n  };\n\n  return { parameters, deleteIntentConfirmed, answers };\n};\n\nconst startBotFromScratchWalkthrough = async (\n  resourceName: string,\n  context: $TSContext,\n  parameters: $TSAny,\n  defaultValuesFilename: string,\n): Promise<LexAnswers> => {\n  const defaultValuesSrc = `${__dirname}/../default-values/${defaultValuesFilename}`;\n  const { getAllDefaults } = require(defaultValuesSrc);\n  const defaultValues = getAllDefaults(context.amplify.getProjectDetails());\n\n  const botName = await prompter.input('Enter a name for your bot:', {\n    initial: defaultValues['botName'] || resourceName,\n    validate: matchRegex(\n      /^([A-Za-z]_?){2,50}$/,\n      'The bot name must contain only letters and non-consecutive underscores, start with a letter, and be between 2-50 characters',\n    ),\n  });\n  const outputVoice = await prompter.pick<'one', $TSAny>('Choose an output voice:', [\n    {\n      name: 'None. This is only a text based application.',\n      value: false,\n    },\n    {\n      name: 'Male',\n      value: 'Matthew',\n    },\n    {\n      name: 'Female',\n      value: 'Joanna',\n    },\n  ]);\n  const sessionTimeout = await prompter.input('After how long should the session timeout (in minutes)?', {\n    initial: 5,\n    validate: between(1, 1440, 'Session timeout must be a number and must be greater than 0 and less than 1440.'),\n    transform: (input) => parseInt(input, 10),\n  });\n  const coppa = await prompter.yesOrNo(\n    \"Please indicate if your use of this bot is subject to the Children's Online Privacy Protection Act(COPPA).\\nLearn more: https://www.ftc.gov/tips-advice/business-center/guidance/complying-coppa-frequently-asked-questions\",\n    false,\n  );\n  if (coppa) {\n    printer.blankLine();\n    printer.info('You must obtain any required verifiable parental consent under COPPA.');\n    printer.blankLine();\n  }\n\n  printer.blankLine();\n  printer.info('First create an intent for your new chatbot. An intent represents an action that the user wants to perform.');\n  printer.blankLine();\n\n  const intents: { intentName: string }[] = [];\n  do {\n    intents.push(await addIntent(context, resourceName, intents, parameters));\n  } while (await prompter.yesOrNo('Would you like to create another intent?', false));\n\n  return {\n    resourceName: resourceName,\n    botName,\n    intents,\n    outputVoice,\n    sessionTimeout,\n    coppa,\n  };\n};\n"]}