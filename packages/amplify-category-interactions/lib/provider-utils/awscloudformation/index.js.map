{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/provider-utils/awscloudformation/index.js"],"names":[],"mappings":"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","sourcesContent":["const path = require('path');\nconst fs = require('fs-extra');\nconst uuid = require('uuid');\nconst authHelper = require('./auth-helper');\nconst { servicesMetadata } = require(`../supported-services`);\n\nconst parametersFileName = 'lex-params.json';\nconst cfnParametersFilename = 'parameters.json';\n\nfunction copyCfnTemplate(context, category, options, cfnFilename) {\n  const { amplify } = context;\n  const targetDir = amplify.pathManager.getBackendDirPath();\n  const pluginDir = __dirname;\n  const defaultValuesSrc = `${__dirname}/default-values/lex-defaults.js`;\n  const { getAllDefaults } = require(defaultValuesSrc);\n\n  const defaultValues = getAllDefaults(amplify.getProjectDetails());\n  const mappings = getTemplateMappings(context);\n  const copyJobs = [\n    {\n      dir: pluginDir,\n      template: `cloudformation-templates/${cfnFilename}`,\n      target: `${targetDir}/${category}/${options.resourceName}/${options.resourceName}-cloudformation-template.json`,\n    },\n    {\n      dir: pluginDir,\n      template: 'function-template-dir/index.js.ejs',\n      target: `${targetDir}/${category}/${options.resourceName}/src/index.js`,\n    },\n    {\n      dir: pluginDir,\n      template: 'function-template-dir/package.json.ejs',\n      target: `${targetDir}/${category}/${options.resourceName}/src/package.json`,\n    },\n    {\n      dir: pluginDir,\n      template: 'function-template-dir/cfn-response.js',\n      target: `${targetDir}/${category}/${options.resourceName}/src/cfn-response.js`,\n    },\n  ];\n  Object.assign(defaultValues, options, { mappings });\n  // copy over the files\n  return context.amplify.copyBatch(context, copyJobs, defaultValues, true, false);\n}\n\nfunction getTemplateMappings(context) {\n  const mappings = {\n    RegionMapping: {},\n  };\n  const providerPlugins = context.amplify.getProviderPlugins(context);\n  const provider = require(providerPlugins['awscloudformation']);\n  const regionMapping = provider.getLexRegionMapping();\n  Object.keys(regionMapping).forEach((region) => {\n    mappings.RegionMapping[region] = {\n      lexRegion: regionMapping[region],\n    };\n  });\n  return mappings;\n}\n\nasync function addResource(context, category, service, options) {\n  await authHelper.ensureAuth(context, ''); // There is no resourceName available this early\n  const serviceMetadata = servicesMetadata[service];\n  const { cfnFilename } = serviceMetadata;\n  const { defaultValuesFilename, serviceWalkthroughFilename } = serviceMetadata;\n  const projectBackendDirPath = context.amplify.pathManager.getBackendDirPath();\n  const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;\n  const { addWalkthrough } = require(serviceWalkthroughSrc);\n\n  const defaultValuesSrc = `${__dirname}/default-values/lex-defaults.js`;\n  const { getAllDefaults } = require(defaultValuesSrc);\n  const { amplify } = context;\n\n  const defaultValues = getAllDefaults(amplify.getProjectDetails());\n\n  return addWalkthrough(context, defaultValuesFilename, serviceMetadata).then((answers) => {\n    copyCfnTemplate(context, category, answers, cfnFilename);\n\n    const parameters = { ...answers };\n    const cfnParameters = {\n      authRoleArn: defaultValues.authRoleArn,\n      authRoleName: defaultValues.authRoleName,\n      unauthRoleName: defaultValues.unauthRoleName,\n    };\n\n    const resourceDirPath = path.join(projectBackendDirPath, category, parameters.resourceName);\n    fs.ensureDirSync(resourceDirPath);\n\n    const parametersFilePath = path.join(resourceDirPath, parametersFileName);\n    let jsonString = JSON.stringify(parameters, null, 4);\n    fs.writeFileSync(parametersFilePath, jsonString, 'utf8');\n\n    const cfnParametersFilePath = path.join(resourceDirPath, cfnParametersFilename);\n    jsonString = JSON.stringify(cfnParameters, null, 4);\n    fs.writeFileSync(cfnParametersFilePath, jsonString, 'utf8');\n\n    context.amplify.updateamplifyMetaAfterResourceAdd(category, answers.resourceName, options);\n    return answers.resourceName;\n  });\n}\n\nfunction updateResource(context, category, service) {\n  const serviceMetadata = servicesMetadata[service];\n  const { cfnFilename } = serviceMetadata;\n  const { defaultValuesFilename, serviceWalkthroughFilename } = serviceMetadata;\n  const projectBackendDirPath = context.amplify.pathManager.getBackendDirPath();\n  const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;\n  const { updateWalkthrough } = require(serviceWalkthroughSrc);\n\n  return updateWalkthrough(context, defaultValuesFilename, serviceMetadata).then((answers) => {\n    answers.shortId = uuid.v4().substring(0, 8);\n    copyCfnTemplate(context, category, answers, cfnFilename);\n\n    const parameters = { ...answers };\n    const resourceDirPath = path.join(projectBackendDirPath, category, parameters.resourceName);\n    fs.ensureDirSync(resourceDirPath);\n    const parametersFilePath = path.join(resourceDirPath, parametersFileName);\n    const jsonString = JSON.stringify(parameters, null, 4);\n    fs.writeFileSync(parametersFilePath, jsonString, 'utf8');\n\n    context.amplify.updateamplifyMetaAfterResourceUpdate(category, answers.resourceName);\n    return answers.resourceName;\n  });\n}\n\nasync function migrateResource(context, projectPath, service, resourceName) {\n  const serviceMetadata = servicesMetadata[service];\n  const { serviceWalkthroughFilename } = serviceMetadata;\n  const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;\n  const { migrate } = require(serviceWalkthroughSrc);\n\n  if (!migrate) {\n    context.print.info(`No migration required for ${resourceName}`);\n    return undefined;\n  }\n\n  return await migrate(context, projectPath, resourceName);\n}\n\nfunction getPermissionPolicies(context, service, resourceName, crudOptions) {\n  const serviceMetadata = servicesMetadata[service];\n  const { serviceWalkthroughFilename } = serviceMetadata;\n  const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;\n  const { getIAMPolicies } = require(serviceWalkthroughSrc);\n\n  if (!getPermissionPolicies) {\n    context.print.info(`No policies found for ${resourceName}`);\n    return undefined;\n  }\n\n  return getIAMPolicies(resourceName, crudOptions);\n}\n\nmodule.exports = {\n  addResource,\n  updateResource,\n  migrateResource,\n  getPermissionPolicies,\n};\n"]}