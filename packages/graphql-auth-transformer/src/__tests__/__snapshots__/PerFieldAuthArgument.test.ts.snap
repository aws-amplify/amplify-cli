// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test per-field @auth without model 1`] = `
"## [Start] Static Group Authorization Checks **
#set($listContext_isStaticGroupAuthorized = $util.defaultIfNull(
            $listContext_isStaticGroupAuthorized, false))
## Authorization rule: { allow: groups, groups: [\\"Allowed\\"], groupClaim: \\"cognito:groups\\" } **
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#set( $allowedGroups = [\\"Allowed\\"] )
#foreach( $userGroup in $userGroups )
  #if( $allowedGroups.contains($userGroup) )
    #set( $listContext_isStaticGroupAuthorized = true )
    #break
  #end
#end
## [End] Static Group Authorization Checks **


## [Start] Throw if unauthorized **
#if( $listContext_isStaticGroupAuthorized == false )
  $util.unauthorized()
#end
## [End] Throw if unauthorized **"
`;

exports[`Test that subscriptions are only generated if the respective mutation operation exists 1`] = `
"## [Start] Checking for allowed operations which can return this field **
#set( $operation = $util.defaultIfNull($context.source.operation, \\"null\\") )
#if( $operation == \\"Mutation\\" )
$util.toJson(null)
#else
$util.toJson($context.source.secret)
#end
## [End] Checking for allowed operations which can return this field **"
`;

exports[`Test that subscriptions are only generated if the respective mutation operation exists 2`] = `
"## [Start] Setting the operation **
$util.qr($ctx.result.put(\\"operation\\", \\"Mutation\\"))
## [End] Setting the operation **

#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end"
`;

exports[`Test that subscriptions are only generated if the respective mutation operation exists 3`] = `
"## [Start] Setting the operation **
$util.qr($ctx.result.put(\\"operation\\", \\"Mutation\\"))
## [End] Setting the operation **

#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end"
`;

exports[`Test that subscriptions are only generated if the respective mutation operation exists 4`] = `
"## [Start] Setting the operation **
$util.qr($ctx.result.put(\\"operation\\", \\"Mutation\\"))
## [End] Setting the operation **

#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end"
`;
