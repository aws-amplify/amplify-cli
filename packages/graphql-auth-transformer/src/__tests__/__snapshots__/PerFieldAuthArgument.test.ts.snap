// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test per-field @auth on a @connection field 1`] = `
"#if( $util.isNullOrEmpty($ctx.result) )
  #return
#end
## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) && !$util.isNull($ctx.identity.defaultAuthStrategy) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## [Start] Static Group Authorization Checks **
  #set($isStaticGroupAuthorized = $util.defaultIfNull(
            $isStaticGroupAuthorized, false))
  ## Authorization rule: { allow: groups, groups: [\\"admin\\"], groupClaim: \\"cognito:groups\\" } **
  #set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
  #set( $allowedGroups = [\\"admin\\"] )
  #foreach( $userGroup in $userGroups )
    #if( $allowedGroups.contains($userGroup) )
      #set( $isStaticGroupAuthorized = true )
      #break
    #end
  #end
  ## [End] Static Group Authorization Checks **


  ## No Dynamic Group Authorization Rules **


  ## [Start] Owner Authorization Checks **
  #set( $isOwnerAuthorized = $util.defaultIfNull($isOwnerAuthorized, false) )
  ## Authorization rule: { allow: owner, ownerField: \\"moderator\\", identityClaim: \\"cognito:username\\" } **
  #set( $allowedOwners0 = $util.defaultIfNull($ctx.result.moderator, []) )
  #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
  #if( $util.isList($allowedOwners0) )
    #foreach( $allowedOwner in $allowedOwners0 )
      #if( $allowedOwner == $identityValue )
        #set( $isOwnerAuthorized = true )
      #end
    #end
  #end
  #if( $util.isString($allowedOwners0) )
    #if( $allowedOwners0 == $identityValue )
      #set( $isOwnerAuthorized = true )
    #end
  #end
  ## [End] Owner Authorization Checks **


  ## [Start] Throw if unauthorized **
  #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end"
`;

exports[`Test per-field @auth without model 1`] = `
Object {
  "Properties": Object {
    "PolicyDocument": Object {
      "Statement": Array [
        Object {
          "Action": Array [
            "appsync:GraphQL",
          ],
          "Effect": "Allow",
          "Resource": Array [
            Object {
              "Fn::Sub": Array [
                "arn:aws:appsync:\${AWS::Region}:\${AWS::AccountId}:apis/\${apiId}/types/\${typeName}/fields/\${fieldName}",
                Object {
                  "apiId": Object {
                    "Fn::GetAtt": Array [
                      "GraphQLAPI",
                      "ApiId",
                    ],
                  },
                  "fieldName": "listContext",
                  "typeName": "Query",
                },
              ],
            },
          ],
        },
      ],
      "Version": "2012-10-17",
    },
    "Roles": Array [
      Object {
        "Ref": "authRoleName",
      },
    ],
  },
  "Type": "AWS::IAM::ManagedPolicy",
}
`;

exports[`Test per-field @auth without model 2`] = `
"## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) && !$util.isNull($ctx.identity.defaultAuthStrategy) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## [Start] Static Group Authorization Checks **
  #set($listContext_isStaticGroupAuthorized = $util.defaultIfNull(
            $listContext_isStaticGroupAuthorized, false))
  ## Authorization rule: { allow: groups, groups: [\\"Allowed\\"], groupClaim: \\"cognito:groups\\" } **
  #set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
  #set( $allowedGroups = [\\"Allowed\\"] )
  #foreach( $userGroup in $userGroups )
    #if( $allowedGroups.contains($userGroup) )
      #set( $listContext_isStaticGroupAuthorized = true )
      #break
    #end
  #end
  ## [End] Static Group Authorization Checks **


  ## [Start] Throw if unauthorized **
  #if( $listContext_isStaticGroupAuthorized == false )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

{
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
}"
`;

exports[`Test that subscriptions are only generated if the respective mutation operation exists 1`] = `
"## [Start] Checking for allowed operations which can return this field **
#set( $operation = $util.defaultIfNull($context.source.operation, \\"null\\") )
#if( $operation == \\"Mutation\\" )
$util.toJson(null)
#else
  $util.toJson($context.source.secret)
#end
## [End] Checking for allowed operations which can return this field **"
`;

exports[`Test that subscriptions are only generated if the respective mutation operation exists 2`] = `
"## [Start] Setting the operation **
$util.qr($ctx.result.put(\\"operation\\", \\"Mutation\\"))
## [End] Setting the operation **

#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end"
`;

exports[`Test that subscriptions are only generated if the respective mutation operation exists 3`] = `
"## [Start] Setting the operation **
$util.qr($ctx.result.put(\\"operation\\", \\"Mutation\\"))
## [End] Setting the operation **

#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end"
`;

exports[`Test that subscriptions are only generated if the respective mutation operation exists 4`] = `
"## [Start] Setting the operation **
$util.qr($ctx.result.put(\\"operation\\", \\"Mutation\\"))
## [End] Setting the operation **

#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end"
`;
