{
    "rootStack": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "A nested stack generated by the GraphQL transform.",
        "Metadata": {},
        "Parameters": {
            "AppSyncApiName": {
                "Type": "String",
                "Description": "The name of the AppSync API",
                "Default": "AppSyncSimpleTransform"
            },
            "DynamoDBModelTableReadIOPS": {
                "Type": "Number",
                "Description": "The number of read IOPS the table should support.",
                "Default": 5
            },
            "DynamoDBModelTableWriteIOPS": {
                "Type": "Number",
                "Description": "The number of write IOPS the table should support.",
                "Default": 5
            },
            "env": {
                "Type": "String",
                "Description": "The environment name. e.g. Dev, Test, or Production",
                "Default": "NONE"
            },
            "S3DeploymentBucket": {
                "Type": "String",
                "Description": "The S3 bucket containing all deployment assets for the project."
            },
            "S3DeploymentRootKey": {
                "Type": "String",
                "Description": "An S3 key relative to the S3DeploymentBucket that points to the root of the deployment directory."
            }
        },
        "Resources": {
            "GraphQLAPI": {
                "Type": "AWS::AppSync::GraphQLApi",
                "Properties": {
                    "Name": {
                        "Fn::If": [
                            "HasEnvironmentParameter",
                            {
                                "Fn::Join": [
                                    "-",
                                    [
                                        {
                                            "Ref": "AppSyncApiName"
                                        },
                                        {
                                            "Ref": "env"
                                        }
                                    ]
                                ]
                            },
                            {
                                "Ref": "AppSyncApiName"
                            }
                        ]
                    },
                    "AuthenticationType": "API_KEY"
                }
            },
            "GraphQLAPIKey": {
                "Type": "AWS::AppSync::ApiKey",
                "Properties": {
                    "ApiId": {
                        "Fn::GetAtt": [
                            "GraphQLAPI",
                            "ApiId"
                        ]
                    }
                }
            },
            "httpsjsonplaceholdertypicodecomDataSource": {
                "Type": "AWS::AppSync::DataSource",
                "Properties": {
                    "ApiId": {
                        "Fn::GetAtt": [
                            "GraphQLAPI",
                            "ApiId"
                        ]
                    },
                    "Name": "httpsjsonplaceholdertypicodecomDataSource",
                    "Type": "HTTP",
                    "HttpConfig": {
                        "Endpoint": "https://jsonplaceholder.typicode.com"
                    }
                }
            },
            "GraphQLSchema": {
                "Type": "AWS::AppSync::GraphQLSchema",
                "Properties": {
                    "ApiId": {
                        "Fn::GetAtt": [
                            "GraphQLAPI",
                            "ApiId"
                        ]
                    },
                    "DefinitionS3Location": {
                        "Fn::Join": [
                            "/",
                            [
                                "s3:/",
                                {
                                    "Ref": "S3DeploymentBucket"
                                },
                                {
                                    "Ref": "S3DeploymentRootKey"
                                },
                                "schema.graphql"
                            ]
                        ]
                    }
                }
            },
            "CommentModelStack": {
                "Type": "AWS::CloudFormation::Stack",
                "Properties": {
                    "Parameters": {
                        "AppSyncApiName": {
                            "Ref": "AppSyncApiName"
                        },
                        "DynamoDBModelTableReadIOPS": {
                            "Ref": "DynamoDBModelTableReadIOPS"
                        },
                        "DynamoDBModelTableWriteIOPS": {
                            "Ref": "DynamoDBModelTableWriteIOPS"
                        },
                        "env": {
                            "Ref": "env"
                        },
                        "S3DeploymentBucket": {
                            "Ref": "S3DeploymentBucket"
                        },
                        "S3DeploymentRootKey": {
                            "Ref": "S3DeploymentRootKey"
                        },
                        "AppSyncApiId": {
                            "Fn::GetAtt": [
                                "GraphQLAPI",
                                "ApiId"
                            ]
                        }
                    },
                    "TemplateURL": {
                        "Fn::Join": [
                            "/",
                            [
                                "https://s3.amazonaws.com",
                                {
                                    "Ref": "S3DeploymentBucket"
                                },
                                {
                                    "Ref": "S3DeploymentRootKey"
                                },
                                "stacks",
                                "CommentModelStack.json"
                            ]
                        ]
                    }
                },
                "DependsOn": [
                    "GraphQLSchema",
                    "root"
                ]
            }
        },
        "Outputs": {
            "GraphQLAPIIdOutput": {
                "Description": "Your GraphQL API ID.",
                "Value": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "Export": {
                    "Name": {
                        "Fn::Join": [
                            ":",
                            [
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "GraphQLApiId"
                            ]
                        ]
                    }
                }
            },
            "GraphQLAPIEndpointOutput": {
                "Description": "Your GraphQL API endpoint.",
                "Value": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "GraphQLUrl"
                    ]
                },
                "Export": {
                    "Name": {
                        "Fn::Join": [
                            ":",
                            [
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "GraphQLApiEndpoint"
                            ]
                        ]
                    }
                }
            },
            "GraphQLAPIKeyOutput": {
                "Description": "Your GraphQL API key. Provide via 'x-api-key' header.",
                "Value": {
                    "Fn::GetAtt": [
                        "GraphQLAPIKey",
                        "ApiKey"
                    ]
                },
                "Export": {
                    "Name": {
                        "Fn::Join": [
                            ":",
                            [
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "GraphQLApiKey"
                            ]
                        ]
                    }
                }
            },
            "GetAtthttpsjsonplaceholdertypicodecomDataSourceName": {
                "Value": {
                    "Fn::GetAtt": [
                        "httpsjsonplaceholdertypicodecomDataSource",
                        "Name"
                    ]
                },
                "Export": {
                    "Name": {
                        "Fn::Join": [
                            ":",
                            [
                                {
                                    "Ref": "AppSyncApiId"
                                },
                                "GetAtt",
                                "httpsjsonplaceholdertypicodecomDataSource",
                                "Name"
                            ]
                        ]
                    }
                }
            }
        },
        "Conditions": {
            "HasEnvironmentParameter": {
                "Fn::Not": [
                    {
                        "Fn::Equals": [
                            {
                                "Ref": "env"
                            },
                            "NONE"
                        ]
                    }
                ]
            }
        }
    },
    "stacks": {
        "CommentModelStack": {
            "AWSTemplateFormatVersion": "2010-09-09",
            "Description": "A nested stack generated by the GraphQL transform.",
            "Metadata": {},
            "Parameters": {
                "AppSyncApiId": {
                    "Type": "String",
                    "Description": "The id of the AppSync API associated with this project."
                },
                "AppSyncApiName": {
                    "Type": "String",
                    "Description": "The name of the AppSync API",
                    "Default": "AppSyncSimpleTransform"
                },
                "DynamoDBModelTableReadIOPS": {
                    "Type": "Number",
                    "Description": "The number of read IOPS the table should support.",
                    "Default": 5
                },
                "DynamoDBModelTableWriteIOPS": {
                    "Type": "Number",
                    "Description": "The number of write IOPS the table should support.",
                    "Default": 5
                },
                "env": {
                    "Type": "String",
                    "Description": "The environment name. e.g. Dev, Test, or Production",
                    "Default": "NONE"
                },
                "S3DeploymentBucket": {
                    "Type": "String",
                    "Description": "The S3 bucket containing all deployment assets for the project."
                },
                "S3DeploymentRootKey": {
                    "Type": "String",
                    "Description": "An S3 key relative to the S3DeploymentBucket that points to the root of the deployment directory."
                }
            },
            "Resources": {
                "CommentTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                        "TableName": {
                            "Fn::If": [
                                "HasEnvironmentParameter",
                                {
                                    "Fn::Join": [
                                        "-",
                                        [
                                            "Comment",
                                            {
                                                "Ref": "AppSyncApiId"
                                            },
                                            {
                                                "Ref": "env"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "-",
                                        [
                                            "Comment",
                                            {
                                                "Ref": "AppSyncApiId"
                                            }
                                        ]
                                    ]
                                }
                            ]
                        },
                        "KeySchema": [
                            {
                                "AttributeName": "id",
                                "KeyType": "HASH"
                            }
                        ],
                        "AttributeDefinitions": [
                            {
                                "AttributeName": "id",
                                "AttributeType": "S"
                            }
                        ],
                        "ProvisionedThroughput": {
                            "ReadCapacityUnits": {
                                "Ref": "DynamoDBModelTableReadIOPS"
                            },
                            "WriteCapacityUnits": {
                                "Ref": "DynamoDBModelTableWriteIOPS"
                            }
                        },
                        "StreamSpecification": {
                            "StreamViewType": "NEW_AND_OLD_IMAGES"
                        },
                        "SSESpecification": {
                            "SSEEnabled": true
                        }
                    }
                },
                "CommentIAMRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                        "RoleName": {
                            "Fn::If": [
                                "HasEnvironmentParameter",
                                {
                                    "Fn::Join": [
                                        "-",
                                        [
                                            "CommentTable",
                                            "role",
                                            {
                                                "Ref": "AppSyncApiId"
                                            },
                                            {
                                                "Ref": "env"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "-",
                                        [
                                            "CommentTable",
                                            "role",
                                            {
                                                "Ref": "AppSyncApiId"
                                            }
                                        ]
                                    ]
                                }
                            ]
                        },
                        "AssumeRolePolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Principal": {
                                        "Service": "appsync.amazonaws.com"
                                    },
                                    "Action": "sts:AssumeRole"
                                }
                            ]
                        },
                        "Policies": [
                            {
                                "PolicyName": "DynamoDBAccess",
                                "PolicyDocument": {
                                    "Version": "2012-10-17",
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "dynamodb:BatchGetItem",
                                                "dynamodb:BatchWriteItem",
                                                "dynamodb:PutItem",
                                                "dynamodb:DeleteItem",
                                                "dynamodb:GetItem",
                                                "dynamodb:Scan",
                                                "dynamodb:Query",
                                                "dynamodb:UpdateItem"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::GetAtt": [
                                                        "CommentTable",
                                                        "Arn"
                                                    ]
                                                },
                                                {
                                                    "Fn::Join": [
                                                        "/",
                                                        [
                                                            {
                                                                "Fn::GetAtt": [
                                                                    "CommentTable",
                                                                    "Arn"
                                                                ]
                                                            },
                                                            "*"
                                                        ]
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "CommentDataSource": {
                    "Type": "AWS::AppSync::DataSource",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "Name": "CommentTable",
                        "Type": "AMAZON_DYNAMODB",
                        "ServiceRoleArn": {
                            "Fn::GetAtt": [
                                "CommentIAMRole",
                                "Arn"
                            ]
                        },
                        "DynamoDBConfig": {
                            "AwsRegion": {
                                "Fn::Select": [
                                    3,
                                    {
                                        "Fn::Split": [
                                            ":",
                                            {
                                                "Fn::GetAtt": [
                                                    "CommentTable",
                                                    "Arn"
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            "TableName": {
                                "Ref": "CommentTable"
                            }
                        }
                    },
                    "DependsOn": "CommentIAMRole"
                },
                "GetCommentResolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::GetAtt": [
                                "CommentDataSource",
                                "Name"
                            ]
                        },
                        "FieldName": "getComment",
                        "TypeName": "Query",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Query",
                                                "getComment",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Query",
                                                "getComment",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                },
                "ListCommentResolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::GetAtt": [
                                "CommentDataSource",
                                "Name"
                            ]
                        },
                        "FieldName": "listComments",
                        "TypeName": "Query",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Query",
                                                "listComments",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Query",
                                                "listComments",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                },
                "CreateCommentResolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::GetAtt": [
                                "CommentDataSource",
                                "Name"
                            ]
                        },
                        "FieldName": "createComment",
                        "TypeName": "Mutation",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Mutation",
                                                "createComment",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Mutation",
                                                "createComment",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                },
                "UpdateCommentResolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::GetAtt": [
                                "CommentDataSource",
                                "Name"
                            ]
                        },
                        "FieldName": "updateComment",
                        "TypeName": "Mutation",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Mutation",
                                                "updateComment",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Mutation",
                                                "updateComment",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                },
                "DeleteCommentResolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::GetAtt": [
                                "CommentDataSource",
                                "Name"
                            ]
                        },
                        "FieldName": "deleteComment",
                        "TypeName": "Mutation",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Mutation",
                                                "deleteComment",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Mutation",
                                                "deleteComment",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                },
                "CommentsimpleGetResolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::ImportValue": {
                                "Fn::Join": [
                                    ":",
                                    [
                                        {
                                            "Ref": "AppSyncApiId"
                                        },
                                        "GetAtt",
                                        "httpsjsonplaceholdertypicodecomDataSource",
                                        "Name"
                                    ]
                                ]
                            }
                        },
                        "FieldName": "simpleGet",
                        "TypeName": "Comment",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "simpleGet",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "simpleGet",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                },
                "CommentsimpleGet2Resolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::ImportValue": {
                                "Fn::Join": [
                                    ":",
                                    [
                                        {
                                            "Ref": "AppSyncApiId"
                                        },
                                        "GetAtt",
                                        "httpsjsonplaceholdertypicodecomDataSource",
                                        "Name"
                                    ]
                                ]
                            }
                        },
                        "FieldName": "simpleGet2",
                        "TypeName": "Comment",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "simpleGet2",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "simpleGet2",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                },
                "CommentcomplexPostResolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::ImportValue": {
                                "Fn::Join": [
                                    ":",
                                    [
                                        {
                                            "Ref": "AppSyncApiId"
                                        },
                                        "GetAtt",
                                        "httpsjsonplaceholdertypicodecomDataSource",
                                        "Name"
                                    ]
                                ]
                            }
                        },
                        "FieldName": "complexPost",
                        "TypeName": "Comment",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "complexPost",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "complexPost",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                },
                "CommentcomplexPutResolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::ImportValue": {
                                "Fn::Join": [
                                    ":",
                                    [
                                        {
                                            "Ref": "AppSyncApiId"
                                        },
                                        "GetAtt",
                                        "httpsjsonplaceholdertypicodecomDataSource",
                                        "Name"
                                    ]
                                ]
                            }
                        },
                        "FieldName": "complexPut",
                        "TypeName": "Comment",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "complexPut",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "complexPut",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                },
                "CommentdeleterResolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::ImportValue": {
                                "Fn::Join": [
                                    ":",
                                    [
                                        {
                                            "Ref": "AppSyncApiId"
                                        },
                                        "GetAtt",
                                        "httpsjsonplaceholdertypicodecomDataSource",
                                        "Name"
                                    ]
                                ]
                            }
                        },
                        "FieldName": "deleter",
                        "TypeName": "Comment",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "deleter",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "deleter",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                },
                "CommentcomplexGetResolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::ImportValue": {
                                "Fn::Join": [
                                    ":",
                                    [
                                        {
                                            "Ref": "AppSyncApiId"
                                        },
                                        "GetAtt",
                                        "httpsjsonplaceholdertypicodecomDataSource",
                                        "Name"
                                    ]
                                ]
                            }
                        },
                        "FieldName": "complexGet",
                        "TypeName": "Comment",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "complexGet",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "complexGet",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                },
                "CommentcomplexGet2Resolver": {
                    "Type": "AWS::AppSync::Resolver",
                    "Properties": {
                        "ApiId": {
                            "Ref": "AppSyncApiId"
                        },
                        "DataSourceName": {
                            "Fn::ImportValue": {
                                "Fn::Join": [
                                    ":",
                                    [
                                        {
                                            "Ref": "AppSyncApiId"
                                        },
                                        "GetAtt",
                                        "httpsjsonplaceholdertypicodecomDataSource",
                                        "Name"
                                    ]
                                ]
                            }
                        },
                        "FieldName": "complexGet2",
                        "TypeName": "Comment",
                        "RequestMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "complexGet2",
                                                "request",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ResponseMappingTemplateS3Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    "s3:/",
                                    {
                                        "Ref": "S3DeploymentBucket"
                                    },
                                    {
                                        "Ref": "S3DeploymentRootKey"
                                    },
                                    "resolvers",
                                    {
                                        "Fn::Join": [
                                            ".",
                                            [
                                                "Comment",
                                                "complexGet2",
                                                "response",
                                                "vtl"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                }
            },
            "Outputs": {},
            "Conditions": {
                "HasEnvironmentParameter": {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "env"
                                },
                                "NONE"
                            ]
                        }
                    ]
                }
            }
        }
    },
    "resolvers": {
        "Query.getComment.request.vtl": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  }\n}",
        "Query.getComment.response.vtl": "$util.toJson($context.result)",
        "Query.listComments.request.vtl": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"Scan\",\n  \"filter\":   #if( $context.args.filter )\n$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\n  #else\nnull\n  #end,\n  \"limit\": $limit,\n  \"nextToken\":   #if( $context.args.nextToken )\n\"$context.args.nextToken\"\n  #else\nnull\n  #end\n}",
        "Query.listComments.response.vtl": "$util.toJson($ctx.result)",
        "Mutation.createComment.request.vtl": "## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"createdAt\", $util.time.nowISO8601()))\n$util.qr($context.args.input.put(\"updatedAt\", $util.time.nowISO8601()))\n$util.qr($context.args.input.put(\"__typename\", \"Comment\"))\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n      \"id\":     $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id, $util.autoId()))\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n## [End] Prepare DynamoDB PutItem Request. **",
        "Mutation.createComment.response.vtl": "$util.toJson($context.result)",
        "Mutation.updateComment.request.vtl": "#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n  $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n#else\n  #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.time.nowISO8601()))\n$util.qr($context.args.input.put(\"__typename\", \"Comment\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, [\"id\"]).entrySet() )\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entry.key\") )\n    $util.qr($expNames.put(\"#$entry.key\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entry.key\", \":$entry.key\"))\n    $util.qr($expNames.put(\"#$entry.key\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entry.key\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n      \"id\": {\n          \"S\": \"$context.args.input.id\"\n    }\n  },\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
        "Mutation.updateComment.response.vtl": "$util.toJson($context.result)",
        "Mutation.deleteComment.request.vtl": "#if( $authCondition )\n  #set( $condition = $authCondition )\n  $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n  $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n#else\n  #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n  \"condition\": $util.toJson($condition)\n}",
        "Mutation.deleteComment.response.vtl": "$util.toJson($context.result)",
        "Comment.simpleGet.request.vtl": "#set( $headers = $utils.http.copyHeaders($ctx.request.headers) )\n$util.qr($headers.put(\"accept-encoding\", \"application/json\"))\n{\n  \"version\": \"2018-05-29\",\n  \"method\": \"GET\",\n  \"resourcePath\": \"/posts/1\",\n  \"params\": {\n      \"query\": $util.toJson($ctx.args.query),\n      \"headers\": $util.toJson($headers)\n  }\n}",
        "Comment.simpleGet.response.vtl": "#if( $ctx.result.statusCode == 200 )\n  #if( $ctx.result.headers.get(\"Content-Type\").toLowerCase().contains(\"xml\") )\n$utils.xml.toJsonString($ctx.result.body)\n  #else\n$ctx.result.body\n  #end\n#else\n$util.qr($util.appendError($ctx.result.body, $ctx.result.statusCode))\n#end",
        "Comment.simpleGet2.request.vtl": "#set( $headers = $utils.http.copyHeaders($ctx.request.headers) )\n$util.qr($headers.put(\"accept-encoding\", \"application/json\"))\n{\n  \"version\": \"2018-05-29\",\n  \"method\": \"GET\",\n  \"resourcePath\": \"/posts/2\",\n  \"params\": {\n      \"query\": $util.toJson($ctx.args.query),\n      \"headers\": $util.toJson($headers)\n  }\n}",
        "Comment.simpleGet2.response.vtl": "#if( $ctx.result.statusCode == 200 )\n  #if( $ctx.result.headers.get(\"Content-Type\").toLowerCase().contains(\"xml\") )\n$utils.xml.toJsonString($ctx.result.body)\n  #else\n$ctx.result.body\n  #end\n#else\n$util.qr($util.appendError($ctx.result.body, $ctx.result.statusCode))\n#end",
        "Comment.complexPost.request.vtl": "## START: Manually checking that all non-null arguments are provided either in the query or the body **\n#if( (!$ctx.args.body.title && !$ctx.args.query.title) )\n$util.error(\"An argument you marked as Non-Null is not present in the query nor the body of your request.\"))\n#end\n## END: Manually checking that all non-null arguments are provided either in the query or the body **\n#set( $headers = $utils.http.copyHeaders($ctx.request.headers) )\n$util.qr($headers.put(\"Content-Type\", \"application/json\"))\n$util.qr($headers.put(\"accept-encoding\", \"application/json\"))\n{\n  \"version\": \"2018-05-29\",\n  \"method\": \"POST\",\n  \"resourcePath\": \"/posts\",\n  \"params\": {\n      \"body\": $util.toJson($ctx.args.body),\n      \"query\": $util.toJson($ctx.args.query),\n      \"headers\": $util.toJson($headers)\n  }\n}",
        "Comment.complexPost.response.vtl": "#if( $ctx.result.statusCode == 200 || $ctx.result.statusCode == 201 )\n  #if( $ctx.result.headers.get(\"Content-Type\").toLowerCase().contains(\"xml\") )\n$utils.xml.toJsonString($ctx.result.body)\n  #else\n$ctx.result.body\n  #end\n#else\n$util.qr($util.appendError($ctx.result.body, $ctx.result.statusCode))\n#end",
        "Comment.complexPut.request.vtl": "\n#set( $headers = $utils.http.copyHeaders($ctx.request.headers) )\n$util.qr($headers.put(\"Content-Type\", \"application/json\"))\n$util.qr($headers.put(\"accept-encoding\", \"application/json\"))\n{\n  \"version\": \"2018-05-29\",\n  \"method\": \"PUT\",\n  \"resourcePath\": \"/posts/${ctx.args.params.id}\",\n  \"params\": {\n      \"body\": $util.toJson($ctx.args.body),\n      \"query\": $util.toJson($ctx.args.query),\n      \"headers\": $util.toJson($headers)\n  }\n}",
        "Comment.complexPut.response.vtl": "#if( $ctx.result.statusCode == 200 || $ctx.result.statusCode == 201 )\n  #if( $ctx.result.headers.get(\"Content-Type\").toLowerCase().contains(\"xml\") )\n$utils.xml.toJsonString($ctx.result.body)\n  #else\n$ctx.result.body\n  #end\n#else\n$util.qr($util.appendError($ctx.result.body, $ctx.result.statusCode))\n#end",
        "Comment.deleter.request.vtl": "#set( $headers = $utils.http.copyHeaders($ctx.request.headers) )\n$util.qr($headers.put(\"accept-encoding\", \"application/json\"))\n{\n  \"version\": \"2018-05-29\",\n  \"method\": \"DELETE\",\n  \"resourcePath\": \"/posts/3\",\n  \"params\": {\n      \"headers\": $util.toJson($headers)\n  }\n}",
        "Comment.deleter.response.vtl": "#if( $ctx.result.statusCode == 200 )\n  #if( $ctx.result.headers.get(\"Content-Type\").toLowerCase().contains(\"xml\") )\n$utils.xml.toJsonString($ctx.result.body)\n  #else\n$ctx.result.body\n  #end\n#else\n$util.qr($util.appendError($ctx.result.body, $ctx.result.statusCode))\n#end",
        "Comment.complexGet.request.vtl": "#set( $headers = $utils.http.copyHeaders($ctx.request.headers) )\n$util.qr($headers.put(\"accept-encoding\", \"application/json\"))\n{\n  \"version\": \"2018-05-29\",\n  \"method\": \"GET\",\n  \"resourcePath\": \"/${ctx.args.params.data}\",\n  \"params\": {\n      \"query\": $util.toJson($ctx.args.query),\n      \"headers\": $util.toJson($headers)\n  }\n}",
        "Comment.complexGet.response.vtl": "#if( $ctx.result.statusCode == 200 )\n  #if( $ctx.result.headers.get(\"Content-Type\").toLowerCase().contains(\"xml\") )\n$utils.xml.toJsonString($ctx.result.body)\n  #else\n$ctx.result.body\n  #end\n#else\n$util.qr($util.appendError($ctx.result.body, $ctx.result.statusCode))\n#end",
        "Comment.complexGet2.request.vtl": "#set( $headers = $utils.http.copyHeaders($ctx.request.headers) )\n$util.qr($headers.put(\"accept-encoding\", \"application/json\"))\n{\n  \"version\": \"2018-05-29\",\n  \"method\": \"GET\",\n  \"resourcePath\": \"/${ctx.args.params.dataType}/${ctx.args.params.postId}/${ctx.args.params.secondType}\",\n  \"params\": {\n      \"query\": $util.toJson($ctx.args.query),\n      \"headers\": $util.toJson($headers)\n  }\n}",
        "Comment.complexGet2.response.vtl": "#if( $ctx.result.statusCode == 200 )\n  #if( $ctx.result.headers.get(\"Content-Type\").toLowerCase().contains(\"xml\") )\n$utils.xml.toJsonString($ctx.result.body)\n  #else\n$ctx.result.body\n  #end\n#else\n$util.qr($util.appendError($ctx.result.body, $ctx.result.statusCode))\n#end"
    },
    "functions": {},
    "schema": "type Comment {\n  id: ID!\n  title: String\n  simpleGet: CompObj\n  simpleGet2: CompObj\n  deleter: String\n  complexPost(query: CommentComplexPostQueryInput, body: CommentComplexPostBodyInput): CompObj\n  complexPut(params: CommentComplexPutParamsInput!, query: CommentComplexPutQueryInput, body: CommentComplexPutBodyInput): CompObj\n  complexGet(params: CommentComplexGetParamsInput!, query: CommentComplexGetQueryInput!): [CompObj]\n  complexGet2(params: CommentComplexGet2ParamsInput!, query: CommentComplexGet2QueryInput): [PostComment]\n}\n\ntype CompObj {\n  userId: Int\n  id: Int\n  title: String\n  body: String\n}\n\ntype PostComment {\n  postId: Int\n  id: Int\n  name: String\n  email: String\n  body: String\n}\n\ninput CompObjInput {\n  userId: Int\n  title: String\n  body: String\n}\n\ninput PostCommentInput {\n  postId: Int\n  name: String\n  email: String\n  body: String\n}\n\nenum ModelSortDirection {\n  ASC\n  DESC\n}\n\ntype ModelCommentConnection {\n  items: [Comment]\n  nextToken: String\n}\n\ninput ModelStringFilterInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  contains: String\n  notContains: String\n  between: [String]\n  beginsWith: String\n}\n\ninput ModelIDFilterInput {\n  ne: ID\n  eq: ID\n  le: ID\n  lt: ID\n  ge: ID\n  gt: ID\n  contains: ID\n  notContains: ID\n  between: [ID]\n  beginsWith: ID\n}\n\ninput ModelIntFilterInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  contains: Int\n  notContains: Int\n  between: [Int]\n}\n\ninput ModelFloatFilterInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  contains: Float\n  notContains: Float\n  between: [Float]\n}\n\ninput ModelBooleanFilterInput {\n  ne: Boolean\n  eq: Boolean\n}\n\ninput ModelCommentFilterInput {\n  id: ModelIDFilterInput\n  title: ModelStringFilterInput\n  deleter: ModelStringFilterInput\n  and: [ModelCommentFilterInput]\n  or: [ModelCommentFilterInput]\n  not: ModelCommentFilterInput\n}\n\ntype Query {\n  getComment(id: ID!): Comment\n  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection\n}\n\ninput CreateCommentInput {\n  id: ID\n  title: String\n  simpleGet: CompObjInput\n  simpleGet2: CompObjInput\n  complexPost: CompObjInput\n  complexPut: CompObjInput\n  deleter: String\n  complexGet: [CompObjInput]\n  complexGet2: [PostCommentInput]\n}\n\ninput UpdateCommentInput {\n  id: ID!\n  title: String\n  simpleGet: CompObjInput\n  simpleGet2: CompObjInput\n  complexPost: CompObjInput\n  complexPut: CompObjInput\n  deleter: String\n  complexGet: [CompObjInput]\n  complexGet2: [PostCommentInput]\n}\n\ninput DeleteCommentInput {\n  id: ID\n}\n\ntype Mutation {\n  createComment(input: CreateCommentInput!): Comment\n  updateComment(input: UpdateCommentInput!): Comment\n  deleteComment(input: DeleteCommentInput!): Comment\n}\n\ntype Subscription {\n  onCreateComment: Comment @aws_subscribe(mutations: [\"createComment\"])\n  onUpdateComment: Comment @aws_subscribe(mutations: [\"updateComment\"])\n  onDeleteComment: Comment @aws_subscribe(mutations: [\"deleteComment\"])\n}\n\ninput CommentComplexPostQueryInput {\n  id: Int\n  title: String\n  body: String\n  userId: Int\n}\n\ninput CommentComplexPostBodyInput {\n  id: Int\n  title: String\n  body: String\n  userId: Int\n}\n\ninput CommentComplexPutParamsInput {\n  id: String!\n}\n\ninput CommentComplexPutQueryInput {\n  title: String\n  body: String\n  userId: Int\n}\n\ninput CommentComplexPutBodyInput {\n  title: String\n  body: String\n  userId: Int\n}\n\ninput CommentComplexGetParamsInput {\n  data: String!\n}\n\ninput CommentComplexGetQueryInput {\n  userId: Int!\n  _limit: Int\n}\n\ninput CommentComplexGet2ParamsInput {\n  dataType: String!\n  postId: String!\n  secondType: String!\n}\n\ninput CommentComplexGet2QueryInput {\n  id: Int\n}\n"
}