export declare function runTest(projectDir: string, testModule: any): Promise<void>;
export declare function addFunctionWithAuthAccess(projectDir: string, testModule: any, funcName: string): Promise<string>;
export declare const func = "\n/* Amplify Params - DO NOT EDIT\nYou can access the following resource attributes as environment variables from your Lambda function\nvar environment = process.env.ENV\nvar region = process.env.REGION\nvar authMyResourceNameUserPoolId = process.env.AUTH_MYRESOURCENAME_USERPOOLID\n\nAmplify Params - DO NOT EDIT */\n\nconst { CognitoIdentityServiceProvider } = require('aws-sdk');\nconst cognitoIdentityServiceProvider = new CognitoIdentityServiceProvider();\n\n/**\n * Get user pool information from environment variables.\n */\nconst COGNITO_USERPOOL_ID = process.env.AUTH_MYRESOURCENAME_USERPOOLID;\nif (!COGNITO_USERPOOL_ID) {\n  throw new Error(\"Function requires environment variable: 'COGNITO_USERPOOL_ID'\");\n}\nconst COGNITO_USERNAME_CLAIM_KEY = 'cognito:username';\n\n/**\n * Using this as the entry point, you can use a single function to handle many resolvers.\n */\nconst resolvers = {\n  Query: {\n    echo: ctx => {\n      return ctx.arguments.msg;\n    },\n    me: async ctx => {\n      var params = {\n        UserPoolId: COGNITO_USERPOOL_ID /* required */,\n        Username: ctx.identity.claims[COGNITO_USERNAME_CLAIM_KEY] /* required */,\n      };\n      try {\n        // Read more: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html#adminGetUser-property\n        return await cognitoIdentityServiceProvider.adminGetUser(params).promise();\n      } catch (e) {\n        throw new Error('NOT FOUND');\n      }\n    },\n  },\n};\n\n// event\n// {\n//   \"typeName\": \"Query\", /* Filled dynamically based on @function usage location */\n//   \"fieldName\": \"me\", /* Filled dynamically based on @function usage location */\n//   \"arguments\": { /* GraphQL field arguments via $ctx.arguments */ },\n//   \"identity\": { /* AppSync identity object via $ctx.identity */ },\n//   \"source\": { /* The object returned by the parent resolver. E.G. if resolving field 'Post.comments', the source is the Post object. */ },\n//   \"request\": { /* AppSync request object. Contains things like headers. */ },\n//   \"prev\": { /* If using the built-in pipeline resolver support, this contains the object returned by the previous function. */ },\n// }\nexports.handler = async event => {\n  const typeHandler = resolvers[event.typeName];\n  if (typeHandler) {\n    const resolver = typeHandler[event.fieldName];\n    if (resolver) {\n      return await resolver(event);\n    }\n  }\n  throw new Error('Resolver not found.');\n};\n";
export declare const schema: string;
export declare const query = "\nquery {\n  me {\n    Username\n    UserStatus\n    UserCreateDate\n    UserAttributes {\n      Name\n      Value\n    }\n    MFAOptions {\n      AttributeName\n      DeliveryMedium\n    }\n    Enabled\n    PreferredMfaSetting\n    UserMFASettingList\n    UserLastModifiedDate\n  }\n}\n";
