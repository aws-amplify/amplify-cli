---
<%if (props.dependsOn && props.dependsOn.length > 0) { %>
Parameters:
<% for(var i=0; i < props.dependsOn.length; i++) { %>
<% for(var j=0; j < props.dependsOn[i].attributes.length; j++) { %>
  <%= props.dependsOn[i].category %><%= props.dependsOn[i].resourceName %><%= props.dependsOn[i].attributes[j] %>:
    Type: String
    Default: <%= props.dependsOn[i].category %><%= props.dependsOn[i].resourceName %><%= props.dependsOn[i].attributes[j] %>
<% } %>
<% } %>
<% } %>

Resources:
  GraphQLApi:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
      Name: <%= props.apiName %>
      <%if (props.securitySetting.type == 'iam') { %>
      AuthenticationType: AWS_IAM
      <% } %>
      <%if (props.securitySetting.type == 'apiKey') { %>
      AuthenticationType: API_KEY
      <% } %>
      <%if (props.securitySetting.type == 'cognito') { %>
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        AwsRegion: <%= props.securitySetting.options.cognitoUserPoolRegion %>
        UserPoolId: <%= props.securitySetting.options.cognitoUserPoolId %>
        DefaultAction: <%= props.securitySetting.options.cognitoAction %>	
        <%if (props.securitySetting.options.appClientRegex) { %>	
        AppIdClientRegex: <%= props.securitySetting.options.appClientRegex %>
        <% } %>
      <% } %>
      <%if (props.securitySetting.type == 'openId') { %>
      AuthenticationType: OPENID_CONNECT
      OpenIDConnectConfig:
        Issuer: <%= props.securitySetting.options.openIdUrl %>
        <%if (props.securitySetting.options.clientId) { %>
        ClientId: <%= props.securitySetting.options.clientId %>
        <% } %>
        <%if (props.securitySetting.options.issueTTL) { %>
        IatTTL: <%= props.securitySetting.options.issueTTL %>
        <% } %>
        <%if (props.securitySetting.options.authTTL) { %>
        AuthTTL: <%= props.securitySetting.options.authTTL %>
        <% } %>
      <% } %>

  <%if (props.securitySetting.type == 'apiKey') { %>
  AppSyncApiKey:
    Type: "AWS::AppSync::ApiKey"
    Properties:
      Expires: <%= props.securitySetting.options.apiKeyExpiryDays %>
      ApiId: !GetAtt GraphQLApi.ApiId
  <% } %>

  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: <%= props.serviceRoleName %>
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: 'sts:AssumeRole'
  <%if (props.dataSources && props.dataSources.dynamoDb) { %>
  ServicePolicyDynamo:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: <%= props.servicePolicyName %>
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:Query'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:Scan'
              - 'dynamodb:UpdateItem'
            Resource:
              <% for(var i=0; i < props.dataSources.dynamoDb.length; i++) { %>
              <%if (props.dataSources.dynamoDb[i].Arn) { %>
              - <%= props.dataSources.dynamoDb[i].Arn %>
              <% } else{ %>
              - !Ref <%= props.dataSources.dynamoDb[i].category %><%= props.dataSources.dynamoDb[i].resourceName %>Arn
              <% } %>
              <% } %>
      Roles:
        - !Ref ServiceRole
    <% } %>

  <%if (props.dataSources && props.dataSources.lambda) { %>
  ServicePolicyLambda:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: <%= props.servicePolicyName %>
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:invokeFunction'
            Resource:
              <% for(var i=0; i < props.dataSources.lambda.length; i++) { %>
              <%if (props.dataSources.lambda[i].Arn) { %>
              - <%= props.dataSources.lambda[i].Arn %>
              <% } else{ %>
              - !Ref <%= props.dataSources.lambda[i].category %><%= props.dataSources.lambda[i].resourceName %>Arn
              <% } %>
              <% } %>
      Roles:
        - !Ref ServiceRole
  <% } %>

  <%if (props.dataSources && props.dataSources.dynamoDb) { %>
  <% for(var i=0; i < props.dataSources.dynamoDb.length; i++) { %>
  <%= props.dataSources.dynamoDb[i].resourceName %>DataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      <%if (props.dataSources.dynamoDb[i].Arn) { %>
      Name: <%= props.dataSources.dynamoDb[i].resourceName %>
      <% } else { %>
      Name: !Ref <%= props.dataSources.dynamoDb[i].category %><%= props.dataSources.dynamoDb[i].resourceName %>Name
      <% } %>
      ServiceRoleArn:  !GetAtt ServiceRole.Arn
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        <%if (props.dataSources.dynamoDb[i].Arn) { %>
        AwsRegion: <%= props.dataSources.dynamoDb[i].region %>
        TableName: <%= props.dataSources.dynamoDb[i].TableName %>
        <% } else { %>
        AwsRegion: <%= props.region %>
        TableName: !Ref <%= props.dataSources.dynamoDb[i].category %><%= props.dataSources.dynamoDb[i].resourceName %>Name
        <% } %>
  <% } %>
  <% } %>

  <%if (props.dataSources && props.dataSources.lambda) { %>
  <% for(var i=0; i < props.dataSources.lambda.length; i++) { %>
  <%= props.dataSources.lambda[i].resourceName %>DataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      <%if (props.dataSources.lambda[i].Arn) { %>
      Name: <%= props.dataSources.lambda[i].resourceName %>
      <% } else { %>
      Name: !Ref <%= props.dataSources.lambda[i].category %><%= props.dataSources.lambda[i].resourceName %>Name
      <% } %>
      ServiceRoleArn:  !GetAtt ServiceRole.Arn
      Type: AWS_LAMBDA
      LambdaConfig:
       <%if (props.dataSources.lambda[i].Arn) { %>
        LambdaFunctionArn: <%= props.dataSources.lambda[i].Arn %>
        <% } else { %>
        LambdaFunctionArn: !Ref <%= props.dataSources.lambda[i].category %><%= props.dataSources.lambda[i].resourceName %>Arn
        <% } %>
  <% } %>
  <% } %>

Outputs:
  Region:
    Value: !Ref 'AWS::Region'
  GraphQLApiARN:
    Description: The App ID of the GraphQL endpoint.
    Value: !Ref GraphQLApi
  GraphQLApiId:
    Description: The App ID of the GraphQL endpoint.
    Value: !GetAtt GraphQLApi.ApiId
  GraphQLApiEndpoint:
    Description: The URL for the GraphQL endpoint.
    Value: !GetAtt GraphQLApi.GraphQLUrl
  <%if (props.securitySetting.type == 'apiKey') { %>
  ApiKey:
    Value: !GetAtt AppSyncApiKey.ApiKey
  <% } %>
