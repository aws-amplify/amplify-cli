//user input-data types generated by cli

export function enumToHelp( obj : object ){
    return `One of ${Object.values(obj)}`;
}

export enum S3TriggerFunctionType {
    EXISTING_FUNCTION = 'Choose an existing function from the project',
    NEW_FUNCTION = 'Create a new function'
}

export enum S3UserAccessRole {
    AUTH = "Auth",
    GUEST = "Guest",
    GROUP = "Group"
}

export function getUserAccessQuestions( accessRole : S3UserAccessRole ): string {
     if( accessRole === S3UserAccessRole.AUTH ){
         return "Authenticated";
     } else {
         return accessRole.toString()
     }
}

export enum S3AccessType  {
    AUTH_AND_GUEST =  "authAndGuest",
    AUTH_ONLY =  "auth"
}

export enum S3PermissionType {
    CREATE_AND_UPDATE = 'CREATE_AND_UPDATE',
    READ = 'READ',
    DELETE = 'DELETE',
}


export type GroupAccessType = Record<string,S3PermissionType[]>;


//User input data for S3 service
export interface S3UserInputs {
     resourceName : string|undefined,
     bucketName : string|undefined,
     policyUUID : string|undefined,
     storageAccess : S3AccessType|undefined,
     guestAccess: S3PermissionType[],
     authAccess : S3PermissionType[],
     triggerFunction: string|undefined,
     groupAccess : GroupAccessType|undefined, //{ "admingroup": [create, read,  delete, list], "secondgroup" :[...''...] }
     groupList : Array<string>|undefined   //Keys of group policy Map
}

export function defaultS3UserInputs() :S3UserInputs {
    const defaultS3UserInputValues: S3UserInputs = {
        resourceName : undefined,
        bucketName: undefined,
        storageAccess : undefined,
        policyUUID : undefined,
        guestAccess : [],
        authAccess : [],
        triggerFunction:undefined,
        groupAccess: undefined,
        groupList: undefined
    };
    return defaultS3UserInputValues;
}


export function getRoleAccessDefaultValues( role : string, groupName: string | undefined ,userInputs : S3UserInputs ){
    switch(role){
      case S3UserAccessRole.AUTH:
        return userInputs.authAccess;
      case S3UserAccessRole.GUEST:
       return userInputs.guestAccess;
      case S3UserAccessRole.GROUP:
        if ( userInputs.groupAccess && groupName && userInputs.groupAccess[groupName]){
            return userInputs.groupAccess[groupName]
        } else {
            return [];
        }
    }
    throw new Error(`Unknown Role in User Input: "${role}" : No Access`)
 }
