schema {
  query: Query
}

scalar Date

type doubleHump {
  humpOne: String
  humpTwo: String
}

type OddType {
  date: Date
  camel: doubleHump
}

# This is a type to test comments
type CommentTest {
  # This is a single-line comment
  singleLine: String
  # This is a multi-line
  # comment.
  multiLine: String
  enumCommentTest: EnumCommentTestCase
}

enum EnumCommentTestCase {
  # This is a single-line comment
  first
  # This is a multi-line
  # comment.
  second
}

interface InterfaceTestCase {
  prop: String!
}

type ImplA implements InterfaceTestCase {
  prop: String!
  propA: String!
}

type ImplB implements InterfaceTestCase {
  prop: String!
  propB: Int
}

type PartialA {
  prop: String!
}

type PartialB {
  prop: String!
}

union UnionTestCase = PartialA | PartialB

type Query {
  misc: OddType
  commentTest: CommentTest
  interfaceTest: InterfaceTestCase
  unionTest: UnionTestCase
  scalarTest: Boolean!
  arrayTest: [QueryObject]
  echo(msg: String): String
}

type QueryObject {
  test: String
}
