// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Scala code generation #caseClassDeclarationForFragment() should generate a caseClass declaration for a fragment that includes a fragment spread 1`] = `
"case class HeroDetails(name: String, appearsIn: Seq[Option[String]]) extends me.shadaj.slinky.core.WithRaw {
}

object HeroDetails {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit def toMoreHeroDetails(a: HeroDetails): MoreHeroDetails = MoreHeroDetails(a.appearsIn)
  val fragmentString =
    \\"fragment HeroDetails on Character {\\" +
    \\"  name\\" +
    \\"  ...MoreHeroDetails\\" +
    \\"}\\"
}"
`;

exports[`Scala code generation #caseClassDeclarationForFragment() should generate a caseClass declaration for a fragment with a concrete type condition 1`] = `
"case class DroidDetails(name: String, primaryFunction: Option[String]) {
}

object DroidDetails {
  val possibleTypes = scala.collection.Set(\\"Droid\\")
  val fragmentString =
    \\"fragment DroidDetails on Droid {\\" +
    \\"  name\\" +
    \\"  primaryFunction\\" +
    \\"}\\"
}"
`;

exports[`Scala code generation #caseClassDeclarationForFragment() should generate a caseClass declaration for a fragment with a subselection 1`] = `
"case class HeroDetails(name: String, friends: Option[Seq[Option[Friend]]]) extends me.shadaj.slinky.core.WithRaw {
}

object HeroDetails {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  val fragmentString =
    \\"fragment HeroDetails on Character {\\" +
    \\"  name\\" +
    \\"  friends {\\" +
    \\"    name\\" +
    \\"  }\\" +
    \\"}\\"
}


case class Friend(name: String) extends me.shadaj.slinky.core.WithRaw {
}

object Friend {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
}"
`;

exports[`Scala code generation #caseClassDeclarationForFragment() should generate a caseClass declaration for a fragment with an abstract type condition 1`] = `
"case class HeroDetails(name: String, appearsIn: Seq[Option[String]]) extends me.shadaj.slinky.core.WithRaw {
}

object HeroDetails {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  val fragmentString =
    \\"fragment HeroDetails on Character {\\" +
    \\"  name\\" +
    \\"  appearsIn\\" +
    \\"}\\"
}"
`;

exports[`Scala code generation #caseClassDeclarationForSelectionSet() should escape reserved keywords in a caseClass declaration for a selection set 1`] = `
"case class Hero(private: Option[String]) extends me.shadaj.slinky.core.WithRaw {
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
}"
`;

exports[`Scala code generation #caseClassDeclarationForSelectionSet() should generate a caseClass declaration for a fragment spread nested in an inline fragment 1`] = `
"case class Hero() extends me.shadaj.slinky.core.WithRaw {
  def asDroid: Option[AsDroid] = {
    if (AsDroid.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[AsDroid]].read(this.raw)) else None
  }
}

case class AsDroid() {
}

object AsDroid {
  val possibleTypes = scala.collection.Set(\\"Droid\\")
  implicit def toHero(a: AsDroid): Hero = Hero()
  implicit def toHeroDetails(a: AsDroid): HeroDetails = HeroDetails()
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
}"
`;

exports[`Scala code generation #caseClassDeclarationForSelectionSet() should generate a caseClass declaration for a selection set 1`] = `
"case class Hero(name: Option[String]) extends me.shadaj.slinky.core.WithRaw {
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
}"
`;

exports[`Scala code generation #caseClassDeclarationForSelectionSet() should generate a caseClass declaration for a selection set with a fragment spread that matches the parent type 1`] = `
"case class Hero(name: Option[String]) extends me.shadaj.slinky.core.WithRaw {
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit def toHeroDetails(a: Hero): HeroDetails = HeroDetails()
}"
`;

exports[`Scala code generation #caseClassDeclarationForSelectionSet() should generate a caseClass declaration for a selection set with a fragment spread with a more specific type condition 1`] = `
"case class Hero(name: Option[String]) extends me.shadaj.slinky.core.WithRaw {
  def asDroidDetails: Option[DroidDetails] = {
    if (DroidDetails.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[DroidDetails]].read(this.raw)) else None
  }
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
}"
`;

exports[`Scala code generation #caseClassDeclarationForSelectionSet() should generate a caseClass declaration for a selection set with an inline fragment 1`] = `
"case class Hero(name: String) extends me.shadaj.slinky.core.WithRaw {
  def asDroid: Option[AsDroid] = {
    if (AsDroid.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[AsDroid]].read(this.raw)) else None
  }
}

case class AsDroid(name: String, primaryFunction: Option[String]) {
}

object AsDroid {
  val possibleTypes = scala.collection.Set(\\"Droid\\")
  implicit def toHero(a: AsDroid): Hero = Hero(a.name)
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
}"
`;

exports[`Scala code generation #caseClassDeclarationForSelectionSet() should generate a nested caseClass declaration for a selection set with subselections 1`] = `
"case class Hero(friends: Option[Seq[Option[Friend]]]) extends me.shadaj.slinky.core.WithRaw {
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
}


case class Friend(name: Option[String]) extends me.shadaj.slinky.core.WithRaw {
}

object Friend {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
}"
`;

exports[`Scala code generation #classDeclarationForOperation() should generate a class declaration for a mutation with variables 1`] = `
"object CreateReviewMutation extends com.apollographql.scalajs.GraphQLMutation {
  val operationString =
    \\"mutation CreateReview($episode: Episode) {\\" +
    \\"  createReview(episode: $episode, review: {stars: 5, commentary: \\\\\\"Wow!\\\\\\"}) {\\" +
    \\"    stars\\" +
    \\"    commentary\\" +
    \\"  }\\" +
    \\"}\\"
  val operation = com.apollographql.scalajs.gql(operationString)


  case class Variables(episode: Option[String]) {
  }

  case class Data(createReview: Option[CreateReview]) {
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Mutation\\")
  }

  case class CreateReview(stars: Int, commentary: Option[String]) {
  }

  object CreateReview {
    val possibleTypes = scala.collection.Set(\\"Review\\")
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() should generate a class declaration for a query with a fragment spread nested in an inline fragment 1`] = `
"object HeroQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ... on Droid {\\" +
    \\"      ...HeroDetails\\" +
    \\"    }\\" +
    \\"  }\\" +
    \\"}\\"

  val requestString: String = { operationString + HeroDetails.fragmentString }
  val operation = com.apollographql.scalajs.gql(requestString)

  type Variables = Unit

  case class Data(hero: Option[Hero]) {
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
  }


  case class Hero() extends me.shadaj.slinky.core.WithRaw {
    def asDroid: Option[AsDroid] = {
      if (AsDroid.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[AsDroid]].read(this.raw)) else None
    }
  }

  case class AsDroid(name: String) {
  }

  object AsDroid {
    val possibleTypes = scala.collection.Set(\\"Droid\\")
    implicit def toHero(a: AsDroid): Hero = Hero()
    implicit def toHeroDetails(a: AsDroid): HeroDetails = HeroDetails(a.name)
  }

  object Hero {
    val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() should generate a class declaration for a query with conditional fragment spreads 1`] = `
"object HeroQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ...DroidDetails\\" +
    \\"  }\\" +
    \\"}\\"

  val requestString: String = { operationString + DroidDetails.fragmentString }
  val operation = com.apollographql.scalajs.gql(requestString)

  type Variables = Unit

  case class Data(hero: Option[Hero]) {
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
  }


  case class Hero() extends me.shadaj.slinky.core.WithRaw {
    def asDroid: Option[AsDroid] = {
      if (AsDroid.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[AsDroid]].read(this.raw)) else None
    }
    def asDroidDetails: Option[DroidDetails] = {
      if (DroidDetails.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[DroidDetails]].read(this.raw)) else None
    }
  }

  case class AsDroid(primaryFunction: Option[String]) {
  }

  object AsDroid {
    val possibleTypes = scala.collection.Set(\\"Droid\\")
    implicit def toHero(a: AsDroid): Hero = Hero()
    implicit def toDroidDetails(a: AsDroid): DroidDetails = DroidDetails(a.primaryFunction)
  }

  object Hero {
    val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() should generate a class declaration for a query with fragment spreads 1`] = `
"object HeroQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ...HeroDetails\\" +
    \\"  }\\" +
    \\"}\\"

  val requestString: String = { operationString + HeroDetails.fragmentString }
  val operation = com.apollographql.scalajs.gql(requestString)

  type Variables = Unit

  case class Data(hero: Option[Hero]) {
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
  }


  case class Hero(name: String) extends me.shadaj.slinky.core.WithRaw {
  }

  object Hero {
    val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
    implicit def toHeroDetails(a: Hero): HeroDetails = HeroDetails(a.name)
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() should generate a class declaration for a query with variables 1`] = `
"object HeroNameQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query HeroName($episode: Episode) {\\" +
    \\"  hero(episode: $episode) {\\" +
    \\"    name\\" +
    \\"  }\\" +
    \\"}\\"
  val operation = com.apollographql.scalajs.gql(operationString)


  case class Variables(episode: Option[String]) {
  }

  case class Data(hero: Option[Hero]) {
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
  }


  case class Hero(name: String) extends me.shadaj.slinky.core.WithRaw {
  }

  object Hero {
    val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() when generateOperationIds is specified should generate a class declaration with an operationId property 1`] = `
"object HeroQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ...HeroDetails\\" +
    \\"  }\\" +
    \\"}\\"

  val operationIdentifier: String = \\"90d0d674eb6a7b33776f63200d6cec3d09f881247c360a2ac9a29037a02210c4\\"

  val requestString: String = { operationString + HeroDetails.fragmentString }
  val operation = com.apollographql.scalajs.gql(requestString)

  type Variables = Unit

  case class Data(hero: Option[Hero]) {
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
  }


  case class Hero(name: String) extends me.shadaj.slinky.core.WithRaw {
  }

  object Hero {
    val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
    implicit def toHeroDetails(a: Hero): HeroDetails = HeroDetails(a.name)
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() when generateOperationIds is specified should generate appropriate operation id mapping source when there are nested fragment references 1`] = `
"query Hero {
  hero {
    ...HeroDetails
  }
}
fragment HeroDetails on Character {
  ...HeroName
  appearsIn
}
fragment HeroName on Character {
  name
}"
`;

exports[`Scala code generation #typeDeclarationForGraphQLType() should escape identifiers in cases of enum declaration for a GraphQLEnumType 1`] = `
"object AlbumPrivacies {
  val public = \\"PUBLIC\\"
  val private = \\"PRIVATE\\"
}
"
`;

exports[`Scala code generation #typeDeclarationForGraphQLType() should generate a caseClass declaration for a GraphQLInputObjectType 1`] = `
"/**
 * The input object sent when someone is creating a new review
 */
case class ReviewInput(stars: Int, commentary: Option[String], favoriteColor: Option[ColorInput]) {
}"
`;

exports[`Scala code generation #typeDeclarationForGraphQLType() should generate an enum declaration for a GraphQLEnumType 1`] = `
"/**
 * The episodes in the Star Wars trilogy
 */
object Episode {
  /**
   * Star Wars Episode IV: A New Hope, released in 1977.
   */
  val newhope = \\"NEWHOPE\\"
  /**
   * Star Wars Episode V: The Empire Strikes Back, released in 1980.
   */
  val empire = \\"EMPIRE\\"
  /**
   * Star Wars Episode VI: Return of the Jedi, released in 1983.
   */
  val jedi = \\"JEDI\\"
}
"
`;
