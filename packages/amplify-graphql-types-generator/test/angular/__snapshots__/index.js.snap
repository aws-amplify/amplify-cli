// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Angular code generation #generateSource() should generate correct list with custom fragment 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type Character = {
  __typename: \\"Character\\";
  // The ID of the character
  id?: string;
  // The name of the character
  name?: string;
  // The friends of the character, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the character exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this character appears in
  appearsIn?: Array<Episode | null>;
};

export type Human = {
  __typename: \\"Human\\";
  // The ID of the human
  id?: string;
  // What this human calls themselves
  name?: string;
  // The home planet of the human, or null if unknown
  homePlanet?: string | null;
  // Height in the preferred unit, default is meters
  height?: number | null;
  // Mass in kilograms, or null if unknown
  mass?: number | null;
  // This human's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the human exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this human appears in
  appearsIn?: Array<Episode | null>;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<Starship | null> | null;
};

export type FriendsConnection = {
  __typename: \\"FriendsConnection\\";
  // The total number of friends
  totalCount?: number | null;
  // The edges for each of the character's friends.
  edges?: Array<FriendsEdge | null> | null;
  // A list of the friends, as a convenience when edges are not needed.
  friends?: Array<Character | null> | null;
  // Information for paginating this connection
  pageInfo?: PageInfo;
};

export type FriendsEdge = {
  __typename: \\"FriendsEdge\\";
  // A cursor used for pagination
  cursor?: string;
  // The character represented by this friendship edge
  node?: Character;
};

export type PageInfo = {
  __typename: \\"PageInfo\\";
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage?: boolean;
};

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id?: string;
  // The name of the starship
  name?: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type Droid = {
  __typename: \\"Droid\\";
  // The ID of the droid
  id?: string;
  // What others call this droid
  name?: string;
  // This droid's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the droid exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this droid appears in
  appearsIn?: Array<Episode | null>;
  // This droid's primary function
  primaryFunction?: string | null;
};

export type HeroAndFriendsNamesQuery = {
  __typename: \\"Character\\";
  // The name of the character
  name: string;
  // The friends of the character, or an empty list if they have none
  friends: Array<
    | (
        | {
            __typename: \\"Human\\";
            // The name of the character
            name: string;
          }
        | {
            __typename: \\"Droid\\";
            // The name of the character
            name: string;
          }
      )
    | null
  > | null;
};

export type FriendFragment =
  | {
      __typename: \\"Human\\";
      // The name of the character
      name: string;
    }
  | {
      __typename: \\"Droid\\";
      // The name of the character
      name: string;
    };

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async HeroAndFriendsNames(
    episode?: Episode
  ): Promise<HeroAndFriendsNamesQuery> {
    const statement = \`query HeroAndFriendsNames($episode: Episode) {
        hero(episode: $episode) {
          __typename
          name
          friends {
            __typename
            ...Friend
          }
        }
      }\`;
    const gqlAPIServiceArguments: any = {};
    if (episode) {
      gqlAPIServiceArguments.episode = episode;
    }
    const response = (await API.graphql(
      graphqlOperation(statement, gqlAPIServiceArguments)
    )) as any;
    return <HeroAndFriendsNamesQuery>response.data.hero;
  }
}
"
`;

exports[`Angular code generation #generateSource() should generate fragmented query operations 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type Character = {
  __typename: \\"Character\\";
  // The ID of the character
  id?: string;
  // The name of the character
  name?: string;
  // The friends of the character, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the character exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this character appears in
  appearsIn?: Array<Episode | null>;
};

export type Human = {
  __typename: \\"Human\\";
  // The ID of the human
  id?: string;
  // What this human calls themselves
  name?: string;
  // The home planet of the human, or null if unknown
  homePlanet?: string | null;
  // Height in the preferred unit, default is meters
  height?: number | null;
  // Mass in kilograms, or null if unknown
  mass?: number | null;
  // This human's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the human exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this human appears in
  appearsIn?: Array<Episode | null>;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<Starship | null> | null;
};

export type FriendsConnection = {
  __typename: \\"FriendsConnection\\";
  // The total number of friends
  totalCount?: number | null;
  // The edges for each of the character's friends.
  edges?: Array<FriendsEdge | null> | null;
  // A list of the friends, as a convenience when edges are not needed.
  friends?: Array<Character | null> | null;
  // Information for paginating this connection
  pageInfo?: PageInfo;
};

export type FriendsEdge = {
  __typename: \\"FriendsEdge\\";
  // A cursor used for pagination
  cursor?: string;
  // The character represented by this friendship edge
  node?: Character;
};

export type PageInfo = {
  __typename: \\"PageInfo\\";
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage?: boolean;
};

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id?: string;
  // The name of the starship
  name?: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type Droid = {
  __typename: \\"Droid\\";
  // The ID of the droid
  id?: string;
  // What others call this droid
  name?: string;
  // This droid's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the droid exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this droid appears in
  appearsIn?: Array<Episode | null>;
  // This droid's primary function
  primaryFunction?: string | null;
};

export type HeroAndFriendsNamesQuery = {
  __typename: \\"Character\\";
  // The name of the character
  name: string;
  // The friends of the character, or an empty list if they have none
  friends: Array<
    | (
        | {
            __typename: \\"Human\\";
            // The name of the character
            name: string;
          }
        | {
            __typename: \\"Droid\\";
            // The name of the character
            name: string;
          }
      )
    | null
  > | null;
};

export type heroFriendsFragment =
  | {
      __typename: \\"Human\\";
      // The friends of the character, or an empty list if they have none
      friends: Array<
        | (
            | {
                __typename: \\"Human\\";
                // The name of the character
                name: string;
              }
            | {
                __typename: \\"Droid\\";
                // The name of the character
                name: string;
              }
          )
        | null
      > | null;
    }
  | {
      __typename: \\"Droid\\";
      // The friends of the character, or an empty list if they have none
      friends: Array<
        | (
            | {
                __typename: \\"Human\\";
                // The name of the character
                name: string;
              }
            | {
                __typename: \\"Droid\\";
                // The name of the character
                name: string;
              }
          )
        | null
      > | null;
    };

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async HeroAndFriendsNames(): Promise<HeroAndFriendsNamesQuery> {
    const statement = \`query HeroAndFriendsNames {
        hero {
          __typename
          name
          ...heroFriends
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <HeroAndFriendsNamesQuery>response.data.hero;
  }
}
"
`;

exports[`Angular code generation #generateSource() should generate mutation operations with complex input types 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type ReviewInput = {
  // 0-5 stars
  stars: number;
  // Comment about the movie, optional
  commentary?: string | null;
  // Favorite color, optional
  favorite_color?: ColorInput | null;
};

export type ColorInput = {
  red: number;
  green: number;
  blue: number;
};

export type Review = {
  __typename: \\"Review\\";
  // The number of stars this review gave, 1-5
  stars?: number;
  // Comment about the movie
  commentary?: string | null;
};

export type ReviewMovieMutation = {
  __typename: \\"Review\\";
  // The number of stars this review gave, 1-5
  stars: number;
  // Comment about the movie
  commentary?: string | null;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async ReviewMovie(
    episode?: Episode,
    review?: ReviewInput
  ): Promise<ReviewMovieMutation> {
    const statement = \`mutation ReviewMovie($episode: Episode, $review: ReviewInput) {
        createReview(episode: $episode, review: $review) {
          __typename
          stars
          commentary
        }
      }\`;
    const gqlAPIServiceArguments: any = {};
    if (episode) {
      gqlAPIServiceArguments.episode = episode;
    }
    if (review) {
      gqlAPIServiceArguments.review = review;
    }
    const response = (await API.graphql(
      graphqlOperation(statement, gqlAPIServiceArguments)
    )) as any;
    return <ReviewMovieMutation>response.data.createReview;
  }
}
"
`;

exports[`Angular code generation #generateSource() should generate queries returning Arrays as Array objects 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type QueryObject = {
  __typename: \\"QueryObject\\";
  test?: string | null;
};

export type CustomScalarQuery = {
  __typename: \\"QueryObject\\";
  test?: string | null;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async CustomScalar(): Promise<Array<CustomScalarQuery>> {
    const statement = \`query CustomScalar {
        arrayTest {
          __typename
          test
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <Array<CustomScalarQuery>>response.data.arrayTest;
  }
}
"
`;

exports[`Angular code generation #generateSource() should generate query operations with inline fragments 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type Character = {
  __typename: \\"Character\\";
  // The ID of the character
  id?: string;
  // The name of the character
  name?: string;
  // The friends of the character, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the character exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this character appears in
  appearsIn?: Array<Episode | null>;
};

export type Human = {
  __typename: \\"Human\\";
  // The ID of the human
  id?: string;
  // What this human calls themselves
  name?: string;
  // The home planet of the human, or null if unknown
  homePlanet?: string | null;
  // Height in the preferred unit, default is meters
  height?: number | null;
  // Mass in kilograms, or null if unknown
  mass?: number | null;
  // This human's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the human exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this human appears in
  appearsIn?: Array<Episode | null>;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<Starship | null> | null;
};

export type FriendsConnection = {
  __typename: \\"FriendsConnection\\";
  // The total number of friends
  totalCount?: number | null;
  // The edges for each of the character's friends.
  edges?: Array<FriendsEdge | null> | null;
  // A list of the friends, as a convenience when edges are not needed.
  friends?: Array<Character | null> | null;
  // Information for paginating this connection
  pageInfo?: PageInfo;
};

export type FriendsEdge = {
  __typename: \\"FriendsEdge\\";
  // A cursor used for pagination
  cursor?: string;
  // The character represented by this friendship edge
  node?: Character;
};

export type PageInfo = {
  __typename: \\"PageInfo\\";
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage?: boolean;
};

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id?: string;
  // The name of the starship
  name?: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type Droid = {
  __typename: \\"Droid\\";
  // The ID of the droid
  id?: string;
  // What others call this droid
  name?: string;
  // This droid's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the droid exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this droid appears in
  appearsIn?: Array<Episode | null>;
  // This droid's primary function
  primaryFunction?: string | null;
};

export type HeroAndDetailsQuery = {
  __typename: \\"Character\\";
  // The name of the character
  name: string;
};

export type HeroDetailsFragment =
  | {
      __typename: \\"Human\\";
      // Height in the preferred unit, default is meters
      height?: number | null;
    }
  | {
      __typename: \\"Droid\\";
      // This droid's primary function
      primaryFunction?: string | null;
    };

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async HeroAndDetails(): Promise<HeroAndDetailsQuery> {
    const statement = \`query HeroAndDetails {
        hero {
          __typename
          name
          ...HeroDetails
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <HeroAndDetailsQuery>response.data.hero;
  }
}
"
`;

exports[`Angular code generation #generateSource() should generate simple nested query operations including input variables 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type Character = {
  __typename: \\"Character\\";
  // The ID of the character
  id?: string;
  // The name of the character
  name?: string;
  // The friends of the character, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the character exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this character appears in
  appearsIn?: Array<Episode | null>;
};

export type Human = {
  __typename: \\"Human\\";
  // The ID of the human
  id?: string;
  // What this human calls themselves
  name?: string;
  // The home planet of the human, or null if unknown
  homePlanet?: string | null;
  // Height in the preferred unit, default is meters
  height?: number | null;
  // Mass in kilograms, or null if unknown
  mass?: number | null;
  // This human's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the human exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this human appears in
  appearsIn?: Array<Episode | null>;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<Starship | null> | null;
};

export type FriendsConnection = {
  __typename: \\"FriendsConnection\\";
  // The total number of friends
  totalCount?: number | null;
  // The edges for each of the character's friends.
  edges?: Array<FriendsEdge | null> | null;
  // A list of the friends, as a convenience when edges are not needed.
  friends?: Array<Character | null> | null;
  // Information for paginating this connection
  pageInfo?: PageInfo;
};

export type FriendsEdge = {
  __typename: \\"FriendsEdge\\";
  // A cursor used for pagination
  cursor?: string;
  // The character represented by this friendship edge
  node?: Character;
};

export type PageInfo = {
  __typename: \\"PageInfo\\";
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage?: boolean;
};

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id?: string;
  // The name of the starship
  name?: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type Droid = {
  __typename: \\"Droid\\";
  // The ID of the droid
  id?: string;
  // What others call this droid
  name?: string;
  // This droid's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the droid exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this droid appears in
  appearsIn?: Array<Episode | null>;
  // This droid's primary function
  primaryFunction?: string | null;
};

export type HeroAndFriendsNamesQuery = {
  __typename: \\"Character\\";
  // The name of the character
  name: string;
  // The friends of the character, or an empty list if they have none
  friends: Array<
    | (
        | {
            __typename: \\"Human\\";
            // The name of the character
            name: string;
          }
        | {
            __typename: \\"Droid\\";
            // The name of the character
            name: string;
          }
      )
    | null
  > | null;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async HeroAndFriendsNames(
    episode?: Episode
  ): Promise<HeroAndFriendsNamesQuery> {
    const statement = \`query HeroAndFriendsNames($episode: Episode) {
        hero(episode: $episode) {
          __typename
          name
          friends {
            __typename
            name
          }
        }
      }\`;
    const gqlAPIServiceArguments: any = {};
    if (episode) {
      gqlAPIServiceArguments.episode = episode;
    }
    const response = (await API.graphql(
      graphqlOperation(statement, gqlAPIServiceArguments)
    )) as any;
    return <HeroAndFriendsNamesQuery>response.data.hero;
  }
}
"
`;

exports[`Angular code generation #generateSource() should generate simple nested with required elements in lists 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id?: string;
  // The name of the starship
  name?: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type StarshipCoordsQuery = {
  __typename: \\"Starship\\";
  coordinates?: Array<Array<number>> | null;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async StarshipCoords(): Promise<StarshipCoordsQuery> {
    const statement = \`query StarshipCoords {
        starship {
          __typename
          coordinates
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <StarshipCoordsQuery>response.data.starship;
  }
}
"
`;

exports[`Angular code generation #generateSource() should generate simple query operation with scalar field and scalar return type 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async Echo(msg?: string): Promise<string | null> {
    const statement = \`query Echo($msg: String) {
        echo(msg: $msg)
      }\`;
    const gqlAPIServiceArguments: any = {};
    if (msg) {
      gqlAPIServiceArguments.msg = msg;
    }
    const response = (await API.graphql(
      graphqlOperation(statement, gqlAPIServiceArguments)
    )) as any;
    return <string | null>response.data.echo;
  }
}
"
`;

exports[`Angular code generation #generateSource() should generate simple query operations 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type Character = {
  __typename: \\"Character\\";
  // The ID of the character
  id?: string;
  // The name of the character
  name?: string;
  // The friends of the character, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the character exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this character appears in
  appearsIn?: Array<Episode | null>;
};

export type Human = {
  __typename: \\"Human\\";
  // The ID of the human
  id?: string;
  // What this human calls themselves
  name?: string;
  // The home planet of the human, or null if unknown
  homePlanet?: string | null;
  // Height in the preferred unit, default is meters
  height?: number | null;
  // Mass in kilograms, or null if unknown
  mass?: number | null;
  // This human's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the human exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this human appears in
  appearsIn?: Array<Episode | null>;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<Starship | null> | null;
};

export type FriendsConnection = {
  __typename: \\"FriendsConnection\\";
  // The total number of friends
  totalCount?: number | null;
  // The edges for each of the character's friends.
  edges?: Array<FriendsEdge | null> | null;
  // A list of the friends, as a convenience when edges are not needed.
  friends?: Array<Character | null> | null;
  // Information for paginating this connection
  pageInfo?: PageInfo;
};

export type FriendsEdge = {
  __typename: \\"FriendsEdge\\";
  // A cursor used for pagination
  cursor?: string;
  // The character represented by this friendship edge
  node?: Character;
};

export type PageInfo = {
  __typename: \\"PageInfo\\";
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage?: boolean;
};

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id?: string;
  // The name of the starship
  name?: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type Droid = {
  __typename: \\"Droid\\";
  // The ID of the droid
  id?: string;
  // What others call this droid
  name?: string;
  // This droid's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the droid exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this droid appears in
  appearsIn?: Array<Episode | null>;
  // This droid's primary function
  primaryFunction?: string | null;
};

export type HeroNameQuery = {
  __typename: \\"Character\\";
  // The name of the character
  name: string;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async HeroName(): Promise<HeroNameQuery> {
    const statement = \`query HeroName {
        hero {
          __typename
          name
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <HeroNameQuery>response.data.hero;
  }
}
"
`;

exports[`Angular code generation #generateSource() should generate simple query operations including input variables 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type Character = {
  __typename: \\"Character\\";
  // The ID of the character
  id?: string;
  // The name of the character
  name?: string;
  // The friends of the character, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the character exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this character appears in
  appearsIn?: Array<Episode | null>;
};

export type Human = {
  __typename: \\"Human\\";
  // The ID of the human
  id?: string;
  // What this human calls themselves
  name?: string;
  // The home planet of the human, or null if unknown
  homePlanet?: string | null;
  // Height in the preferred unit, default is meters
  height?: number | null;
  // Mass in kilograms, or null if unknown
  mass?: number | null;
  // This human's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the human exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this human appears in
  appearsIn?: Array<Episode | null>;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<Starship | null> | null;
};

export type FriendsConnection = {
  __typename: \\"FriendsConnection\\";
  // The total number of friends
  totalCount?: number | null;
  // The edges for each of the character's friends.
  edges?: Array<FriendsEdge | null> | null;
  // A list of the friends, as a convenience when edges are not needed.
  friends?: Array<Character | null> | null;
  // Information for paginating this connection
  pageInfo?: PageInfo;
};

export type FriendsEdge = {
  __typename: \\"FriendsEdge\\";
  // A cursor used for pagination
  cursor?: string;
  // The character represented by this friendship edge
  node?: Character;
};

export type PageInfo = {
  __typename: \\"PageInfo\\";
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage?: boolean;
};

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id?: string;
  // The name of the starship
  name?: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type Droid = {
  __typename: \\"Droid\\";
  // The ID of the droid
  id?: string;
  // What others call this droid
  name?: string;
  // This droid's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the droid exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this droid appears in
  appearsIn?: Array<Episode | null>;
  // This droid's primary function
  primaryFunction?: string | null;
};

export type HeroNameQuery = {
  __typename: \\"Character\\";
  // The name of the character
  name: string;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async HeroName(episode?: Episode): Promise<HeroNameQuery> {
    const statement = \`query HeroName($episode: Episode) {
        hero(episode: $episode) {
          __typename
          name
        }
      }\`;
    const gqlAPIServiceArguments: any = {};
    if (episode) {
      gqlAPIServiceArguments.episode = episode;
    }
    const response = (await API.graphql(
      graphqlOperation(statement, gqlAPIServiceArguments)
    )) as any;
    return <HeroNameQuery>response.data.hero;
  }
}
"
`;

exports[`Angular code generation #generateSource() should generate subscriptions 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export interface SubscriptionResponse<T> {
  value: GraphQLResult<T>;
}

export type Restaurant = {
  __typename: \\"Restaurant\\";
  id?: string;
  name?: string;
  description?: string;
  city?: string;
};

export type OnCreateRestaurantSubscription = {
  __typename: \\"Restaurant\\";
  id: string;
  name: string;
  description: string;
  city: string;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  OnCreateRestaurantListener: Observable<
    SubscriptionResponse<OnCreateRestaurantSubscription>
  > = API.graphql(
    graphqlOperation(
      \`subscription OnCreateRestaurant {
        onCreateRestaurant {
          __typename
          id
          name
          description
          city
        }
      }\`
    )
  ) as Observable<SubscriptionResponse<OnCreateRestaurantSubscription>>;
}
"
`;

exports[`Angular code generation #generateSource() should handle comments in enums 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type CommentTest = {
  __typename: \\"CommentTest\\";
  // This is a single-line comment
  singleLine?: string | null;
  // This is a multi-line
  // comment.
  multiLine?: string | null;
  enumCommentTest?: EnumCommentTestCase | null;
};

export enum EnumCommentTestCase {
  first = \\"first\\", // This is a single-line comment
  // This is a multi-line
  // comment.
  second = \\"second\\"
}

export type CustomScalarQuery = {
  __typename: \\"CommentTest\\";
  enumCommentTest?: EnumCommentTestCase | null;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async CustomScalar(): Promise<CustomScalarQuery> {
    const statement = \`query CustomScalar {
        commentTest {
          __typename
          enumCommentTest
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <CustomScalarQuery>response.data.commentTest;
  }
}
"
`;

exports[`Angular code generation #generateSource() should handle interfaces at root 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type InterfaceTestCase = {
  __typename: \\"InterfaceTestCase\\";
  prop?: string;
};

export type ImplA = {
  __typename: \\"ImplA\\";
  prop?: string;
  propA?: string;
};

export type ImplB = {
  __typename: \\"ImplB\\";
  prop?: string;
  propB?: number | null;
};

export type CustomScalarQuery = {
  __typename: \\"InterfaceTestCase\\";
  prop: string;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async CustomScalar(): Promise<CustomScalarQuery> {
    const statement = \`query CustomScalar {
        interfaceTest {
          __typename
          prop
          ... on ImplA {
            propA
          }
          ... on ImplB {
            propB
          }
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <CustomScalarQuery>response.data.interfaceTest;
  }
}
"
`;

exports[`Angular code generation #generateSource() should handle multi-line comments 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type CommentTest = {
  __typename: \\"CommentTest\\";
  // This is a single-line comment
  singleLine?: string | null;
  // This is a multi-line
  // comment.
  multiLine?: string | null;
  enumCommentTest?: EnumCommentTestCase | null;
};

export enum EnumCommentTestCase {
  first = \\"first\\", // This is a single-line comment
  // This is a multi-line
  // comment.
  second = \\"second\\"
}

export type CustomScalarQuery = {
  __typename: \\"CommentTest\\";
  // This is a multi-line
  // comment.
  multiLine?: string | null;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async CustomScalar(): Promise<CustomScalarQuery> {
    const statement = \`query CustomScalar {
        commentTest {
          __typename
          multiLine
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <CustomScalarQuery>response.data.commentTest;
  }
}
"
`;

exports[`Angular code generation #generateSource() should handle single line comments 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type CommentTest = {
  __typename: \\"CommentTest\\";
  // This is a single-line comment
  singleLine?: string | null;
  // This is a multi-line
  // comment.
  multiLine?: string | null;
  enumCommentTest?: EnumCommentTestCase | null;
};

export enum EnumCommentTestCase {
  first = \\"first\\", // This is a single-line comment
  // This is a multi-line
  // comment.
  second = \\"second\\"
}

export type CustomScalarQuery = {
  __typename: \\"CommentTest\\";
  // This is a single-line comment
  singleLine?: string | null;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async CustomScalar(): Promise<CustomScalarQuery> {
    const statement = \`query CustomScalar {
        commentTest {
          __typename
          singleLine
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <CustomScalarQuery>response.data.commentTest;
  }
}
"
`;

exports[`Angular code generation #generateSource() should handle unions at root 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type UnionTestCase = PartialA | PartialB;

export type PartialA = {
  __typename: \\"PartialA\\";
  prop?: string;
};

export type PartialB = {
  __typename: \\"PartialB\\";
  prop?: string;
};

export type CustomScalarQuery = {
  __typename: \\"PartialA\\" | \\"PartialB\\";
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async CustomScalar(): Promise<CustomScalarQuery> {
    const statement = \`query CustomScalar {
        unionTest {
          __typename
          ... on PartialA {
            prop
          }
          ... on PartialB {
            prop
          }
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <CustomScalarQuery>response.data.unionTest;
  }
}
"
`;

exports[`Angular code generation #generateSource() should have __typename value matching fragment type on generic type 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type Character = {
  __typename: \\"Character\\";
  // The ID of the character
  id?: string;
  // The name of the character
  name?: string;
  // The friends of the character, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the character exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this character appears in
  appearsIn?: Array<Episode | null>;
};

export type Human = {
  __typename: \\"Human\\";
  // The ID of the human
  id?: string;
  // What this human calls themselves
  name?: string;
  // The home planet of the human, or null if unknown
  homePlanet?: string | null;
  // Height in the preferred unit, default is meters
  height?: number | null;
  // Mass in kilograms, or null if unknown
  mass?: number | null;
  // This human's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the human exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this human appears in
  appearsIn?: Array<Episode | null>;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<Starship | null> | null;
};

export type FriendsConnection = {
  __typename: \\"FriendsConnection\\";
  // The total number of friends
  totalCount?: number | null;
  // The edges for each of the character's friends.
  edges?: Array<FriendsEdge | null> | null;
  // A list of the friends, as a convenience when edges are not needed.
  friends?: Array<Character | null> | null;
  // Information for paginating this connection
  pageInfo?: PageInfo;
};

export type FriendsEdge = {
  __typename: \\"FriendsEdge\\";
  // A cursor used for pagination
  cursor?: string;
  // The character represented by this friendship edge
  node?: Character;
};

export type PageInfo = {
  __typename: \\"PageInfo\\";
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage?: boolean;
};

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id?: string;
  // The name of the starship
  name?: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type Droid = {
  __typename: \\"Droid\\";
  // The ID of the droid
  id?: string;
  // What others call this droid
  name?: string;
  // This droid's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the droid exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this droid appears in
  appearsIn?: Array<Episode | null>;
  // This droid's primary function
  primaryFunction?: string | null;
};

export type HeroNameQuery = {
  __typename: \\"Character\\";
  // The name of the character
  name: string;
};

export type HeroWithNameFragment =
  | {
      __typename: \\"Human\\";
      // The name of the character
      name: string;
    }
  | {
      __typename: \\"Droid\\";
      // The name of the character
      name: string;
    };

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async HeroName(): Promise<HeroNameQuery> {
    const statement = \`query HeroName {
        hero {
          __typename
          ...HeroWithName
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <HeroNameQuery>response.data.hero;
  }
}
"
`;

exports[`Angular code generation #generateSource() should have __typename value matching fragment type on specific type 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type Droid = {
  __typename: \\"Droid\\";
  // The ID of the droid
  id?: string;
  // What others call this droid
  name?: string;
  // This droid's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the droid exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this droid appears in
  appearsIn?: Array<Episode | null>;
  // This droid's primary function
  primaryFunction?: string | null;
};

export type Character = {
  __typename: \\"Character\\";
  // The ID of the character
  id?: string;
  // The name of the character
  name?: string;
  // The friends of the character, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the character exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this character appears in
  appearsIn?: Array<Episode | null>;
};

export type Human = {
  __typename: \\"Human\\";
  // The ID of the human
  id?: string;
  // What this human calls themselves
  name?: string;
  // The home planet of the human, or null if unknown
  homePlanet?: string | null;
  // Height in the preferred unit, default is meters
  height?: number | null;
  // Mass in kilograms, or null if unknown
  mass?: number | null;
  // This human's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the human exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this human appears in
  appearsIn?: Array<Episode | null>;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<Starship | null> | null;
};

export type FriendsConnection = {
  __typename: \\"FriendsConnection\\";
  // The total number of friends
  totalCount?: number | null;
  // The edges for each of the character's friends.
  edges?: Array<FriendsEdge | null> | null;
  // A list of the friends, as a convenience when edges are not needed.
  friends?: Array<Character | null> | null;
  // Information for paginating this connection
  pageInfo?: PageInfo;
};

export type FriendsEdge = {
  __typename: \\"FriendsEdge\\";
  // A cursor used for pagination
  cursor?: string;
  // The character represented by this friendship edge
  node?: Character;
};

export type PageInfo = {
  __typename: \\"PageInfo\\";
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage?: boolean;
};

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id?: string;
  // The name of the starship
  name?: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type DroidNameQuery = {
  __typename: \\"Droid\\";
  // What others call this droid
  name: string;
};

export type DroidWithNameFragment = {
  __typename: \\"Droid\\";
  // What others call this droid
  name: string;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async DroidName(): Promise<DroidNameQuery> {
    const statement = \`query DroidName {
        droid {
          __typename
          ...DroidWithName
        }
      }\`;
    const response = (await API.graphql(graphqlOperation(statement))) as any;
    return <DroidNameQuery>response.data.droid;
  }
}
"
`;

exports[`Angular code generation #generateSource() should have the correct __typename(s) for nested fragments 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation, GraphQLResult } from \\"@aws-amplify/api-graphql\\";
import { Observable } from \\"zen-observable-ts\\";

export type Human = {
  __typename: \\"Human\\";
  // The ID of the human
  id?: string;
  // What this human calls themselves
  name?: string;
  // The home planet of the human, or null if unknown
  homePlanet?: string | null;
  // Height in the preferred unit, default is meters
  height?: number | null;
  // Mass in kilograms, or null if unknown
  mass?: number | null;
  // This human's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the human exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this human appears in
  appearsIn?: Array<Episode | null>;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<Starship | null> | null;
};

export type Character = {
  __typename: \\"Character\\";
  // The ID of the character
  id?: string;
  // The name of the character
  name?: string;
  // The friends of the character, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the character exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this character appears in
  appearsIn?: Array<Episode | null>;
};

export type Droid = {
  __typename: \\"Droid\\";
  // The ID of the droid
  id?: string;
  // What others call this droid
  name?: string;
  // This droid's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the droid exposed as a connection with edges
  friendsConnection?: FriendsConnection;
  // The movies this droid appears in
  appearsIn?: Array<Episode | null>;
  // This droid's primary function
  primaryFunction?: string | null;
};

export type FriendsConnection = {
  __typename: \\"FriendsConnection\\";
  // The total number of friends
  totalCount?: number | null;
  // The edges for each of the character's friends.
  edges?: Array<FriendsEdge | null> | null;
  // A list of the friends, as a convenience when edges are not needed.
  friends?: Array<Character | null> | null;
  // Information for paginating this connection
  pageInfo?: PageInfo;
};

export type FriendsEdge = {
  __typename: \\"FriendsEdge\\";
  // A cursor used for pagination
  cursor?: string;
  // The character represented by this friendship edge
  node?: Character;
};

export type PageInfo = {
  __typename: \\"PageInfo\\";
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage?: boolean;
};

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id?: string;
  // The name of the starship
  name?: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type FindHumanQuery = {
  __typename: \\"Human\\";
  // The ID of the human
  id: string;
  // What this human calls themselves
  name: string;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<{
    __typename: \\"Starship\\";
    // The ID of the starship
    id: string;
    // The name of the starship
    name: string;
  } | null> | null;
};

export type humanDetailsFragment = {
  __typename: \\"Human\\";
  // The ID of the human
  id: string;
  // What this human calls themselves
  name: string;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<{
    __typename: string;
    // The ID of the starship
    id: string;
    // The name of the starship
    name: string;
  } | null> | null;
};

export type starshipDetailsFragment = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id: string;
  // The name of the starship
  name: string;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  async FindHuman(id: string): Promise<FindHumanQuery> {
    const statement = \`query FindHuman($id: ID!) {
        human {
          __typename
          ...humanDetails
        }
      }\`;
    const gqlAPIServiceArguments: any = {
      id
    };
    const response = (await API.graphql(
      graphqlOperation(statement, gqlAPIServiceArguments)
    )) as any;
    return <FindHumanQuery>response.data.human;
  }
}
"
`;
