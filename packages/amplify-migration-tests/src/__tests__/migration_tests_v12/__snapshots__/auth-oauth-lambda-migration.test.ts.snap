// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify add auth... ...should init an Js project and add Oauth settings with userpool 1`] = `
"IAM Statement Changes
┌───┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬────────────────────────────────────┬───────────────────────────┬───────────┐
│   │ Resource                                                                                                                                                                                    │ Effect │ Action                             │ Principal                 │ Condition │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DescribeUserPoolClient │ AWS:\${UserPoolClientRole} │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:UpdateUserPoolClient   │ AWS:\${UserPoolClientRole} │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${OAuthCustomResource}"}]}  │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${UserPoolClientLambda}"}]} │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
└───┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴────────────────────────────────────┴───────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Conditions
[-] Condition ShouldOutputAppClientSecrets: {"Fn::Equals":[{"Ref":"userpoolClientGenerateSecret"},true]}

Resources
[-] AWS::Lambda::Function UserPoolClientLambda destroy
[-] AWS::IAM::Policy UserPoolClientLambdaPolicy destroy
[-] AWS::IAM::Policy UserPoolClientLogPolicy destroy
[-] Custom::LambdaCallout UserPoolClientInputs destroy
[-] AWS::Lambda::Function OAuthCustomResource destroy
[-] AWS::IAM::Policy OAuthCustomResourcePolicy destroy
[-] AWS::IAM::Policy OAuthCustomResourceLogPolicy destroy
[-] Custom::LambdaCallout OAuthCustomResourceInputs destroy
[~] AWS::Cognito::UserPoolClient UserPoolClientWeb 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,4 @@
        [ ] [
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::Cognito::UserPoolClient UserPoolClient 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,4 @@
        [ ] [
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::IAM::Role UserPoolClientRole 
 └─ [-] DependsOn
     └─ ["UserPoolClient"]
[~] AWS::Lambda::Function HostedUICustomResource 
 ├─ [~] Code
 │   └─ [~] .ZipFile:
 │       ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  let deleteUserPoolDomain = (domainName) => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };
  if (event.RequestType == 'Delete') {
    deleteUserPoolDomain(inputDomainName)
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    let checkDomainAvailability = (domainName) => {
      let params = { Domain: domainName };
      return identity
        .describeUserPoolDomain(params)
        .promise()
        .then((res) => {
          if (res.DomainDescription && res.DomainDescription.UserPool) {
            return false;
          }
          return true;
        })
        .catch((err) => {
          return false;
        });
    };
    let createUserPoolDomain = (domainName) => {
      let params = { Domain: domainName, UserPoolId: userPoolId };
      return identity.createUserPoolDomain(params).promise();
    };
    identity
      .describeUserPool({ UserPoolId: userPoolId })
      .promise()
      .then((result) => {
        if (inputDomainName) {
          if (result.UserPool.Domain === inputDomainName) {
            return;
          } else {
            if (!result.UserPool.Domain) {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return createUserPoolDomain(inputDomainName);
                } else {
                  throw new Error('Domain not available');
                }
              });
            } else {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));
                } else {
                  throw new Error('Domain not available');
                }
              });
            }
          }
        } else {
          if (result.UserPool.Domain) {
            return deleteUserPoolDomain(result.UserPool.Domain);
          }
        }
      })
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
};

 │       └─ [+] const response = require('cfn-response');
const {
  CognitoIdentityProviderClient,
  CreateUserPoolDomainCommand,
  DeleteUserPoolDomainCommand,
  DescribeUserPoolCommand,
  DescribeUserPoolDomainCommand,
} = require('@aws-sdk/client-cognito-identity-provider');
const identity = new CognitoIdentityProviderClient({});

exports.handler = (event, context) => {
  // Don't return promise, response.send() marks context as done internally
  void tryHandleEvent(event, context);
};

async function tryHandleEvent(event, context) {
  try {
    await handleEvent(event);
    response.send(event, context, response.SUCCESS, {});
  } catch (err) {
    console.log(err);
    response.send(event, context, response.FAILED, { err });
  }
}

async function handleEvent(event) {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  if (event.RequestType === 'Delete') {
    await deleteUserPoolDomain(inputDomainName, userPoolId);
  } else if (event.RequestType === 'Update' || event.RequestType === 'Create') {
    await createOrUpdateDomain(inputDomainName, userPoolId);
  }
}

async function checkDomainAvailability(domainName) {
  const params = { Domain: domainName };
  try {
    const res = await identity.send(new DescribeUserPoolDomainCommand(params));
    return !(res.DomainDescription && res.DomainDescription.UserPoolId);
  } catch (err) {
    return false;
  }
}

async function deleteUserPoolDomain(domainName, userPoolId) {
  const params = { Domain: domainName, UserPoolId: userPoolId };
  await identity.send(new DeleteUserPoolDomainCommand(params));
}

async function createUserPoolDomain(domainName, userPoolId) {
  const params = {
    Domain: domainName,
    UserPoolId: userPoolId,
  };
  await identity.send(new CreateUserPoolDomainCommand(params));
}

async function createOrUpdateDomain(inputDomainName, userPoolId) {
  const result = await identity.send(new DescribeUserPoolCommand({ UserPoolId: userPoolId }));
  if (result.UserPool.Domain === inputDomainName) {
    // if existing domain is same as input domain do nothing.
    return;
  }
  if (inputDomainName) {
    // create new or replace existing domain.
    const isDomainAvailable = await checkDomainAvailability(inputDomainName);
    if (isDomainAvailable) {
      if (result.UserPool.Domain) {
        await deleteUserPoolDomain(result.UserPool.Domain, userPoolId);
      }
      await createUserPoolDomain(inputDomainName, userPoolId);
    } else {
      throw new Error('Domain not available');
    }
  } else if (result.UserPool.Domain) {
    // if input domain is undefined delete existing domain if exists.
    await deleteUserPoolDomain(result.UserPool.Domain, userPoolId);
  }
}

 └─ [~] Runtime
     ├─ [-] nodejs16.x
     └─ [+] nodejs18.x
[~] AWS::Lambda::Function HostedUIProvidersCustomResource 
 ├─ [~] Code
 │   └─ [~] .ZipFile:
 │       ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    if (hostedUIProviderCreds.length === 0) {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let getRequestParams = (providerName) => {
        let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);
        let providerMeta = hostedUIProviderMeta[providerMetaIndex];
        let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);
        let providerCreds = hostedUIProviderCreds[providerCredsIndex];
        let requestParams = {
          ProviderName: providerMeta.ProviderName,
          UserPoolId: userPoolId,
          AttributeMapping: providerMeta.AttributeMapping,
        };
        if (providerMeta.ProviderName === 'SignInWithApple') {
          if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              team_id: providerCreds.team_id,
              key_id: providerCreds.key_id,
              private_key: providerCreds.private_key,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        } else {
          if (providerCreds.client_id && providerCreds.client_secret) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              client_secret: providerCreds.client_secret,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        }
        return requestParams;
      };
      let createIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        requestParams.ProviderType = requestParams.ProviderName;
        return identity.createIdentityProvider(requestParams).promise();
      };
      let updateIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        return identity.updateIdentityProvider(requestParams).promise();
      };
      let deleteIdentityProvider = (providerName) => {
        let params = { ProviderName: providerName, UserPoolId: userPoolId };
        return identity.deleteIdentityProvider(params).promise();
      };
      let providerPromises = [];
      identity
        .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })
        .promise()
        .then((result) => {
          console.log(result);
          let providerList = result.Providers.map((provider) => provider.ProviderName);
          let providerListInParameters = hostedUIProviderMeta.map((provider) => provider.ProviderName);
          hostedUIProviderMeta.forEach((providerMetadata) => {
            if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
              providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));
            } else {
              providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));
            }
          });
          providerList.forEach((provider) => {
            if (providerListInParameters.indexOf(provider) < 0) {
              providerPromises.push(deleteIdentityProvider(provider));
            }
          });
          return Promise.all(providerPromises);
        })
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch((err) => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

 │       └─ [+] const response = require('cfn-response');
const {
  CognitoIdentityProviderClient,
  CreateIdentityProviderCommand,
  DeleteIdentityProviderCommand,
  ListIdentityProvidersCommand,
  UpdateIdentityProviderCommand,
} = require('@aws-sdk/client-cognito-identity-provider');
const identity = new CognitoIdentityProviderClient({});

exports.handler = (event, context) => {
  // Don't return promise, response.send() marks context as done internally
  void tryHandleEvent(event, context);
};

async function tryHandleEvent(event, context) {
  try {
    await handleEvent(event);
    response.send(event, context, response.SUCCESS, {});
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
}

async function handleEvent(event) {
  const userPoolId = event.ResourceProperties.userPoolId;
  const hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
  const hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
  const hasHostedUIProviderCreds = hostedUIProviderCreds.length && hostedUIProviderCreds.length > 0;
  if (hasHostedUIProviderCreds && (event.RequestType === 'Update' || event.RequestType === 'Create')) {
    const listIdentityProvidersResponse = await identity.send(
      new ListIdentityProvidersCommand({
        UserPoolId: userPoolId,
        MaxResults: 60,
      }),
    );
    console.log(listIdentityProvidersResponse);
    const providerList = listIdentityProvidersResponse.Providers.map((provider) => provider.ProviderName);
    const providerListInParameters = hostedUIProviderMeta.map((provider) => provider.ProviderName);
    for (const providerMetadata of hostedUIProviderMeta) {
      if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
        await updateIdentityProvider(providerMetadata.ProviderName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId);
      } else {
        await createIdentityProvider(providerMetadata.ProviderName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId);
      }
    }
    for (const provider of providerList) {
      if (providerListInParameters.indexOf(provider) < 0) {
        await deleteIdentityProvider(provider, userPoolId);
      }
    }
  }
}

function getRequestParams(providerName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId) {
  const providerMeta = hostedUIProviderMeta.find((provider) => provider.ProviderName === providerName);
  const providerCreds = hostedUIProviderCreds.find((provider) => provider.ProviderName === providerName);
  let requestParams = {
    ProviderName: providerMeta.ProviderName,
    UserPoolId: userPoolId,
    AttributeMapping: providerMeta.AttributeMapping,
  };
  if (providerMeta.ProviderName === 'SignInWithApple') {
    if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
      requestParams.ProviderDetails = {
        client_id: providerCreds.client_id,
        team_id: providerCreds.team_id,
        key_id: providerCreds.key_id,
        private_key: providerCreds.private_key,
        authorize_scopes: providerMeta.authorize_scopes,
      };
    } else {
      requestParams = null;
    }
  } else {
    if (providerCreds.client_id && providerCreds.client_secret) {
      requestParams.ProviderDetails = {
        client_id: providerCreds.client_id,
        client_secret: providerCreds.client_secret,
        authorize_scopes: providerMeta.authorize_scopes,
      };
    } else {
      requestParams = null;
    }
  }
  return requestParams;
}

async function createIdentityProvider(providerName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId) {
  const requestParams = getRequestParams(providerName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId);
  if (!requestParams) {
    return;
  }
  requestParams.ProviderType = requestParams.ProviderName;
  await identity.send(new CreateIdentityProviderCommand(requestParams));
}

async function updateIdentityProvider(providerName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId) {
  const requestParams = getRequestParams(providerName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId);
  if (!requestParams) {
    return;
  }
  await identity.send(new UpdateIdentityProviderCommand(requestParams));
}

async function deleteIdentityProvider(providerName, userPoolId) {
  const params = { ProviderName: providerName, UserPoolId: userPoolId };
  await identity.send(new DeleteIdentityProviderCommand(params));
}

 └─ [~] Runtime
     ├─ [-] nodejs16.x
     └─ [+] nodejs18.x

Outputs
[-] Output AppClientSecret: {"Value":{"Fn::GetAtt":["UserPoolClientInputs","appSecret"]},"Condition":"ShouldOutputAppClientSecrets"}

"
`;

exports[`amplify add auth... ...should init an Js project and add Oauth settings with userpool 2`] = `
"IAM Statement Changes
┌───┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬────────────────────────────────────┬───────────────────────────┬───────────┐
│   │ Resource                                                                                                                                                                                    │ Effect │ Action                             │ Principal                 │ Condition │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DescribeUserPoolClient │ AWS:\${UserPoolClientRole} │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:UpdateUserPoolClient   │ AWS:\${UserPoolClientRole} │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${OAuthCustomResource}"}]}  │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${UserPoolClientLambda}"}]} │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
└───┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴────────────────────────────────────┴───────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Conditions
[-] Condition ShouldOutputAppClientSecrets: {"Fn::Equals":[{"Ref":"userpoolClientGenerateSecret"},true]}

Resources
[-] AWS::Lambda::Function UserPoolClientLambda destroy
[-] AWS::IAM::Policy UserPoolClientLambdaPolicy destroy
[-] AWS::IAM::Policy UserPoolClientLogPolicy destroy
[-] Custom::LambdaCallout UserPoolClientInputs destroy
[-] AWS::Lambda::Function OAuthCustomResource destroy
[-] AWS::IAM::Policy OAuthCustomResourcePolicy destroy
[-] AWS::IAM::Policy OAuthCustomResourceLogPolicy destroy
[-] Custom::LambdaCallout OAuthCustomResourceInputs destroy
[~] AWS::Cognito::UserPoolClient UserPoolClientWeb 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,4 @@
        [ ] [
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::Cognito::UserPoolClient UserPoolClient 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,4 @@
        [ ] [
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::IAM::Role UserPoolClientRole 
 └─ [-] DependsOn
     └─ ["UserPoolClient"]
[~] AWS::Lambda::Function HostedUICustomResource 
 ├─ [~] Code
 │   └─ [~] .ZipFile:
 │       ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  let deleteUserPoolDomain = (domainName) => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };
  if (event.RequestType == 'Delete') {
    deleteUserPoolDomain(inputDomainName)
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    let checkDomainAvailability = (domainName) => {
      let params = { Domain: domainName };
      return identity
        .describeUserPoolDomain(params)
        .promise()
        .then((res) => {
          if (res.DomainDescription && res.DomainDescription.UserPool) {
            return false;
          }
          return true;
        })
        .catch((err) => {
          return false;
        });
    };
    let createUserPoolDomain = (domainName) => {
      let params = { Domain: domainName, UserPoolId: userPoolId };
      return identity.createUserPoolDomain(params).promise();
    };
    identity
      .describeUserPool({ UserPoolId: userPoolId })
      .promise()
      .then((result) => {
        if (inputDomainName) {
          if (result.UserPool.Domain === inputDomainName) {
            return;
          } else {
            if (!result.UserPool.Domain) {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return createUserPoolDomain(inputDomainName);
                } else {
                  throw new Error('Domain not available');
                }
              });
            } else {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));
                } else {
                  throw new Error('Domain not available');
                }
              });
            }
          }
        } else {
          if (result.UserPool.Domain) {
            return deleteUserPoolDomain(result.UserPool.Domain);
          }
        }
      })
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
};

 │       └─ [+] const response = require('cfn-response');
const {
  CognitoIdentityProviderClient,
  CreateUserPoolDomainCommand,
  DeleteUserPoolDomainCommand,
  DescribeUserPoolCommand,
  DescribeUserPoolDomainCommand,
} = require('@aws-sdk/client-cognito-identity-provider');
const identity = new CognitoIdentityProviderClient({});

exports.handler = (event, context) => {
  // Don't return promise, response.send() marks context as done internally
  void tryHandleEvent(event, context);
};

async function tryHandleEvent(event, context) {
  try {
    await handleEvent(event);
    response.send(event, context, response.SUCCESS, {});
  } catch (err) {
    console.log(err);
    response.send(event, context, response.FAILED, { err });
  }
}

async function handleEvent(event) {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  if (event.RequestType === 'Delete') {
    await deleteUserPoolDomain(inputDomainName, userPoolId);
  } else if (event.RequestType === 'Update' || event.RequestType === 'Create') {
    await createOrUpdateDomain(inputDomainName, userPoolId);
  }
}

async function checkDomainAvailability(domainName) {
  const params = { Domain: domainName };
  try {
    const res = await identity.send(new DescribeUserPoolDomainCommand(params));
    return !(res.DomainDescription && res.DomainDescription.UserPoolId);
  } catch (err) {
    return false;
  }
}

async function deleteUserPoolDomain(domainName, userPoolId) {
  const params = { Domain: domainName, UserPoolId: userPoolId };
  await identity.send(new DeleteUserPoolDomainCommand(params));
}

async function createUserPoolDomain(domainName, userPoolId) {
  const params = {
    Domain: domainName,
    UserPoolId: userPoolId,
  };
  await identity.send(new CreateUserPoolDomainCommand(params));
}

async function createOrUpdateDomain(inputDomainName, userPoolId) {
  const result = await identity.send(new DescribeUserPoolCommand({ UserPoolId: userPoolId }));
  if (result.UserPool.Domain === inputDomainName) {
    // if existing domain is same as input domain do nothing.
    return;
  }
  if (inputDomainName) {
    // create new or replace existing domain.
    const isDomainAvailable = await checkDomainAvailability(inputDomainName);
    if (isDomainAvailable) {
      if (result.UserPool.Domain) {
        await deleteUserPoolDomain(result.UserPool.Domain, userPoolId);
      }
      await createUserPoolDomain(inputDomainName, userPoolId);
    } else {
      throw new Error('Domain not available');
    }
  } else if (result.UserPool.Domain) {
    // if input domain is undefined delete existing domain if exists.
    await deleteUserPoolDomain(result.UserPool.Domain, userPoolId);
  }
}

 └─ [~] Runtime
     ├─ [-] nodejs16.x
     └─ [+] nodejs18.x
[~] AWS::Lambda::Function HostedUIProvidersCustomResource 
 ├─ [~] Code
 │   └─ [~] .ZipFile:
 │       ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    if (hostedUIProviderCreds.length === 0) {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let getRequestParams = (providerName) => {
        let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);
        let providerMeta = hostedUIProviderMeta[providerMetaIndex];
        let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);
        let providerCreds = hostedUIProviderCreds[providerCredsIndex];
        let requestParams = {
          ProviderName: providerMeta.ProviderName,
          UserPoolId: userPoolId,
          AttributeMapping: providerMeta.AttributeMapping,
        };
        if (providerMeta.ProviderName === 'SignInWithApple') {
          if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              team_id: providerCreds.team_id,
              key_id: providerCreds.key_id,
              private_key: providerCreds.private_key,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        } else {
          if (providerCreds.client_id && providerCreds.client_secret) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              client_secret: providerCreds.client_secret,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        }
        return requestParams;
      };
      let createIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        requestParams.ProviderType = requestParams.ProviderName;
        return identity.createIdentityProvider(requestParams).promise();
      };
      let updateIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        return identity.updateIdentityProvider(requestParams).promise();
      };
      let deleteIdentityProvider = (providerName) => {
        let params = { ProviderName: providerName, UserPoolId: userPoolId };
        return identity.deleteIdentityProvider(params).promise();
      };
      let providerPromises = [];
      identity
        .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })
        .promise()
        .then((result) => {
          console.log(result);
          let providerList = result.Providers.map((provider) => provider.ProviderName);
          let providerListInParameters = hostedUIProviderMeta.map((provider) => provider.ProviderName);
          hostedUIProviderMeta.forEach((providerMetadata) => {
            if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
              providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));
            } else {
              providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));
            }
          });
          providerList.forEach((provider) => {
            if (providerListInParameters.indexOf(provider) < 0) {
              providerPromises.push(deleteIdentityProvider(provider));
            }
          });
          return Promise.all(providerPromises);
        })
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch((err) => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

 │       └─ [+] const response = require('cfn-response');
const {
  CognitoIdentityProviderClient,
  CreateIdentityProviderCommand,
  DeleteIdentityProviderCommand,
  ListIdentityProvidersCommand,
  UpdateIdentityProviderCommand,
} = require('@aws-sdk/client-cognito-identity-provider');
const identity = new CognitoIdentityProviderClient({});

exports.handler = (event, context) => {
  // Don't return promise, response.send() marks context as done internally
  void tryHandleEvent(event, context);
};

async function tryHandleEvent(event, context) {
  try {
    await handleEvent(event);
    response.send(event, context, response.SUCCESS, {});
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
}

async function handleEvent(event) {
  const userPoolId = event.ResourceProperties.userPoolId;
  const hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
  const hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
  const hasHostedUIProviderCreds = hostedUIProviderCreds.length && hostedUIProviderCreds.length > 0;
  if (hasHostedUIProviderCreds && (event.RequestType === 'Update' || event.RequestType === 'Create')) {
    const listIdentityProvidersResponse = await identity.send(
      new ListIdentityProvidersCommand({
        UserPoolId: userPoolId,
        MaxResults: 60,
      }),
    );
    console.log(listIdentityProvidersResponse);
    const providerList = listIdentityProvidersResponse.Providers.map((provider) => provider.ProviderName);
    const providerListInParameters = hostedUIProviderMeta.map((provider) => provider.ProviderName);
    for (const providerMetadata of hostedUIProviderMeta) {
      if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
        await updateIdentityProvider(providerMetadata.ProviderName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId);
      } else {
        await createIdentityProvider(providerMetadata.ProviderName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId);
      }
    }
    for (const provider of providerList) {
      if (providerListInParameters.indexOf(provider) < 0) {
        await deleteIdentityProvider(provider, userPoolId);
      }
    }
  }
}

function getRequestParams(providerName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId) {
  const providerMeta = hostedUIProviderMeta.find((provider) => provider.ProviderName === providerName);
  const providerCreds = hostedUIProviderCreds.find((provider) => provider.ProviderName === providerName);
  let requestParams = {
    ProviderName: providerMeta.ProviderName,
    UserPoolId: userPoolId,
    AttributeMapping: providerMeta.AttributeMapping,
  };
  if (providerMeta.ProviderName === 'SignInWithApple') {
    if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
      requestParams.ProviderDetails = {
        client_id: providerCreds.client_id,
        team_id: providerCreds.team_id,
        key_id: providerCreds.key_id,
        private_key: providerCreds.private_key,
        authorize_scopes: providerMeta.authorize_scopes,
      };
    } else {
      requestParams = null;
    }
  } else {
    if (providerCreds.client_id && providerCreds.client_secret) {
      requestParams.ProviderDetails = {
        client_id: providerCreds.client_id,
        client_secret: providerCreds.client_secret,
        authorize_scopes: providerMeta.authorize_scopes,
      };
    } else {
      requestParams = null;
    }
  }
  return requestParams;
}

async function createIdentityProvider(providerName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId) {
  const requestParams = getRequestParams(providerName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId);
  if (!requestParams) {
    return;
  }
  requestParams.ProviderType = requestParams.ProviderName;
  await identity.send(new CreateIdentityProviderCommand(requestParams));
}

async function updateIdentityProvider(providerName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId) {
  const requestParams = getRequestParams(providerName, hostedUIProviderMeta, hostedUIProviderCreds, userPoolId);
  if (!requestParams) {
    return;
  }
  await identity.send(new UpdateIdentityProviderCommand(requestParams));
}

async function deleteIdentityProvider(providerName, userPoolId) {
  const params = { ProviderName: providerName, UserPoolId: userPoolId };
  await identity.send(new DeleteIdentityProviderCommand(params));
}

 └─ [~] Runtime
     ├─ [-] nodejs16.x
     └─ [+] nodejs18.x

Outputs
[-] Output AppClientSecret: {"Value":{"Fn::GetAtt":["UserPoolClientInputs","appSecret"]},"Condition":"ShouldOutputAppClientSecrets"}

"
`;
