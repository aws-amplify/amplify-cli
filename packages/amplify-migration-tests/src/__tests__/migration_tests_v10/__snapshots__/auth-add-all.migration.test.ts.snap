// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify migration test auth ...should add auth with max options and work on the latest version 1`] = `
"IAM Statement Changes
┌───┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬──────────────────────┬────────────────────────────┬───────────┐
│   │ Resource                                                                                                                                           │ Effect │ Action               │ Principal                  │ Condition │
├───┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼──────────────────────┼────────────────────────────┼───────────┤
│ - │ {\\"Fn::Sub\\":[\\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/\${lambdaName}:log-stream:*\\",{\\"lambdaName\\":\\"\${RoleMapFunction}\\"}]} │ Allow  │ logs:CreateLogGroup  │ AWS:\${LambdaExecutionRole} │           │
│   │                                                                                                                                                    │        │ logs:CreateLogStream │                            │           │
│   │                                                                                                                                                    │        │ logs:PutLogEvents    │                            │           │
└───┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴──────────────────────┴────────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Resources
[-] AWS::IAM::Role LambdaExecutionRole destroy
[-] AWS::Lambda::Function RoleMapFunction destroy
[-] AWS::IAM::Policy LambdaCloudWatchPolicy destroy
[-] Custom::LambdaCallout RoleMapFunctionInput destroy

IAM Statement Changes
┌───┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬────────────────────────────────────┬───────────────────────────┬───────────┐
│   │ Resource                                                                                                                                                                                      │ Effect │ Action                             │ Principal                 │ Condition │
├───┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ \${UserPool.Arn}                                                                                                                                                                               │ Allow  │ cognito-idp:CreateUserPoolDomain   │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                               │        │ cognito-idp:DeleteUserPoolDomain   │                           │           │
│   │                                                                                                                                                                                               │        │ cognito-idp:DescribeUserPool       │                           │           │
├───┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ *                                                                                                                                                                                             │ Allow  │ cognito-idp:DescribeUserPoolDomain │ AWS:\${UserPoolClientRole} │           │
├───┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {\\"Fn::Sub\\":[\\"arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*\\",{\\"region\\":\\"\${AWS::Region}\\",\\"account\\":\\"\${AWS::AccountId}\\",\\"lambda\\":\\"\${HostedUICustomResource}\\"}]} │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                               │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                               │        │ logs:PutLogEvents                  │                           │           │
└───┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴────────────────────────────────────┴───────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Parameters
[-] Parameter facebookAppId: {\\"Type\\":\\"String\\"}
[-] Parameter googleClientId: {\\"Type\\":\\"String\\"}
[-] Parameter amazonAppId: {\\"Type\\":\\"String\\"}
[-] Parameter appleAppId: {\\"Type\\":\\"String\\"}
[~] Parameter hostedUIProviderCreds: {\\"Type\\":\\"String\\"} to {\\"Type\\":\\"String\\",\\"NoEcho\\":true}

Resources
[-] AWS::Lambda::Function HostedUICustomResource destroy
[-] AWS::IAM::Policy HostedUICustomResourcePolicy destroy
[-] AWS::IAM::Policy HostedUICustomResourceLogPolicy destroy
[-] Custom::LambdaCallout HostedUICustomResourceInputs destroy
[+] AWS::Cognito::UserPoolDomain HostedUIDomainResource 
[~] AWS::Lambda::Function UserPoolClientLambda 
 ├─ [~] Code
 │   └─ [~] .ZipFile:
 │       ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  if (event.RequestType == 'Delete') {
    response.send(event, context, response.SUCCESS, {});
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    const params = {
      ClientId: event.ResourceProperties.clientId,
      UserPoolId: event.ResourceProperties.userpoolId,
    };
    identity
      .describeUserPoolClient(params)
      .promise()
      .then(res => {
        response.send(event, context, response.SUCCESS, { appSecret: res.UserPoolClient.ClientSecret });
      })
      .catch(err => {
        response.send(event, context, response.FAILED, { err });
      });
  }
};

 │       └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  if (event.RequestType == 'Delete') {
    response.send(event, context, response.SUCCESS, {});
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    const params = {
      ClientId: event.ResourceProperties.clientId,
      UserPoolId: event.ResourceProperties.userpoolId,
    };
    identity
      .describeUserPoolClient(params)
      .promise()
      .then((res) => {
        response.send(event, context, response.SUCCESS, { appSecret: res.UserPoolClient.ClientSecret });
      })
      .catch((err) => {
        response.send(event, context, response.FAILED, { err });
      });
  }
};

 └─ [~] Runtime
     ├─ [-] nodejs14.x
     └─ [+] nodejs16.x
[~] AWS::Lambda::Function HostedUIProvidersCustomResource 
 ├─ [~] Code
 │   └─ [~] .ZipFile:
 │       ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    if (hostedUIProviderCreds.length === 0) {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let getRequestParams = providerName => {
        let providerMetaIndex = hostedUIProviderMeta.findIndex(provider => provider.ProviderName === providerName);
        let providerMeta = hostedUIProviderMeta[providerMetaIndex];
        let providerCredsIndex = hostedUIProviderCreds.findIndex(provider => provider.ProviderName === providerName);
        let providerCreds = hostedUIProviderCreds[providerCredsIndex];
        let requestParams = {
          ProviderName: providerMeta.ProviderName,
          UserPoolId: userPoolId,
          AttributeMapping: providerMeta.AttributeMapping,
        };
        if (providerMeta.ProviderName === 'SignInWithApple') {
          if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              team_id: providerCreds.team_id,
              key_id: providerCreds.key_id,
              private_key: providerCreds.private_key,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        } else {
          if (providerCreds.client_id && providerCreds.client_secret) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              client_secret: providerCreds.client_secret,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        }
        return requestParams;
      };
      let createIdentityProvider = providerName => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        requestParams.ProviderType = requestParams.ProviderName;
        return identity.createIdentityProvider(requestParams).promise();
      };
      let updateIdentityProvider = providerName => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        return identity.updateIdentityProvider(requestParams).promise();
      };
      let deleteIdentityProvider = providerName => {
        let params = { ProviderName: providerName, UserPoolId: userPoolId };
        return identity.deleteIdentityProvider(params).promise();
      };
      let providerPromises = [];
      identity
        .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })
        .promise()
        .then(result => {
          console.log(result);
          let providerList = result.Providers.map(provider => provider.ProviderName);
          let providerListInParameters = hostedUIProviderMeta.map(provider => provider.ProviderName);
          hostedUIProviderMeta.forEach(providerMetadata => {
            if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
              providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));
            } else {
              providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));
            }
          });
          providerList.forEach(provider => {
            if (providerListInParameters.indexOf(provider) < 0) {
              providerPromises.push(deleteIdentityProvider(provider));
            }
          });
          return Promise.all(providerPromises);
        })
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch(err => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

 │       └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    if (hostedUIProviderCreds.length === 0) {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let getRequestParams = (providerName) => {
        let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);
        let providerMeta = hostedUIProviderMeta[providerMetaIndex];
        let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);
        let providerCreds = hostedUIProviderCreds[providerCredsIndex];
        let requestParams = {
          ProviderName: providerMeta.ProviderName,
          UserPoolId: userPoolId,
          AttributeMapping: providerMeta.AttributeMapping,
        };
        if (providerMeta.ProviderName === 'SignInWithApple') {
          if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              team_id: providerCreds.team_id,
              key_id: providerCreds.key_id,
              private_key: providerCreds.private_key,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        } else {
          if (providerCreds.client_id && providerCreds.client_secret) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              client_secret: providerCreds.client_secret,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        }
        return requestParams;
      };
      let createIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        requestParams.ProviderType = requestParams.ProviderName;
        return identity.createIdentityProvider(requestParams).promise();
      };
      let updateIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        return identity.updateIdentityProvider(requestParams).promise();
      };
      let deleteIdentityProvider = (providerName) => {
        let params = { ProviderName: providerName, UserPoolId: userPoolId };
        return identity.deleteIdentityProvider(params).promise();
      };
      let providerPromises = [];
      identity
        .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })
        .promise()
        .then((result) => {
          console.log(result);
          let providerList = result.Providers.map((provider) => provider.ProviderName);
          let providerListInParameters = hostedUIProviderMeta.map((provider) => provider.ProviderName);
          hostedUIProviderMeta.forEach((providerMetadata) => {
            if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
              providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));
            } else {
              providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));
            }
          });
          providerList.forEach((provider) => {
            if (providerListInParameters.indexOf(provider) < 0) {
              providerPromises.push(deleteIdentityProvider(provider));
            }
          });
          return Promise.all(providerPromises);
        })
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch((err) => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

 └─ [~] Runtime
     ├─ [-] nodejs14.x
     └─ [+] nodejs16.x
[~] AWS::Lambda::Function OAuthCustomResource 
 ├─ [~] Code
 │   └─ [~] .ZipFile:
 │       ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let webClientId = event.ResourceProperties.webClientId;
    let nativeClientId = event.ResourceProperties.nativeClientId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let oAuthMetadata = JSON.parse(event.ResourceProperties.oAuthMetadata);
    let providerList = hostedUIProviderMeta.map(provider => provider.ProviderName);
    providerList.push('COGNITO');
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let params = {
        UserPoolId: userPoolId,
        AllowedOAuthFlows: oAuthMetadata.AllowedOAuthFlows,
        AllowedOAuthFlowsUserPoolClient: true,
        AllowedOAuthScopes: oAuthMetadata.AllowedOAuthScopes,
        CallbackURLs: oAuthMetadata.CallbackURLs,
        LogoutURLs: oAuthMetadata.LogoutURLs,
        SupportedIdentityProviders: providerList,
      };
      console.log(params);
      let updateUserPoolClientPromises = [];
      params.ClientId = webClientId;
      updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());
      params.ClientId = nativeClientId;
      updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());
      Promise.all(updateUserPoolClientPromises)
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch(err => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

 │       └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let webClientId = event.ResourceProperties.webClientId;
    let nativeClientId = event.ResourceProperties.nativeClientId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let oAuthMetadata = JSON.parse(event.ResourceProperties.oAuthMetadata);
    let providerList = hostedUIProviderMeta.map((provider) => provider.ProviderName);
    providerList.push('COGNITO');
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let params = {
        UserPoolId: userPoolId,
        AllowedOAuthFlows: oAuthMetadata.AllowedOAuthFlows,
        AllowedOAuthFlowsUserPoolClient: true,
        AllowedOAuthScopes: oAuthMetadata.AllowedOAuthScopes,
        CallbackURLs: oAuthMetadata.CallbackURLs,
        LogoutURLs: oAuthMetadata.LogoutURLs,
        SupportedIdentityProviders: providerList,
      };
      console.log(params);
      let updateUserPoolClientPromises = [];
      params.ClientId = webClientId;
      updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());
      params.ClientId = nativeClientId;
      updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());
      Promise.all(updateUserPoolClientPromises)
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch((err) => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

 └─ [~] Runtime
     ├─ [-] nodejs14.x
     └─ [+] nodejs16.x
[~] AWS::Cognito::IdentityPoolRoleAttachment IdentityPoolRoleMap 
 ├─ [+] RoleMappings
 │   └─ {\\"UserPoolClientRoleMapping\\":{\\"AmbiguousRoleResolution\\":\\"AuthenticatedRole\\",\\"IdentityProvider\\":{\\"Fn::Sub\\":[\\"cognito-idp.\${region}.amazonaws.com/\${userPool}:\${client}\\",{\\"region\\":{\\"Ref\\":\\"AWS::Region\\"},\\"userPool\\":{\\"Ref\\":\\"UserPool\\"},\\"client\\":{\\"Ref\\":\\"UserPoolClient\\"}}]},\\"Type\\":\\"Token\\"},\\"UserPoolWebClientRoleMapping\\":{\\"AmbiguousRoleResolution\\":\\"AuthenticatedRole\\",\\"IdentityProvider\\":{\\"Fn::Sub\\":[\\"cognito-idp.\${region}.amazonaws.com/\${userPool}:\${webClient}\\",{\\"region\\":{\\"Ref\\":\\"AWS::Region\\"},\\"userPool\\":{\\"Ref\\":\\"UserPool\\"},\\"webClient\\":{\\"Ref\\":\\"UserPoolClientWeb\\"}}]},\\"Type\\":\\"Token\\"}}
 └─ [~] DependsOn
     └─ @@ -1,3 +1,5 @@
        [ ] [
        [-]   \\"IdentityPool\\"
        [+]   \\"IdentityPool\\",
        [+]   \\"UserPoolClient\\",
        [+]   \\"UserPoolClientWeb\\"
        [ ] ]

Outputs
[-] Output GoogleWebClient: {\\"Value\\":{\\"Ref\\":\\"googleClientId\\"}}
[-] Output FacebookWebClient: {\\"Value\\":{\\"Ref\\":\\"facebookAppId\\"}}
[-] Output AmazonWebClient: {\\"Value\\":{\\"Ref\\":\\"amazonAppId\\"}}
[-] Output AppleWebClient: {\\"Value\\":{\\"Ref\\":\\"appleAppId\\"}}

"
`;
