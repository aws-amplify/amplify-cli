// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`many to many query 1`] = `
Object {
  "definitions": Array [
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 22,
            "start": 15,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 17,
              "start": 15,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 22,
              "start": 19,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 21,
                "start": 19,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 21,
                  "start": 19,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 39,
            "start": 25,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 30,
              "start": 25,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 39,
              "start": 32,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 38,
                "start": 32,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 38,
                  "start": 32,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 84,
                "start": 50,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 58,
                  "start": 50,
                },
                "value": "editorID",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 84,
                  "start": 60,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 84,
                    "start": 60,
                  },
                  "value": "ModelIDKeyConditionInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 120,
                "start": 86,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 92,
                  "start": 86,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 120,
                  "start": 94,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 120,
                    "start": 94,
                  },
                  "value": "ModelPostEditorFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 155,
                "start": 122,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 135,
                  "start": 122,
                },
                "value": "sortDirection",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 155,
                  "start": 137,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 155,
                    "start": 137,
                  },
                  "value": "ModelSortDirection",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 167,
                "start": 157,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 162,
                  "start": 157,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 167,
                  "start": 164,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 167,
                    "start": 164,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 186,
                "start": 169,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 178,
                  "start": 169,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 186,
                  "start": 180,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 186,
                    "start": 180,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 214,
            "start": 42,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 49,
              "start": 42,
            },
            "value": "editors",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 214,
              "start": 189,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 214,
                "start": 189,
              },
              "value": "ModelPostEditorConnection",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 240,
            "start": 217,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 226,
              "start": 217,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 240,
              "start": 228,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 239,
                "start": 228,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 239,
                  "start": 228,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 266,
            "start": 243,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 252,
              "start": 243,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 266,
              "start": 254,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 265,
                "start": 254,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 265,
                  "start": 254,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 268,
        "start": 1,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 10,
          "start": 6,
        },
        "value": "Post",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 297,
            "start": 290,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 292,
              "start": 290,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 297,
              "start": 294,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 296,
                "start": 294,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 296,
                  "start": 294,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 311,
            "start": 300,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 306,
              "start": 300,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 311,
              "start": 308,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 310,
                "start": 308,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 310,
                  "start": 308,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 327,
            "start": 314,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 322,
              "start": 314,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 327,
              "start": 324,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 326,
                "start": 324,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 326,
                  "start": 324,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 341,
            "start": 330,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 334,
              "start": 330,
            },
            "value": "post",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 341,
              "start": 336,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 340,
                "start": 336,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 340,
                  "start": 336,
                },
                "value": "Post",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 357,
            "start": 344,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 350,
              "start": 344,
            },
            "value": "editor",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 357,
              "start": 352,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 356,
                "start": 352,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 356,
                  "start": 352,
                },
                "value": "User",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 383,
            "start": 360,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 369,
              "start": 360,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 383,
              "start": 371,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 382,
                "start": 371,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 382,
                  "start": 371,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 409,
            "start": 386,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 395,
              "start": 386,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 409,
              "start": 397,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 408,
                "start": 397,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 408,
                  "start": 397,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 411,
        "start": 270,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 285,
          "start": 275,
        },
        "value": "PostEditor",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 434,
            "start": 427,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 429,
              "start": 427,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 434,
              "start": 431,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 433,
                "start": 431,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 433,
                  "start": 431,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 454,
            "start": 437,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 445,
              "start": 437,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 454,
              "start": 447,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 453,
                "start": 447,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 453,
                  "start": 447,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 495,
                "start": 463,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 469,
                  "start": 463,
                },
                "value": "postID",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 495,
                  "start": 471,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 495,
                    "start": 471,
                  },
                  "value": "ModelIDKeyConditionInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 531,
                "start": 497,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 503,
                  "start": 497,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 531,
                  "start": 505,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 531,
                    "start": 505,
                  },
                  "value": "ModelPostEditorFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 566,
                "start": 533,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 546,
                  "start": 533,
                },
                "value": "sortDirection",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 566,
                  "start": 548,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 566,
                    "start": 548,
                  },
                  "value": "ModelSortDirection",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 578,
                "start": 568,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 573,
                  "start": 568,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 578,
                  "start": 575,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 578,
                    "start": 575,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 597,
                "start": 580,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 589,
                  "start": 580,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 597,
                  "start": 591,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 597,
                    "start": 591,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 625,
            "start": 457,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 462,
              "start": 457,
            },
            "value": "posts",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 625,
              "start": 600,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 625,
                "start": 600,
              },
              "value": "ModelPostEditorConnection",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 651,
            "start": 628,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 637,
              "start": 628,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 651,
              "start": 639,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 650,
                "start": 639,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 650,
                  "start": 639,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 677,
            "start": 654,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 663,
              "start": 654,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 677,
              "start": 665,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 676,
                "start": 665,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 676,
                  "start": 665,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 679,
        "start": 413,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 422,
          "start": 418,
        },
        "value": "User",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 724,
            "start": 714,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 716,
              "start": 714,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 724,
              "start": 718,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 724,
                "start": 718,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 737,
            "start": 727,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 729,
              "start": 727,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 737,
              "start": 731,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 737,
                "start": 731,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 750,
            "start": 740,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 742,
              "start": 740,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 750,
              "start": 744,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 750,
                "start": 744,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 763,
            "start": 753,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 755,
              "start": 753,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 763,
              "start": 757,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 763,
                "start": 757,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 776,
            "start": 766,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 768,
              "start": 766,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 776,
              "start": 770,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 776,
                "start": 770,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 789,
            "start": 779,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 781,
              "start": 779,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 789,
              "start": 783,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 789,
                "start": 783,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 808,
            "start": 792,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 800,
              "start": 792,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 808,
              "start": 802,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 808,
                "start": 802,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 830,
            "start": 811,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 822,
              "start": 811,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 830,
              "start": 824,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 830,
                "start": 824,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 850,
            "start": 833,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 840,
              "start": 833,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 850,
              "start": 842,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 849,
                "start": 843,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 849,
                  "start": 843,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 871,
            "start": 853,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 863,
              "start": 853,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 871,
              "start": 865,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 871,
                "start": 865,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 898,
            "start": 874,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 889,
              "start": 874,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 898,
              "start": 891,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 898,
                "start": 891,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 935,
            "start": 901,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 914,
              "start": 901,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 935,
              "start": 916,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 935,
                "start": 916,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 958,
            "start": 938,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 942,
              "start": 938,
            },
            "value": "size",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 958,
              "start": 944,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 958,
                "start": 944,
              },
              "value": "ModelSizeInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 960,
        "start": 681,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 709,
          "start": 687,
        },
        "value": "ModelStringFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 999,
            "start": 992,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 994,
              "start": 992,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 999,
              "start": 996,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 999,
                "start": 996,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1009,
            "start": 1002,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1004,
              "start": 1002,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1009,
              "start": 1006,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1009,
                "start": 1006,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1019,
            "start": 1012,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1014,
              "start": 1012,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1019,
              "start": 1016,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1019,
                "start": 1016,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1029,
            "start": 1022,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1024,
              "start": 1022,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1029,
              "start": 1026,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1029,
                "start": 1026,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1039,
            "start": 1032,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1034,
              "start": 1032,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1039,
              "start": 1036,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1039,
                "start": 1036,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1049,
            "start": 1042,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1044,
              "start": 1042,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1049,
              "start": 1046,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1049,
                "start": 1046,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1066,
            "start": 1052,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1059,
              "start": 1052,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1066,
              "start": 1061,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1065,
                "start": 1062,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1065,
                  "start": 1062,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1093,
            "start": 1069,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1084,
              "start": 1069,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1093,
              "start": 1086,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1093,
                "start": 1086,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1130,
            "start": 1096,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1109,
              "start": 1096,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1130,
              "start": 1111,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1130,
                "start": 1111,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1132,
        "start": 962,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 987,
          "start": 968,
        },
        "value": "ModelIntFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1175,
            "start": 1166,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1168,
              "start": 1166,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1175,
              "start": 1170,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1175,
                "start": 1170,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1187,
            "start": 1178,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1180,
              "start": 1178,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1187,
              "start": 1182,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1187,
                "start": 1182,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1199,
            "start": 1190,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1192,
              "start": 1190,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1199,
              "start": 1194,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1199,
                "start": 1194,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1211,
            "start": 1202,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1204,
              "start": 1202,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1211,
              "start": 1206,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1211,
                "start": 1206,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1223,
            "start": 1214,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1216,
              "start": 1214,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1223,
              "start": 1218,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1223,
                "start": 1218,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1235,
            "start": 1226,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1228,
              "start": 1226,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1235,
              "start": 1230,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1235,
                "start": 1230,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1254,
            "start": 1238,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1245,
              "start": 1238,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1254,
              "start": 1247,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1253,
                "start": 1248,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1253,
                  "start": 1248,
                },
                "value": "Float",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1281,
            "start": 1257,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1272,
              "start": 1257,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1281,
              "start": 1274,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1281,
                "start": 1274,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1318,
            "start": 1284,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1297,
              "start": 1284,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1318,
              "start": 1299,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1318,
                "start": 1299,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1320,
        "start": 1134,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1161,
          "start": 1140,
        },
        "value": "ModelFloatFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1367,
            "start": 1356,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1358,
              "start": 1356,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1367,
              "start": 1360,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1367,
                "start": 1360,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1381,
            "start": 1370,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1372,
              "start": 1370,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1381,
              "start": 1374,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1381,
                "start": 1374,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1408,
            "start": 1384,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1399,
              "start": 1384,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1408,
              "start": 1401,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1408,
                "start": 1401,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1445,
            "start": 1411,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1424,
              "start": 1411,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1445,
              "start": 1426,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1445,
                "start": 1426,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1447,
        "start": 1322,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1351,
          "start": 1328,
        },
        "value": "ModelBooleanFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1484,
            "start": 1478,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1480,
              "start": 1478,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1484,
              "start": 1482,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1484,
                "start": 1482,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1493,
            "start": 1487,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1489,
              "start": 1487,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1493,
              "start": 1491,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1493,
                "start": 1491,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1502,
            "start": 1496,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1498,
              "start": 1496,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1502,
              "start": 1500,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1502,
                "start": 1500,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1511,
            "start": 1505,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1507,
              "start": 1505,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1511,
              "start": 1509,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1511,
                "start": 1509,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1520,
            "start": 1514,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1516,
              "start": 1514,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1520,
              "start": 1518,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1520,
                "start": 1518,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1529,
            "start": 1523,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1525,
              "start": 1523,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1529,
              "start": 1527,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1529,
                "start": 1527,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1544,
            "start": 1532,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1540,
              "start": 1532,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1544,
              "start": 1542,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1544,
                "start": 1542,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1562,
            "start": 1547,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1558,
              "start": 1547,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1562,
              "start": 1560,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1562,
                "start": 1560,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1578,
            "start": 1565,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1572,
              "start": 1565,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1578,
              "start": 1574,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1577,
                "start": 1575,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1577,
                  "start": 1575,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1595,
            "start": 1581,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1591,
              "start": 1581,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1595,
              "start": 1593,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1595,
                "start": 1593,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1622,
            "start": 1598,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1613,
              "start": 1598,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1622,
              "start": 1615,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1622,
                "start": 1615,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1659,
            "start": 1625,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1638,
              "start": 1625,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1659,
              "start": 1640,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1659,
                "start": 1640,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1682,
            "start": 1662,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1666,
              "start": 1662,
            },
            "value": "size",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1682,
              "start": 1668,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1682,
                "start": 1668,
              },
              "value": "ModelSizeInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1684,
        "start": 1449,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1473,
          "start": 1455,
        },
        "value": "ModelIDFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "kind": "EnumTypeDefinition",
      "loc": Object {
        "end": 1805,
        "start": 1686,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1710,
          "start": 1691,
        },
        "value": "ModelAttributeTypes",
      },
      "values": Array [
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 1721,
            "start": 1715,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1721,
              "start": 1715,
            },
            "value": "binary",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 1733,
            "start": 1724,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1733,
              "start": 1724,
            },
            "value": "binarySet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 1740,
            "start": 1736,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1740,
              "start": 1736,
            },
            "value": "bool",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 1747,
            "start": 1743,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1747,
              "start": 1743,
            },
            "value": "list",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 1753,
            "start": 1750,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1753,
              "start": 1750,
            },
            "value": "map",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 1762,
            "start": 1756,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1762,
              "start": 1756,
            },
            "value": "number",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 1774,
            "start": 1765,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1774,
              "start": 1765,
            },
            "value": "numberSet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 1783,
            "start": 1777,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1783,
              "start": 1777,
            },
            "value": "string",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 1795,
            "start": 1786,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1795,
              "start": 1786,
            },
            "value": "stringSet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 1803,
            "start": 1798,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1803,
              "start": 1798,
            },
            "value": "_null",
          },
        },
      ],
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1839,
            "start": 1832,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1834,
              "start": 1832,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1839,
              "start": 1836,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1839,
                "start": 1836,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1849,
            "start": 1842,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1844,
              "start": 1842,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1849,
              "start": 1846,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1849,
                "start": 1846,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1859,
            "start": 1852,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1854,
              "start": 1852,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1859,
              "start": 1856,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1859,
                "start": 1856,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1869,
            "start": 1862,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1864,
              "start": 1862,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1869,
              "start": 1866,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1869,
                "start": 1866,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1879,
            "start": 1872,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1874,
              "start": 1872,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1879,
              "start": 1876,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1879,
                "start": 1876,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1889,
            "start": 1882,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1884,
              "start": 1882,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1889,
              "start": 1886,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1889,
                "start": 1886,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1906,
            "start": 1892,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1899,
              "start": 1892,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1906,
              "start": 1901,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1905,
                "start": 1902,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1905,
                  "start": 1902,
                },
                "value": "Int",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1908,
        "start": 1807,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1827,
          "start": 1813,
        },
        "value": "ModelSizeInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 1940,
                "start": 1933,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1935,
                  "start": 1933,
                },
                "value": "id",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 1940,
                  "start": 1937,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 1939,
                    "start": 1937,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 1939,
                      "start": 1937,
                    },
                    "value": "ID",
                  },
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 1947,
            "start": 1925,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1932,
              "start": 1925,
            },
            "value": "getPost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1947,
              "start": 1943,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1947,
                "start": 1943,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 1988,
                "start": 1960,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1966,
                  "start": 1960,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 1988,
                  "start": 1968,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 1988,
                    "start": 1968,
                  },
                  "value": "ModelPostFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2000,
                "start": 1990,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1995,
                  "start": 1990,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2000,
                  "start": 1997,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2000,
                    "start": 1997,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2019,
                "start": 2002,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2011,
                  "start": 2002,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2019,
                  "start": 2013,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2019,
                    "start": 2013,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2041,
            "start": 1950,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1959,
              "start": 1950,
            },
            "value": "listPosts",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2041,
              "start": 2022,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2041,
                "start": 2022,
              },
              "value": "ModelPostConnection",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2059,
                "start": 2052,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2054,
                  "start": 2052,
                },
                "value": "id",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 2059,
                  "start": 2056,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 2058,
                    "start": 2056,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 2058,
                      "start": 2056,
                    },
                    "value": "ID",
                  },
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2066,
            "start": 2044,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2051,
              "start": 2044,
            },
            "value": "getUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2066,
              "start": 2062,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2066,
                "start": 2062,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2107,
                "start": 2079,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2085,
                  "start": 2079,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2107,
                  "start": 2087,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2107,
                    "start": 2087,
                  },
                  "value": "ModelUserFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2119,
                "start": 2109,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2114,
                  "start": 2109,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2119,
                  "start": 2116,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2119,
                    "start": 2116,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2138,
                "start": 2121,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2130,
                  "start": 2121,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2138,
                  "start": 2132,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2138,
                    "start": 2132,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2160,
            "start": 2069,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2078,
              "start": 2069,
            },
            "value": "listUsers",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2160,
              "start": 2141,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2160,
                "start": 2141,
              },
              "value": "ModelUserConnection",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 2162,
        "start": 1910,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1920,
          "start": 1915,
        },
        "value": "Query",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2206,
            "start": 2193,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2198,
              "start": 2193,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2206,
              "start": 2200,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2205,
                "start": 2201,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2205,
                  "start": 2201,
                },
                "value": "Post",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2226,
            "start": 2209,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2218,
              "start": 2209,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2226,
              "start": 2220,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2226,
                "start": 2220,
              },
              "value": "String",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 2228,
        "start": 2164,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2188,
          "start": 2169,
        },
        "value": "ModelPostConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2283,
            "start": 2261,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2263,
              "start": 2261,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2283,
              "start": 2265,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2283,
                "start": 2265,
              },
              "value": "ModelIDFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2315,
            "start": 2286,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2291,
              "start": 2286,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2315,
              "start": 2293,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2315,
                "start": 2293,
              },
              "value": "ModelStringFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2345,
            "start": 2318,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2321,
              "start": 2318,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2345,
              "start": 2323,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2344,
                "start": 2324,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2344,
                  "start": 2324,
                },
                "value": "ModelPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2374,
            "start": 2348,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2350,
              "start": 2348,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2374,
              "start": 2352,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2373,
                "start": 2353,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2373,
                  "start": 2353,
                },
                "value": "ModelPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2402,
            "start": 2377,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2380,
              "start": 2377,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2402,
              "start": 2382,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2402,
                "start": 2382,
              },
              "value": "ModelPostFilterInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2404,
        "start": 2230,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2256,
          "start": 2236,
        },
        "value": "ModelPostFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2462,
            "start": 2440,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2442,
              "start": 2440,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2462,
              "start": 2444,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2462,
                "start": 2444,
              },
              "value": "ModelIDFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2494,
            "start": 2465,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2470,
              "start": 2465,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2494,
              "start": 2472,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2494,
                "start": 2472,
              },
              "value": "ModelStringFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2527,
            "start": 2497,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2500,
              "start": 2497,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2527,
              "start": 2502,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2526,
                "start": 2503,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2526,
                  "start": 2503,
                },
                "value": "ModelPostConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2559,
            "start": 2530,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2532,
              "start": 2530,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2559,
              "start": 2534,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2558,
                "start": 2535,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2558,
                  "start": 2535,
                },
                "value": "ModelPostConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2590,
            "start": 2562,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2565,
              "start": 2562,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2590,
              "start": 2567,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2590,
                "start": 2567,
              },
              "value": "ModelPostConditionInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2592,
        "start": 2406,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2435,
          "start": 2412,
        },
        "value": "ModelPostConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2626,
            "start": 2620,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2622,
              "start": 2620,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2626,
              "start": 2624,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2626,
                "start": 2624,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2643,
            "start": 2629,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2634,
              "start": 2629,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 2643,
              "start": 2636,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2642,
                "start": 2636,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2642,
                  "start": 2636,
                },
                "value": "String",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2645,
        "start": 2594,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2615,
          "start": 2600,
        },
        "value": "CreatePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2699,
                "start": 2676,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2681,
                  "start": 2676,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 2699,
                  "start": 2683,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 2698,
                    "start": 2683,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 2698,
                      "start": 2683,
                    },
                    "value": "CreatePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2735,
                "start": 2701,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2710,
                  "start": 2701,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2735,
                  "start": 2712,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2735,
                    "start": 2712,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2742,
            "start": 2665,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2675,
              "start": 2665,
            },
            "value": "createPost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2742,
              "start": 2738,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2742,
                "start": 2738,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2779,
                "start": 2756,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2761,
                  "start": 2756,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 2779,
                  "start": 2763,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 2778,
                    "start": 2763,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 2778,
                      "start": 2763,
                    },
                    "value": "UpdatePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2815,
                "start": 2781,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2790,
                  "start": 2781,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2815,
                  "start": 2792,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2815,
                    "start": 2792,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2822,
            "start": 2745,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2755,
              "start": 2745,
            },
            "value": "updatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2822,
              "start": 2818,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2822,
                "start": 2818,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2859,
                "start": 2836,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2841,
                  "start": 2836,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 2859,
                  "start": 2843,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 2858,
                    "start": 2843,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 2858,
                      "start": 2843,
                    },
                    "value": "DeletePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2895,
                "start": 2861,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2870,
                  "start": 2861,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2895,
                  "start": 2872,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2895,
                    "start": 2872,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2902,
            "start": 2825,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2835,
              "start": 2825,
            },
            "value": "deletePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2902,
              "start": 2898,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2902,
                "start": 2898,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2951,
                "start": 2922,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2927,
                  "start": 2922,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 2951,
                  "start": 2929,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 2950,
                    "start": 2929,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 2950,
                      "start": 2929,
                    },
                    "value": "CreatePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2993,
                "start": 2953,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2962,
                  "start": 2953,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2993,
                  "start": 2964,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2993,
                    "start": 2964,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3006,
            "start": 2905,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2921,
              "start": 2905,
            },
            "value": "createPostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3006,
              "start": 2996,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3006,
                "start": 2996,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3055,
                "start": 3026,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3031,
                  "start": 3026,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3055,
                  "start": 3033,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3054,
                    "start": 3033,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3054,
                      "start": 3033,
                    },
                    "value": "UpdatePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3097,
                "start": 3057,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3066,
                  "start": 3057,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3097,
                  "start": 3068,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3097,
                    "start": 3068,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3110,
            "start": 3009,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3025,
              "start": 3009,
            },
            "value": "updatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3110,
              "start": 3100,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3110,
                "start": 3100,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3159,
                "start": 3130,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3135,
                  "start": 3130,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3159,
                  "start": 3137,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3158,
                    "start": 3137,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3158,
                      "start": 3137,
                    },
                    "value": "DeletePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3201,
                "start": 3161,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3170,
                  "start": 3161,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3201,
                  "start": 3172,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3201,
                    "start": 3172,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3214,
            "start": 3113,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3129,
              "start": 3113,
            },
            "value": "deletePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3214,
              "start": 3204,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3214,
                "start": 3204,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3251,
                "start": 3228,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3233,
                  "start": 3228,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3251,
                  "start": 3235,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3250,
                    "start": 3235,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3250,
                      "start": 3235,
                    },
                    "value": "CreateUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3287,
                "start": 3253,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3262,
                  "start": 3253,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3287,
                  "start": 3264,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3287,
                    "start": 3264,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3294,
            "start": 3217,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3227,
              "start": 3217,
            },
            "value": "createUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3294,
              "start": 3290,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3294,
                "start": 3290,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3331,
                "start": 3308,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3313,
                  "start": 3308,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3331,
                  "start": 3315,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3330,
                    "start": 3315,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3330,
                      "start": 3315,
                    },
                    "value": "UpdateUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3367,
                "start": 3333,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3342,
                  "start": 3333,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3367,
                  "start": 3344,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3367,
                    "start": 3344,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3374,
            "start": 3297,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3307,
              "start": 3297,
            },
            "value": "updateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3374,
              "start": 3370,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3374,
                "start": 3370,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3411,
                "start": 3388,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3393,
                  "start": 3388,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3411,
                  "start": 3395,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3410,
                    "start": 3395,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3410,
                      "start": 3395,
                    },
                    "value": "DeleteUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3447,
                "start": 3413,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3422,
                  "start": 3413,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3447,
                  "start": 3424,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3447,
                    "start": 3424,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3454,
            "start": 3377,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3387,
              "start": 3377,
            },
            "value": "deleteUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3454,
              "start": 3450,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3454,
                "start": 3450,
              },
              "value": "User",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 3456,
        "start": 2647,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2660,
          "start": 2652,
        },
        "value": "Mutation",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3491,
            "start": 3484,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3486,
              "start": 3484,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 3491,
              "start": 3488,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3490,
                "start": 3488,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3490,
                  "start": 3488,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3507,
            "start": 3494,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3499,
              "start": 3494,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3507,
              "start": 3501,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3507,
                "start": 3501,
              },
              "value": "String",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 3509,
        "start": 3458,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3479,
          "start": 3464,
        },
        "value": "UpdatePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3544,
            "start": 3537,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3539,
              "start": 3537,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 3544,
              "start": 3541,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3543,
                "start": 3541,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3543,
                  "start": 3541,
                },
                "value": "ID",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 3546,
        "start": 3511,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3532,
          "start": 3517,
        },
        "value": "DeletePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 3629,
                    "start": 3604,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3613,
                      "start": 3604,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 3629,
                      "start": 3615,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 3628,
                          "start": 3616,
                        },
                        "value": "createPost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 3630,
                "start": 3589,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3603,
                  "start": 3590,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3630,
            "start": 3570,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3582,
              "start": 3570,
            },
            "value": "onCreatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3588,
              "start": 3584,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3588,
                "start": 3584,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 3692,
                    "start": 3667,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3676,
                      "start": 3667,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 3692,
                      "start": 3678,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 3691,
                          "start": 3679,
                        },
                        "value": "updatePost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 3693,
                "start": 3652,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3666,
                  "start": 3653,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3693,
            "start": 3633,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3645,
              "start": 3633,
            },
            "value": "onUpdatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3651,
              "start": 3647,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3651,
                "start": 3647,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 3755,
                    "start": 3730,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3739,
                      "start": 3730,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 3755,
                      "start": 3741,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 3754,
                          "start": 3742,
                        },
                        "value": "deletePost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 3756,
                "start": 3715,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3729,
                  "start": 3716,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3756,
            "start": 3696,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3708,
              "start": 3696,
            },
            "value": "onDeletePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3714,
              "start": 3710,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3714,
                "start": 3710,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 3836,
                    "start": 3805,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3814,
                      "start": 3805,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 3836,
                      "start": 3816,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 3835,
                          "start": 3817,
                        },
                        "value": "createPostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 3837,
                "start": 3790,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3804,
                  "start": 3791,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3837,
            "start": 3759,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3777,
              "start": 3759,
            },
            "value": "onCreatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3789,
              "start": 3779,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3789,
                "start": 3779,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 3917,
                    "start": 3886,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3895,
                      "start": 3886,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 3917,
                      "start": 3897,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 3916,
                          "start": 3898,
                        },
                        "value": "updatePostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 3918,
                "start": 3871,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3885,
                  "start": 3872,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3918,
            "start": 3840,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3858,
              "start": 3840,
            },
            "value": "onUpdatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3870,
              "start": 3860,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3870,
                "start": 3860,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 3998,
                    "start": 3967,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3976,
                      "start": 3967,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 3998,
                      "start": 3978,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 3997,
                          "start": 3979,
                        },
                        "value": "deletePostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 3999,
                "start": 3952,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3966,
                  "start": 3953,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3999,
            "start": 3921,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3939,
              "start": 3921,
            },
            "value": "onDeletePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3951,
              "start": 3941,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3951,
                "start": 3941,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 4061,
                    "start": 4036,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4045,
                      "start": 4036,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 4061,
                      "start": 4047,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 4060,
                          "start": 4048,
                        },
                        "value": "createUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 4062,
                "start": 4021,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4035,
                  "start": 4022,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4062,
            "start": 4002,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4014,
              "start": 4002,
            },
            "value": "onCreateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4020,
              "start": 4016,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4020,
                "start": 4016,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 4124,
                    "start": 4099,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4108,
                      "start": 4099,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 4124,
                      "start": 4110,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 4123,
                          "start": 4111,
                        },
                        "value": "updateUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 4125,
                "start": 4084,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4098,
                  "start": 4085,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4125,
            "start": 4065,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4077,
              "start": 4065,
            },
            "value": "onUpdateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4083,
              "start": 4079,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4083,
                "start": 4079,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 4187,
                    "start": 4162,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4171,
                      "start": 4162,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 4187,
                      "start": 4173,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 4186,
                          "start": 4174,
                        },
                        "value": "deleteUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 4188,
                "start": 4147,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4161,
                  "start": 4148,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4188,
            "start": 4128,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4140,
              "start": 4128,
            },
            "value": "onDeleteUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4146,
              "start": 4142,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4146,
                "start": 4142,
              },
              "value": "User",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 4190,
        "start": 3548,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3565,
          "start": 3553,
        },
        "value": "Subscription",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4258,
            "start": 4232,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4238,
              "start": 4232,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4258,
              "start": 4240,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4258,
                "start": 4240,
              },
              "value": "ModelIDFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4289,
            "start": 4261,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4269,
              "start": 4261,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4289,
              "start": 4271,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4289,
                "start": 4271,
              },
              "value": "ModelIDFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4328,
            "start": 4292,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4295,
              "start": 4292,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 4328,
              "start": 4297,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4327,
                "start": 4298,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4327,
                  "start": 4298,
                },
                "value": "ModelPostEditorConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4366,
            "start": 4331,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4333,
              "start": 4331,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 4366,
              "start": 4335,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4365,
                "start": 4336,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4365,
                  "start": 4336,
                },
                "value": "ModelPostEditorConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4403,
            "start": 4369,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4372,
              "start": 4369,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4403,
              "start": 4374,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4403,
                "start": 4374,
              },
              "value": "ModelPostEditorConditionInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 4405,
        "start": 4192,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4227,
          "start": 4198,
        },
        "value": "ModelPostEditorConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4445,
            "start": 4439,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4441,
              "start": 4439,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4445,
              "start": 4443,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4445,
                "start": 4443,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4459,
            "start": 4448,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4454,
              "start": 4448,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 4459,
              "start": 4456,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4458,
                "start": 4456,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4458,
                  "start": 4456,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4475,
            "start": 4462,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4470,
              "start": 4462,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 4475,
              "start": 4472,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4474,
                "start": 4472,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4474,
                  "start": 4472,
                },
                "value": "ID",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 4477,
        "start": 4407,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4434,
          "start": 4413,
        },
        "value": "CreatePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4518,
            "start": 4511,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4513,
              "start": 4511,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 4518,
              "start": 4515,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4517,
                "start": 4515,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4517,
                  "start": 4515,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4531,
            "start": 4521,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4527,
              "start": 4521,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4531,
              "start": 4529,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4531,
                "start": 4529,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4546,
            "start": 4534,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4542,
              "start": 4534,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4546,
              "start": 4544,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4546,
                "start": 4544,
              },
              "value": "ID",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 4548,
        "start": 4479,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4506,
          "start": 4485,
        },
        "value": "UpdatePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4589,
            "start": 4582,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4584,
              "start": 4582,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 4589,
              "start": 4586,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4588,
                "start": 4586,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4588,
                  "start": 4586,
                },
                "value": "ID",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 4591,
        "start": 4550,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4577,
          "start": 4556,
        },
        "value": "DeletePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4635,
            "start": 4622,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4627,
              "start": 4622,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 4635,
              "start": 4629,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4634,
                "start": 4630,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4634,
                  "start": 4630,
                },
                "value": "User",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4655,
            "start": 4638,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4647,
              "start": 4638,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4655,
              "start": 4649,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4655,
                "start": 4649,
              },
              "value": "String",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 4657,
        "start": 4593,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4617,
          "start": 4598,
        },
        "value": "ModelUserConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4712,
            "start": 4690,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4692,
              "start": 4690,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4712,
              "start": 4694,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4712,
                "start": 4694,
              },
              "value": "ModelIDFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4747,
            "start": 4715,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4723,
              "start": 4715,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4747,
              "start": 4725,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4747,
                "start": 4725,
              },
              "value": "ModelStringFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4777,
            "start": 4750,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4753,
              "start": 4750,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 4777,
              "start": 4755,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4776,
                "start": 4756,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4776,
                  "start": 4756,
                },
                "value": "ModelUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4806,
            "start": 4780,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4782,
              "start": 4780,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 4806,
              "start": 4784,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4805,
                "start": 4785,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4805,
                  "start": 4785,
                },
                "value": "ModelUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4834,
            "start": 4809,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4812,
              "start": 4809,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4834,
              "start": 4814,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4834,
                "start": 4814,
              },
              "value": "ModelUserFilterInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 4836,
        "start": 4659,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4685,
          "start": 4665,
        },
        "value": "ModelUserFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4894,
            "start": 4872,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4874,
              "start": 4872,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4894,
              "start": 4876,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4894,
                "start": 4876,
              },
              "value": "ModelIDFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4929,
            "start": 4897,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4905,
              "start": 4897,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4929,
              "start": 4907,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4929,
                "start": 4907,
              },
              "value": "ModelStringFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4962,
            "start": 4932,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4935,
              "start": 4932,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 4962,
              "start": 4937,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4961,
                "start": 4938,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4961,
                  "start": 4938,
                },
                "value": "ModelUserConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4994,
            "start": 4965,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4967,
              "start": 4965,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 4994,
              "start": 4969,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4993,
                "start": 4970,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4993,
                  "start": 4970,
                },
                "value": "ModelUserConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5025,
            "start": 4997,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5000,
              "start": 4997,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5025,
              "start": 5002,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5025,
                "start": 5002,
              },
              "value": "ModelUserConditionInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5027,
        "start": 4838,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4867,
          "start": 4844,
        },
        "value": "ModelUserConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5061,
            "start": 5055,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5057,
              "start": 5055,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5061,
              "start": 5059,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5061,
                "start": 5059,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5081,
            "start": 5064,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5072,
              "start": 5064,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 5081,
              "start": 5074,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5080,
                "start": 5074,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5080,
                  "start": 5074,
                },
                "value": "String",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5083,
        "start": 5029,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5050,
          "start": 5035,
        },
        "value": "CreateUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5118,
            "start": 5111,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5113,
              "start": 5111,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 5118,
              "start": 5115,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5117,
                "start": 5115,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5117,
                  "start": 5115,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5137,
            "start": 5121,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5129,
              "start": 5121,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5137,
              "start": 5131,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5137,
                "start": 5131,
              },
              "value": "String",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5139,
        "start": 5085,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5106,
          "start": 5091,
        },
        "value": "UpdateUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5174,
            "start": 5167,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5169,
              "start": 5167,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 5174,
              "start": 5171,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5173,
                "start": 5171,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5173,
                  "start": 5171,
                },
                "value": "ID",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5176,
        "start": 5141,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5162,
          "start": 5147,
        },
        "value": "DeleteUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5219,
            "start": 5213,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5215,
              "start": 5213,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5219,
              "start": 5217,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5219,
                "start": 5217,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5228,
            "start": 5222,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5224,
              "start": 5222,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5228,
              "start": 5226,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5228,
                "start": 5226,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5237,
            "start": 5231,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5233,
              "start": 5231,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5237,
              "start": 5235,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5237,
                "start": 5235,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5246,
            "start": 5240,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5242,
              "start": 5240,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5246,
              "start": 5244,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5246,
                "start": 5244,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5255,
            "start": 5249,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5251,
              "start": 5249,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5255,
              "start": 5253,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5255,
                "start": 5253,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5271,
            "start": 5258,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5265,
              "start": 5258,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 5271,
              "start": 5267,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5270,
                "start": 5268,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5270,
                  "start": 5268,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5288,
            "start": 5274,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5284,
              "start": 5274,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5288,
              "start": 5286,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5288,
                "start": 5286,
              },
              "value": "ID",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5290,
        "start": 5178,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5208,
          "start": 5184,
        },
        "value": "ModelIDKeyConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5361,
            "start": 5327,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5332,
              "start": 5327,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 5361,
              "start": 5334,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5360,
                "start": 5335,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5360,
                  "start": 5335,
                },
                "value": "ModelPostEditorConnection",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5381,
            "start": 5364,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5373,
              "start": 5364,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5381,
              "start": 5375,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5381,
                "start": 5375,
              },
              "value": "String",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 5383,
        "start": 5292,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5322,
          "start": 5297,
        },
        "value": "ModelPostEditorConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "kind": "EnumTypeDefinition",
      "loc": Object {
        "end": 5425,
        "start": 5385,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5408,
          "start": 5390,
        },
        "value": "ModelSortDirection",
      },
      "values": Array [
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 5416,
            "start": 5413,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5416,
              "start": 5413,
            },
            "value": "ASC",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 5423,
            "start": 5419,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5423,
              "start": 5419,
            },
            "value": "DESC",
          },
        },
      ],
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5486,
            "start": 5464,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5466,
              "start": 5464,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5486,
              "start": 5468,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5486,
                "start": 5468,
              },
              "value": "ModelIDFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5515,
            "start": 5489,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5495,
              "start": 5489,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5515,
              "start": 5497,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5515,
                "start": 5497,
              },
              "value": "ModelIDFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5546,
            "start": 5518,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5526,
              "start": 5518,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5546,
              "start": 5528,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5546,
                "start": 5528,
              },
              "value": "ModelIDFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5582,
            "start": 5549,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5552,
              "start": 5549,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 5582,
              "start": 5554,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5581,
                "start": 5555,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5581,
                  "start": 5555,
                },
                "value": "ModelPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5617,
            "start": 5585,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5587,
              "start": 5585,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 5617,
              "start": 5589,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5616,
                "start": 5590,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5616,
                  "start": 5590,
                },
                "value": "ModelPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5651,
            "start": 5620,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5623,
              "start": 5620,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5651,
              "start": 5625,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5651,
                "start": 5625,
              },
              "value": "ModelPostEditorFilterInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5653,
        "start": 5427,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5459,
          "start": 5433,
        },
        "value": "ModelPostEditorFilterInput",
      },
    },
  ],
  "kind": "Document",
  "loc": Object {
    "end": 5655,
    "start": 0,
  },
}
`;

exports[`validates VTL of a complex schema 1`] = `
Object {
  "Child.parents.req.vtl": "#if( $util.isNull($ctx.source.id) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"childID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.id)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.childName.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.childName.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.ge\\" }))
  #end
  ## [End] Applying Key Condition **
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byChild\\"
  }
#end",
  "Child.parents.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "Friendship.friend.req.vtl": "#if( $util.isNull($ctx.source.friendID) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.friendID)
  }
} )
  ## [Start] Applying Key Condition **
  #set( $sortKeyValue = \\"\\" )
  #set( $sortKeyValue2 = \\"\\" )
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
    #if( $ctx.args.nameSurname.between.size() != 2 )
      $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
    #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end


  ## [End] Applying Key Condition **
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end
  }
#end",
  "Friendship.friend.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "Mutation.createChild.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createChild.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **

{}",
  "Mutation.createChild.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Child\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createChild.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.createComment.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createComment.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Comment\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createComment.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.createFriendship.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createFriendship.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Friendship\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createFriendship.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.createParent.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createParent.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Parent\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createParent.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.createPost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPost.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"title\\": $util.dynamodb.toDynamoDB($mergedValues.title)
}))
## [End] Set the primary key. **

{}",
  "Mutation.createPost.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPost.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.createPostAuthor.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPostAuthor.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"PostAuthor\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPostAuthor.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.createPostEditor.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPostEditor.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"PostEditor\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPostEditor.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.createPostModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPostModel.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"PostModel\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPostModel.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.createTest.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createTest.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Test\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createTest.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.createTest1.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createTest1.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"email#name\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.email}#\${mergedValues.name}\\")
}))
## [End] Set the primary key. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", {
  \\"email#name\\": \\"emailName\\"
}))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put(\\"email#name\\", \\"emailName\\"))
#end
$util.qr($ctx.args.input.put(\\"email#name\\",\\"\${mergedValues.email}#\${mergedValues.name}\\"))
{}",
  "Mutation.createTest1.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Test1\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createTest1.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.createUser.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createUser.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", {
  \\"name#surname\\": \\"nameSurname\\"
}))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put(\\"name#surname\\", \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put(\\"name#surname\\",\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.createUser.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"User\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createUser.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.createUserModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createUserModel.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **

{}",
  "Mutation.createUserModel.postAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Validate create mutation for @index 'composite'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = [\\"name\\", \\"surname\\"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey(\\"$keyFieldName\\") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey(\\"$keyFieldName\\") )
    $util.error(\\"When creating any part of the composite sort key for @index 'composite', you must provide all fields for the key. Missing key: '$keyFieldName'.\\")
  #end
#end
## [End] Validate create mutation for @index 'composite'. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", {
  \\"name#surname\\": \\"nameSurname\\"
}))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put(\\"name#surname\\", \\"nameSurname\\"))
#end
#if( $hasSeenSomeKeyArg )
  $util.qr($ctx.args.input.put(\\"name#surname\\",\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
#end
{}",
  "Mutation.createUserModel.req.vtl": "## [Start] Create Request template. **
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"UserModel\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createUserModel.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deleteChild.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteChild.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteChild.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deleteComment.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteComment.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deleteFriendship.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteFriendship.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deleteParent.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteParent.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deletePost.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"title\\": $util.dynamodb.toDynamoDB($mergedValues.title)
}))
## [End] Set the primary key. **
{}",
  "Mutation.deletePost.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePost.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deletePostAuthor.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePostAuthor.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deletePostEditor.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePostEditor.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deletePostModel.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePostModel.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deleteTest.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteTest.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deleteTest1.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"email#name\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.email}#\${mergedValues.name}\\")
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteTest1.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteTest1.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deleteUser.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteUser.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteUser.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.deleteUserModel.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteUserModel.postAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", {
  \\"name#surname\\": \\"nameSurname\\"
}))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put(\\"name#surname\\", \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put(\\"name#surname\\",\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.deleteUserModel.req.vtl": "## [Start] Delete Request template. **
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteUserModel.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updateChild.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateChild.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **

{}",
  "Mutation.updateChild.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateChild.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updateComment.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateComment.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateComment.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updateFriendship.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateFriendship.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateFriendship.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updateParent.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateParent.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateParent.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updatePost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePost.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"title\\": $util.dynamodb.toDynamoDB($mergedValues.title)
}))
## [End] Set the primary key. **

{}",
  "Mutation.updatePost.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePost.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updatePostAuthor.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePostAuthor.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePostAuthor.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updatePostEditor.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePostEditor.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePostEditor.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updatePostModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePostModel.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePostModel.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updateTest.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateTest.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateTest.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updateTest1.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateTest1.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"email#name\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.email}#\${mergedValues.name}\\")
}))
## [End] Set the primary key. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", {
  \\"email#name\\": \\"emailName\\"
}))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put(\\"email#name\\", \\"emailName\\"))
#end
$util.qr($ctx.args.input.put(\\"email#name\\",\\"\${mergedValues.email}#\${mergedValues.name}\\"))
{}",
  "Mutation.updateTest1.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateTest1.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updateUser.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateUser.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", {
  \\"name#surname\\": \\"nameSurname\\"
}))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put(\\"name#surname\\", \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put(\\"name#surname\\",\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.updateUser.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateUser.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Mutation.updateUserModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateUserModel.postAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **

{}",
  "Mutation.updateUserModel.postAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Validate update mutation for @index 'composite'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = [\\"name\\", \\"surname\\"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey(\\"$keyFieldName\\") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey(\\"$keyFieldName\\") )
    $util.error(\\"When updating any part of the composite sort key for @index 'composite', you must provide all fields for the key. Missing key: '$keyFieldName'.\\")
  #end
#end
## [End] Validate update mutation for @index 'composite'. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", {
  \\"name#surname\\": \\"nameSurname\\"
}))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put(\\"name#surname\\", \\"nameSurname\\"))
#end
#if( $hasSeenSomeKeyArg )
  $util.qr($ctx.args.input.put(\\"name#surname\\",\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
#end
{}",
  "Mutation.updateUserModel.req.vtl": "## [Start] Mutation Update resolver. **
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $context.args.condition )
  $util.qr($ctx.stash.conditions.add($context.args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateUserModel.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Parent.child.req.vtl": "#if( $util.isNull($ctx.source.childID) || $util.isNull($ctx.source.childName) )
  #return
#else
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"GetItem\\",
      \\"key\\": {
          \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.childID, \\"___xamznone____\\")),
          \\"name\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.childName, \\"___xamznone____\\"))
    }
  }
#end",
  "Parent.child.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end",
  "Post.author.req.vtl": "#if( $util.isNull($ctx.source.owner) )
  #return
#else
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"GetItem\\",
      \\"key\\": {
          \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.owner, \\"___xamznone____\\"))
    }
  }
#end",
  "Post.author.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end",
  "Post.authors.req.vtl": "#if( $util.isNull($ctx.source.authorID) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 50) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.authorID)
  }
} )
  ## [Start] Applying Key Condition **
  #set( $sortKeyValue = \\"\\" )
  #set( $sortKeyValue2 = \\"\\" )
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
    #if( $ctx.args.nameSurname.between.size() != 2 )
      $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
    #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end


  ## [End] Applying Key Condition **
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end
  }
#end",
  "Post.authors.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "Post.comments.req.vtl": "#if( $util.isNull($ctx.source.id) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 50) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"postCommentsId\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.id)
  }
} )
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"gsi-Post.comments\\"
  }
#end",
  "Post.comments.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "Post.editors.req.vtl": "#if( $util.isNull($ctx.source.id) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"postID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.id)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.editorID) && !$util.isNull($ctx.args.editorID.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"editorID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.editorID.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.editorID) && !$util.isNull($ctx.args.editorID.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"editorID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.editorID.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.editorID.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.editorID) && !$util.isNull($ctx.args.editorID.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"editorID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.editorID.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.editorID) && !$util.isNull($ctx.args.editorID.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"editorID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.editorID.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.editorID) && !$util.isNull($ctx.args.editorID.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"editorID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.editorID.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.editorID) && !$util.isNull($ctx.args.editorID.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"editorID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.editorID.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.editorID) && !$util.isNull($ctx.args.editorID.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"editorID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.editorID.ge\\" }))
  #end
  ## [End] Applying Key Condition **
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byPost\\"
  }
#end",
  "Post.editors.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "PostAuthor.post.req.vtl": "#if( $util.isNull($ctx.source.postID) )
  #return
#else
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"GetItem\\",
      \\"key\\": {
          \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.postID, \\"___xamznone____\\"))
    }
  }
#end",
  "PostAuthor.post.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end",
  "PostEditor.editor.req.vtl": "#if( $util.isNull($ctx.source.editorID) )
  #return
#else
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"GetItem\\",
      \\"key\\": {
          \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.editorID, \\"___xamznone____\\"))
    }
  }
#end",
  "PostEditor.editor.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end",
  "PostEditor.post.req.vtl": "#if( $util.isNull($ctx.source.postID) )
  #return
#else
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"GetItem\\",
      \\"key\\": {
          \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.postID, \\"___xamznone____\\"))
    }
  }
#end",
  "PostEditor.post.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end",
  "PostModel.authors.req.vtl": "#if( $util.isNull($ctx.source.authorID) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey AND #sortKey = :sortKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\",
      \\"#sortKey\\": \\"name#surname\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.authorID),
      \\":sortKey\\": $util.dynamodb.toDynamoDB(\\"\${context.source.authorName}#\${context.source.authorSurname}\\")
  }
} )
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"composite\\"
  }
#end",
  "PostModel.authors.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "PostModel.singleAuthor.req.vtl": "#if( $util.isNull($ctx.source.authorID) || $util.isNull($ctx.source.authorName) || $util.isNull($ctx.source.authorSurname) )
  #return
#else
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"GetItem\\",
      \\"key\\": {
          \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.authorID, \\"___xamznone____\\")),
          \\"name#surname\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank(\\"\${ctx.source.authorName}#\${ctx.source.authorSurname}\\", \\"___xamznone____\\"))
    }
  }
#end",
  "PostModel.singleAuthor.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
$util.toJson($ctx.result)
#end",
  "Query.getChild.postAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"name\\": $util.dynamodb.toDynamoDB($ctx.args.name)
}))
## [End] Set the primary key. **
{}",
  "Query.getChild.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getChild.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.getComment.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getComment.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.getFriendship.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getFriendship.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.getParent.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getParent.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.getPost.postAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"title\\": $util.dynamodb.toDynamoDB($ctx.args.title)
}))
## [End] Set the primary key. **
{}",
  "Query.getPost.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPost.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.getPostAuthor.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPostAuthor.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.getPostModel.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPostModel.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.getTest.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getTest.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.getTest1.postAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"email#name\\": $util.dynamodb.toDynamoDB(\\"\${ctx.args.email}#\${ctx.args.name}\\")
}))
## [End] Set the primary key. **
{}",
  "Query.getTest1.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getTest1.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.getUser.postAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${ctx.args.name}#\${ctx.args.surname}\\")
}))
## [End] Set the primary key. **
{}",
  "Query.getUser.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getUser.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.getUserModel.postAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($ctx.args.rollNumber)
}))
## [End] Set the primary key. **
{}",
  "Query.getUserModel.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"GetItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($ctx.args.id)
} )
#end
$util.qr($GetRequest.put(\\"key\\", $key))
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getUserModel.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.listChildren.postAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.name) && $util.isNull($ctx.args.id) )
  $util.error(\\"When providing argument 'name' you must also provide arguments id\\", \\"InvalidArgumentsError\\")
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.beginsWith) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.beginsWith\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.between) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.name.between[0]\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.name.between[1]\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.eq) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.eq\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.lt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.lt\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.le) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.le\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.gt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.gt\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.ge) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.ge\\" }))
#end
## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listChildren.req.vtl": "## [Start] List Request. **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = $context.args.nextToken )
#end
#if( $context.args.filter )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.args.filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterEpression.expressionValues.size() == 0 )
      $util.qr($filterEpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listChildren.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.listComments.req.vtl": "## [Start] List Request. **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = $context.args.nextToken )
#end
#if( $context.args.filter )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.args.filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterEpression.expressionValues.size() == 0 )
      $util.qr($filterEpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listComments.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.listFriendships.req.vtl": "## [Start] List Request. **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = $context.args.nextToken )
#end
#if( $context.args.filter )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.args.filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterEpression.expressionValues.size() == 0 )
      $util.qr($filterEpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listFriendships.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.listParents.req.vtl": "## [Start] List Request. **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = $context.args.nextToken )
#end
#if( $context.args.filter )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.args.filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterEpression.expressionValues.size() == 0 )
      $util.qr($filterEpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listParents.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.listPostAuthors.req.vtl": "## [Start] List Request. **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = $context.args.nextToken )
#end
#if( $context.args.filter )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.args.filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterEpression.expressionValues.size() == 0 )
      $util.qr($filterEpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPostAuthors.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.listPostModels.req.vtl": "## [Start] List Request. **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = $context.args.nextToken )
#end
#if( $context.args.filter )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.args.filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterEpression.expressionValues.size() == 0 )
      $util.qr($filterEpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPostModels.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.listPosts.postAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"sortDirection is not supported for List operations without a Sort key defined.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
#if( !$util.isNull($ctx.args.title) )
  #set( $modelQueryExpression.expression = \\"#title = :title\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#title\\": \\"title\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":title\\": {
      \\"S\\": \\"$ctx.args.title\\"
  }
} )
#end
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listPosts.req.vtl": "## [Start] List Request. **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = $context.args.nextToken )
#end
#if( $context.args.filter )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.args.filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterEpression.expressionValues.size() == 0 )
      $util.qr($filterEpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPosts.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.listTest1s.postAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.emailName) && $util.isNullOrBlank($ctx.args.id) )
  $util.error(\\"When providing argument 'emailName' you must also provide 'id'.\\", \\"InvalidArgumentsError\\")
#end
#if( !$util.isNull($ctx.args.emailName) )
  #set( $sortKeyArgumentOperations = $ctx.args.emailName.keySet() )
  #if( $sortKeyArgumentOperations.size() > 1 )
    $util.error(\\"Argument emailName must specify at most one key condition operation.\\", \\"InvalidArgumentsError\\")
  #end
  #foreach( $operation in $sortKeyArgumentOperations )
    #if( $operation == \\"between\\" )
      #if( $ctx.args.emailName.between.size() != 2 )
        $util.error(\\"Argument 'emailName.between' expects exactly two elements.\\", \\"InvalidArgumentsError\\")
      #end
      #if( !$util.isNullOrBlank($ctx.args.emailName.between[0].name) && $util.isNullOrBlank($ctx.args.emailName.between[0].email) )
        $util.error(\\"When providing argument 'emailName.between[0].name' you must also provide 'emailName.between[0].email'.\\", \\"InvalidArgumentsError\\")
      #end
      #if( !$util.isNullOrBlank($ctx.args.emailName.between[1].name) && $util.isNullOrBlank($ctx.args.emailName.between[1].email) )
        $util.error(\\"When providing argument 'emailName.between[1].name' you must also provide 'emailName.between[1].email'.\\", \\"InvalidArgumentsError\\")
      #end
    #else
      #if( !$util.isNullOrBlank($ctx.args.emailName.get(\\"$operation\\").name) && $util.isNullOrBlank($ctx.args.emailName.get(\\"$operation\\").email) )
        $util.error(\\"When providing argument 'emailName.$operation.name' you must also provide 'emailName.$operation.email'.\\", \\"InvalidArgumentsError\\")
      #end
    #end
  #end
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#set( $sortKeyValue = \\"\\" )
#set( $sortKeyValue2 = \\"\\" )
#if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.beginsWith) )
#if( !$util.isNull($ctx.args.emailName.beginsWith.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.beginsWith.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.beginsWith.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.beginsWith.name\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.between) )
  #if( $ctx.args.emailName.between.size() != 2 )
    $util.error(\\"Argument emailName.between expects exactly 2 elements.\\")
  #end
#if( !$util.isNull($ctx.args.emailName.between[0].email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.between[0].email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.between[0].name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.emailName.between[1].email) ) #set( $sortKeyValue2 = \\"$ctx.args.emailName.between[1].email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.between[1].name) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.emailName.between[1].name\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
#end
#if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.eq) )
#if( !$util.isNull($ctx.args.emailName.eq.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.eq.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.eq.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.eq.name\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.lt) )
#if( !$util.isNull($ctx.args.emailName.lt.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.lt.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.lt.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.lt.name\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.le) )
#if( !$util.isNull($ctx.args.emailName.le.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.le.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.le.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.le.name\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.gt) )
#if( !$util.isNull($ctx.args.emailName.gt.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.gt.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.gt.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.gt.name\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.ge) )
#if( !$util.isNull($ctx.args.emailName.ge.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.ge.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.ge.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.ge.name\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end


## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listTest1s.req.vtl": "## [Start] List Request. **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = $context.args.nextToken )
#end
#if( $context.args.filter )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.args.filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterEpression.expressionValues.size() == 0 )
      $util.qr($filterEpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listTest1s.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.listTests.req.vtl": "## [Start] List Request. **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = $context.args.nextToken )
#end
#if( $context.args.filter )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.args.filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterEpression.expressionValues.size() == 0 )
      $util.qr($filterEpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listTests.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.listUserModels.postAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.rollNumber) && $util.isNull($ctx.args.id) )
  $util.error(\\"When providing argument 'rollNumber' you must also provide arguments id\\", \\"InvalidArgumentsError\\")
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.beginsWith) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.beginsWith\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.between) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"N\\": \\"$ctx.args.rollNumber.between[0]\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"N\\": \\"$ctx.args.rollNumber.between[1]\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.eq) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.eq\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.lt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.lt\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.le) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.le\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.gt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.gt\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.ge) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.ge\\" }))
#end
## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listUserModels.req.vtl": "## [Start] List Request. **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = $context.args.nextToken )
#end
#if( $context.args.filter )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.args.filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterEpression.expressionValues.size() == 0 )
      $util.qr($filterEpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listUserModels.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Query.listUsers.postAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.nameSurname) && $util.isNullOrBlank($ctx.args.id) )
  $util.error(\\"When providing argument 'nameSurname' you must also provide 'id'.\\", \\"InvalidArgumentsError\\")
#end
#if( !$util.isNull($ctx.args.nameSurname) )
  #set( $sortKeyArgumentOperations = $ctx.args.nameSurname.keySet() )
  #if( $sortKeyArgumentOperations.size() > 1 )
    $util.error(\\"Argument nameSurname must specify at most one key condition operation.\\", \\"InvalidArgumentsError\\")
  #end
  #foreach( $operation in $sortKeyArgumentOperations )
    #if( $operation == \\"between\\" )
      #if( $ctx.args.nameSurname.between.size() != 2 )
        $util.error(\\"Argument 'nameSurname.between' expects exactly two elements.\\", \\"InvalidArgumentsError\\")
      #end
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.between[0].surname) && $util.isNullOrBlank($ctx.args.nameSurname.between[0].name) )
        $util.error(\\"When providing argument 'nameSurname.between[0].surname' you must also provide 'nameSurname.between[0].name'.\\", \\"InvalidArgumentsError\\")
      #end
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.between[1].surname) && $util.isNullOrBlank($ctx.args.nameSurname.between[1].name) )
        $util.error(\\"When providing argument 'nameSurname.between[1].surname' you must also provide 'nameSurname.between[1].name'.\\", \\"InvalidArgumentsError\\")
      #end
    #else
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.get(\\"$operation\\").surname) && $util.isNullOrBlank($ctx.args.nameSurname.get(\\"$operation\\").name) )
        $util.error(\\"When providing argument 'nameSurname.$operation.surname' you must also provide 'nameSurname.$operation.name'.\\", \\"InvalidArgumentsError\\")
      #end
    #end
  #end
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#set( $sortKeyValue = \\"\\" )
#set( $sortKeyValue2 = \\"\\" )
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
  #if( $ctx.args.nameSurname.between.size() != 2 )
    $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
  #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end


## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listUsers.req.vtl": "## [Start] List Request. **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = $context.args.nextToken )
#end
#if( $context.args.filter )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.args.filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterEpression.expressionValues.size() == 0 )
      $util.qr($filterEpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listUsers.res.vtl": "## [Start] Get ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] Get ResponseTemplate. **",
  "Test.otherParts.req.vtl": "#if( $util.isNull($ctx.source.id) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.id)
  }
} )
  ## [Start] Applying Key Condition **
  #set( $sortKeyValue = \\"\\" )
  #set( $sortKeyValue2 = \\"\\" )
  #if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.beginsWith) )
#if( !$util.isNull($ctx.args.emailName.beginsWith.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.beginsWith.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.beginsWith.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.beginsWith.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.between) )
    #if( $ctx.args.emailName.between.size() != 2 )
      $util.error(\\"Argument emailName.between expects exactly 2 elements.\\")
    #end
#if( !$util.isNull($ctx.args.emailName.between[0].email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.between[0].email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.between[0].name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.emailName.between[1].email) ) #set( $sortKeyValue2 = \\"$ctx.args.emailName.between[1].email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.between[1].name) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.emailName.between[1].name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
  #end
  #if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.eq) )
#if( !$util.isNull($ctx.args.emailName.eq.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.eq.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.eq.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.eq.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.lt) )
#if( !$util.isNull($ctx.args.emailName.lt.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.lt.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.lt.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.lt.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.le) )
#if( !$util.isNull($ctx.args.emailName.le.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.le.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.le.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.le.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.gt) )
#if( !$util.isNull($ctx.args.emailName.gt.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.gt.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.gt.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.gt.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.emailName) && !$util.isNull($ctx.args.emailName.ge) )
#if( !$util.isNull($ctx.args.emailName.ge.email) ) #set( $sortKeyValue = \\"$ctx.args.emailName.ge.email\\" ) #end
#if( !$util.isNull($ctx.args.emailName.ge.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.emailName.ge.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"email#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end


  ## [End] Applying Key Condition **
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end
  }
#end",
  "Test.otherParts.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "Test.testObj.req.vtl": "#if( $util.isNull($ctx.source.id) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.id)
  }
} )
  ## [Start] Applying Key Condition **
  #set( $sortKeyValue = \\"\\" )
  #set( $sortKeyValue2 = \\"\\" )
  #if( !$util.isNull($ctx.args.friendIDName) && !$util.isNull($ctx.args.friendIDName.beginsWith) )
#if( !$util.isNull($ctx.args.friendIDName.beginsWith.friendID) ) #set( $sortKeyValue = \\"$ctx.args.friendIDName.beginsWith.friendID\\" ) #end
#if( !$util.isNull($ctx.args.friendIDName.beginsWith.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.friendIDName.beginsWith.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendIDName) && !$util.isNull($ctx.args.friendIDName.between) )
    #if( $ctx.args.friendIDName.between.size() != 2 )
      $util.error(\\"Argument friendIDName.between expects exactly 2 elements.\\")
    #end
#if( !$util.isNull($ctx.args.friendIDName.between[0].friendID) ) #set( $sortKeyValue = \\"$ctx.args.friendIDName.between[0].friendID\\" ) #end
#if( !$util.isNull($ctx.args.friendIDName.between[0].name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.friendIDName.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.friendIDName.between[1].friendID) ) #set( $sortKeyValue2 = \\"$ctx.args.friendIDName.between[1].friendID\\" ) #end
#if( !$util.isNull($ctx.args.friendIDName.between[1].name) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.friendIDName.between[1].name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendIDName) && !$util.isNull($ctx.args.friendIDName.eq) )
#if( !$util.isNull($ctx.args.friendIDName.eq.friendID) ) #set( $sortKeyValue = \\"$ctx.args.friendIDName.eq.friendID\\" ) #end
#if( !$util.isNull($ctx.args.friendIDName.eq.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.friendIDName.eq.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendIDName) && !$util.isNull($ctx.args.friendIDName.lt) )
#if( !$util.isNull($ctx.args.friendIDName.lt.friendID) ) #set( $sortKeyValue = \\"$ctx.args.friendIDName.lt.friendID\\" ) #end
#if( !$util.isNull($ctx.args.friendIDName.lt.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.friendIDName.lt.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendIDName) && !$util.isNull($ctx.args.friendIDName.le) )
#if( !$util.isNull($ctx.args.friendIDName.le.friendID) ) #set( $sortKeyValue = \\"$ctx.args.friendIDName.le.friendID\\" ) #end
#if( !$util.isNull($ctx.args.friendIDName.le.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.friendIDName.le.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendIDName) && !$util.isNull($ctx.args.friendIDName.gt) )
#if( !$util.isNull($ctx.args.friendIDName.gt.friendID) ) #set( $sortKeyValue = \\"$ctx.args.friendIDName.gt.friendID\\" ) #end
#if( !$util.isNull($ctx.args.friendIDName.gt.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.friendIDName.gt.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendIDName) && !$util.isNull($ctx.args.friendIDName.ge) )
#if( !$util.isNull($ctx.args.friendIDName.ge.friendID) ) #set( $sortKeyValue = \\"$ctx.args.friendIDName.ge.friendID\\" ) #end
#if( !$util.isNull($ctx.args.friendIDName.ge.name) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.friendIDName.ge.name\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID#name\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end


  ## [End] Applying Key Condition **
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"testIndex\\"
  }
#end",
  "Test.testObj.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "User.friendships.req.vtl": "#if( $util.isNull($ctx.source.id) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"userID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.id)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.friendID.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.friendID.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.ge\\" }))
  #end
  ## [End] Applying Key Condition **
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byUser\\"
  }
#end",
  "User.friendships.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "User.posts.req.vtl": "#if( $util.isNull($ctx.source.id) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"editorID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.id)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.postID.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.postID.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.ge\\" }))
  #end
  ## [End] Applying Key Condition **
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byEditor\\"
  }
#end",
  "User.posts.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "UserModel.authorPosts.req.vtl": "#if( $util.isNull($ctx.source.id) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"authorID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.id)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.postID.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.postID.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.ge\\" }))
  #end
  ## [End] Applying Key Condition **
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byAuthor\\"
  }
#end",
  "UserModel.authorPosts.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
}
`;
