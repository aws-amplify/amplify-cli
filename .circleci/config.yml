version: 2.1
machine:
    environment:
      PATH: "${PATH}:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin"

defaults: &defaults
  working_directory: ~/repo
  docker:
      - image: circleci/node:10.8

orbs:
  aws-cli: circleci/aws-cli@0.1.13

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run: yarn cache clean --force
      - run: yarn
      - run: yarn config set workspaces-experimental true
      - run: yarn run production-build
      - save_cache:
          key: amplify-cli-yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache
      - save_cache:
          key: amplify-cli-ssh-deps-{{ .Branch }}
          paths:
            - ~/.ssh
      - persist_to_workspace:
          root: .
          paths: .
  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          key: amplify-cli-yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Run tests
          command: yarn test-ci
  graphql_e2e_tests:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          key: amplify-cli-yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Run GraphQL end-to-end tests
          command: cd packages/graphql-transformers-e2e-tests/ && yarn e2e
          no_output_timeout: 45m

  amplify_e2e_tests:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          key: "amplify-cli-yarn-deps-{{ .Branch }}-{{ checksum \"yarn.lock\" }}"
      - run:
          command: "cd packages/amplify-e2e-tests && yarn run e2e"
          name: "Run Amplify end-to-end tests"
          no_output_timeout: 45m
    working_directory: ~/repo

  integration_test:
      working_directory: ~/repo
      docker:
        - image: cypress/base:10
          environment:
            TERM: dumb
      steps:
        - checkout
        - run: yarn install
        - run: apt-get install -y sudo
        - run: sudo apt-get install -y tcl
        - run: sudo apt-get install -y expect
        - run: sudo apt-get install -y zip
        - run: sudo apt-get install -y lsof
        - run: sudo apt-get install -y python
        - run: sudo apt-get update && sudo apt-get install -y python-pip libpython-dev
        - run: sudo apt-get install -y jq
        - run: pip install awscli
        - run: cd .circleci/ && chmod +x aws.sh
        - run: expect .circleci/aws_configure.exp
        - run: yarn setup-dev
        - run: amplify-dev
        - run:
            name: "Clone auth test package"
            command: |
              cd ..
              git clone $AUTH_CLONE_URL
              cd aws-amplify-cypress-auth
              yarn install
        - run: cd .circleci/ && chmod +x auth.sh
        - run: cd .circleci/ && chmod +x amplify_init.sh
        - run: cd .circleci/ && chmod +x amplify_init.exp
        - run: expect .circleci/amplify_init.exp ../aws-amplify-cypress-auth
        - run: expect .circleci/enable_auth.exp
        - run: cd ../aws-amplify-cypress-auth
        - run: yarn
        - run: cd ../aws-amplify-cypress-auth/src && cat $(find . -type f -name 'aws-exports*')
        - run:
            name: "Start Auth test server in background"
            command: |
              cd ../aws-amplify-cypress-auth
              pwd
              yarn start
            background: true
        - run: cat $(find ../repo -type f -name 'auth_spec*')
        - run:
            name: "Run cypress tests for auth"
            command: |
              cd ../aws-amplify-cypress-auth
              yarn add cypress --save
              cp ../repo/cypress.json .
              cp -R ../repo/cypress .
              node_modules/.bin/cypress run --spec $(find . -type f -name 'auth_spec*')
        - run: sudo kill -9 $(lsof -t -i:3000)
        - run: cd .circleci/ && chmod +x delete_auth.sh
        - run: expect .circleci/delete_auth.exp
        - run:
            name: "Clone API test package"
            command: |
              cd ..
              git clone $API_CLONE_URL
              cd aws-amplify-cypress-api
              yarn
        - run: cd .circleci/ && chmod +x api.sh
        - run: expect .circleci/amplify_init.exp ../aws-amplify-cypress-api
        - run: expect .circleci/enable_api.exp
        - run: cd ../aws-amplify-cypress-api
        - run: yarn
        - run: cd ../aws-amplify-cypress-api/src && cat $(find . -type f -name 'aws-exports*')
        - run:
            name: "Start API test server in background"
            command: |
              cd ../aws-amplify-cypress-api
              pwd
              yarn start
            background: true
        - run:
            name: "Run cypress tests for api"
            command: |
              cd ../aws-amplify-cypress-auth
              yarn add cypress --save
              cp ../repo/cypress.json .
              cp -R ../repo/cypress .
              node_modules/.bin/cypress run --spec $(find . -type f -name 'api_spec*')
        - run: cd .circleci/ && chmod +x delete_api.sh
        - run: expect .circleci/delete_api.exp
        - store_artifacts:
            path: ../../aws-amplify-cypress-auth/cypress/videos
        - store_artifacts:
            path: ../aws-amplify-cypress-auth/cypress/screenshots
        - store_artifacts:
            path: ../aws-amplify-cypress-api/cypress/videos
        - store_artifacts:
            path: ../aws-amplify-cypress-api/cypress/screenshots
  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          keys:
            - amplify-cli-ssh-deps-{{ .Branch }}
            - amplify-cli-yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Authenticate with npm
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run:
          name: "Publish Amplify CLI"
          command: |
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              git config --global user.email $GITHUB_EMAIL
              git config --global user.name $GITHUB_USER
              npm run publish:$CIRCLE_BRANCH
            else
              echo "Skipping deploy."
            fi
  integration_test_js:
    working_directory: ~/repo
    docker:
      - image: cypress/base:10
        environment:
          TERM: dumb
    steps:
      - attach_workspace:
          at: ./
      - run: 
          command: |
            apt-get install -y sudo
            sudo apt-get install -y lsof
            sudo apt-get install -y python
            sudo apt-get update && sudo apt-get install -y python-pip libpython-dev
          name: "Install AWS CLI dependencies"
      - run: 
          command: |
            cd ..
            mkdir videos
            mkdir screenshots
            npm install cypress
          name: "Install Cypress Binary"
      - aws-cli/install
      - aws-cli/configure
      - run:
          command: "cd packages/amplify-ui-tests && yarn run ui js"
          name: "Run ui tests in JS SDK"
          no_output_timeout: 45m
      - store_artifacts:
          path: /root/videos
      - store_artifacts:
          path: /root/screenshots
  integration_test_ios:
    macos:
      xcode: "10.2.1"
    parameters:
      appname:
        description: "specifies app for UI Testing. Should be a subset of apps specified in config file"
        type: string
        default: "S3TransferUtility"
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: "Install Latest Cocoapods and set-up master repo"
          command: |
            sudo gem install cocoapods
            pod --version
            pod setup
      - run:
          name: "Install XCPretty"
          command: |
            sudo gem install xcpretty
      - run:
          name: "Set up environment variables"
          command: |
            cd ..
            circleci_root_directory=$(pwd)
            echo "export circleci_root_directory=$circleci_root_directory" >> $BASH_ENV
      - run:
          name: "Checkout sample apps repository"
          command: |
            cd ..
            git clone https://github.com/phanisrikar93/aws-sdk-ios-samples
      - aws-cli/install
      - aws-cli/configure
      - run:
          name: "Edit config file for UITests"
          command: |
            cd ../aws-sdk-ios-samples/CircleciScripts
            python3 edit_uitest_config.py -s master -l uitest_logs
      - run:
          name: "Set-Up Pods"
          command: |
            cd ../aws-sdk-ios-samples/CircleciScripts
            python3 run_setup_pods.py -n << parameters.appname >> -a ${circleci_root_directory}/aws-sdk-ios-samples
      - run:
          name: "Configure AWS Resources"
          command: |
            cd packages/amplify-ui-tests
            cp ${circleci_root_directory}/aws-sdk-ios-samples/<< parameters.appname >>/simple_model.graphql ./schemas/simple_model.graphql
            npm run config ${circleci_root_directory}/aws-sdk-ios-samples/<< parameters.appname >> ios auth storage api
      - run:
          name: "Build and UITest"
          command: |
            cd ../aws-sdk-ios-samples/CircleciScripts
            python3 run_build_and_uitest.py -n << parameters.appname >> -a ${circleci_root_directory}/aws-sdk-ios-samples -c ${circleci_root_directory}   
      - run:
          name: "Clean-Up UITest"
          command: |
            cd packages/amplify-ui-tests
            npm run delete ${circleci_root_directory}/aws-sdk-ios-samples/<< parameters.appname >>
      - store_artifacts:
          path: ../uitest_logs
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - graphql_e2e_tests:
          filters:
            branches:
              only:
                - master
                - graphql_e2e_testing
          requires:
            - build
      - integration_test:
          filters:
            branches:
              only:
                - master
                - beta
          requires:
            - build
      - amplify_e2e_tests:
          filters:
            branches:
              only:
                - master
          requires:
            - build

      - deploy:
          requires:
            - build
            - test
            - integration_test
            - graphql_e2e_tests
            - amplify_e2e_tests
          filters:
            branches:
              only:
                - release
                - master
                - beta
      - integration_test_js:
          filters:
            branches:
              only:
                - integtest
          requires:
            - build
      - integration_test_ios:
          filters:
            branches:
              only:
                - integtest
          requires:
            - build
