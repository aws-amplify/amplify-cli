version: 2.1

orbs:
  aws-ecr:
    commands:
        build-and-push-image:
            description: |
                Install AWS CLI, if needed, and configure. Log into Amazon ECR and push image to repository. Requires environment variables for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
            parameters:
                account-url:
                    default: AWS_ECR_ACCOUNT_URL
                    description: |
                        Env var storing Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com defaults to AWS_ECR_ACCOUNT_URL
                    type: env_var_name
                attach-workspace:
                    default: false
                    description: |
                        Boolean for whether or not to attach to an existing workspace. Default is false.
                    type: boolean
                aws-access-key-id:
                    default: AWS_ACCESS_KEY_ID
                    description: |
                        AWS access key id for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_ACCESS_KEY.
                    type: env_var_name
                aws-secret-access-key:
                    default: AWS_SECRET_ACCESS_KEY
                    description: |
                        AWS secret key for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
                    type: env_var_name
                aws-session-token:
                    default: AWS_SESSION_TOKEN
                    description: |
                        AWS Session token for temporary credentials
                    type: env_var_name
                checkout:
                    default: true
                    description: |
                        Boolean for whether or not to checkout as a first step. Default is true.
                    type: boolean
                create-repo:
                    default: false
                    description: Should the repo be created if it does not exist?
                    type: boolean
                docker-login:
                    default: false
                    description: |
                        Enable dockerhub authentication. Defaults to false.
                    type: boolean
                dockerfile:
                    default: Dockerfile
                    description: Name of dockerfile to use. Defaults to Dockerfile.
                    type: string
                dockerhub-password:
                    default: DOCKERHUB_PASSWORD
                    description: |
                        Dockerhub password to be configured. Set this to the name of the environment variable you will set to hold this value, i.e. DOCKERHUB_PASSWORD.
                    type: env_var_name
                dockerhub-username:
                    default: DOCKERHUB_USERNAME
                    description: |
                        Dockerhub username to be configured. Set this to the name of the environment variable you will set to hold this value, i.e. DOCKERHUB_USERNAME.
                    type: env_var_name
                executor:
                    default: default
                    description: executor to use for this job
                    type: executor
                extra-build-args:
                    default: ""
                    description: |
                        Extra flags to pass to docker build. For examples, see https://docs.docker.com/engine/reference/commandline/build
                    type: string
                no-output-timeout:
                    default: 10m
                    description: |
                        The amount of time to allow the docker build command to run before timing out (default is `10m`)
                    type: string
                path:
                    default: .
                    description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
                    type: string
                profile-name:
                    default: default
                    description: AWS profile name to be configured.
                    type: string
                region:
                    default: AWS_REGION
                    description: |
                        Name of env var storing your AWS region information, defaults to AWS_REGION
                    type: env_var_name
                remote-docker-layer-caching:
                    default: false
                    description: |
                        Enable Docker layer caching if using remote Docker engine. Defaults to false.
                    type: boolean
                remote-docker-version:
                    default: 19.03.13
                    description: Specific remote docker version
                    type: string
                repo:
                    description: Name of an Amazon ECR repository
                    type: string
                repo-scan-on-push:
                    default: true
                    description: Should the created repo be security scanned on push?
                    type: boolean
                setup-remote-docker:
                    default: false
                    description: |
                        Setup and use CircleCI's remote Docker environment for Docker and docker-compose commands? Not required if using the default executor
                    type: boolean
                skip-when-tags-exist:
                    default: false
                    description: Whether to skip image building if all specified tags already exist in ECR
                    type: boolean
                tag:
                    default: latest
                    description: A comma-separated string containing docker image tags to build and push (default = latest)
                    type: string
                workspace-root:
                    default: .
                    description: |
                        Workspace root path that is either an absolute path or a path relative to the working directory. Defaults to '.' (the working directory)
                    type: string
            steps:
                - when:
                    condition: <<parameters.checkout>>
                    steps:
                        - checkout
                - when:
                    condition: <<parameters.attach-workspace>>
                    steps:
                        - attach_workspace:
                            at: <<parameters.workspace-root>>
                - when:
                    condition: <<parameters.setup-remote-docker>>
                    steps:
                        - setup_remote_docker:
                            docker_layer_caching: <<parameters.remote-docker-layer-caching>>
                            version: <<parameters.remote-docker-version>>
                - ecr-login:
                    account-url: <<parameters.account-url>>
                    aws-access-key-id: <<parameters.aws-access-key-id>>
                    aws-secret-access-key: <<parameters.aws-secret-access-key>>
                    aws-session-token: <<parameters.aws-session-token>>
                    profile-name: <<parameters.profile-name>>
                    region: <<parameters.region>>
                - when:
                    condition: <<parameters.create-repo>>
                    steps:
                        - run: |
                            aws ecr describe-repositories --profile <<parameters.profile-name>> --region $<<parameters.region>> --repository-names <<parameters.repo>> > /dev/null 2>&1 || \
                            aws ecr create-repository --profile <<parameters.profile-name>> --region $<<parameters.region>> --repository-name <<parameters.repo>> --image-scanning-configuration scanOnPush=<<parameters.repo-scan-on-push>>
                - when:
                    condition: <<parameters.docker-login>>
                    steps:
                        - run: |
                            docker login -u $<<parameters.dockerhub-username>> -p $<<parameters.dockerhub-password>>
                - build-image:
                    account-url: <<parameters.account-url>>
                    aws-access-key-id: <<parameters.aws-access-key-id>>
                    aws-secret-access-key: <<parameters.aws-secret-access-key>>
                    aws-session-token: <<parameters.aws-session-token>>
                    dockerfile: <<parameters.dockerfile>>
                    extra-build-args: <<parameters.extra-build-args>>
                    no-output-timeout: <<parameters.no-output-timeout>>
                    path: <<parameters.path>>
                    profile-name: <<parameters.profile-name>>
                    region: <<parameters.region>>
                    repo: <<parameters.repo>>
                    skip-when-tags-exist: <<parameters.skip-when-tags-exist>>
                    tag: <<parameters.tag>>
                - push-image:
                    account-url: <<parameters.account-url>>
                    repo: <<parameters.repo>>
                    tag: <<parameters.tag>>
        build-image:
            description: Build a docker image
            parameters:
                account-url:
                    default: AWS_ECR_ACCOUNT_URL
                    description: |
                        The Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com
                    type: env_var_name
                aws-access-key-id:
                    default: AWS_ACCESS_KEY_ID
                    description: |
                        AWS access key id for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_ACCESS_KEY.
                    type: env_var_name
                aws-secret-access-key:
                    default: AWS_SECRET_ACCESS_KEY
                    description: |
                        AWS secret key for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
                    type: env_var_name
                aws-session-token:
                    default: AWS_SESSION_TOKEN
                    description: |
                        AWS Session token for temporary credentials
                    type: env_var_name
                checkout:
                    default: false
                    description: |
                        Boolean for whether or not to checkout as a first step. Default is false.
                    type: boolean
                dockerfile:
                    default: Dockerfile
                    description: Name of dockerfile to use. Defaults to Dockerfile.
                    type: string
                ecr-login:
                    default: false
                    description: |
                        Boolean for whether or not to log in to ECR before building. Default is false.
                    type: boolean
                extra-build-args:
                    default: ""
                    description: |
                        Extra flags to pass to docker build. For examples, see https://docs.docker.com/engine/reference/commandline/build
                    type: string
                no-output-timeout:
                    default: 10m
                    description: The amount of time to allow the docker command to run before timing out.
                    type: string
                path:
                    default: .
                    description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
                    type: string
                profile-name:
                    default: default
                    description: |
                        AWS profile name to be configured. Only required when skip-when-tags-exist or ecr-login are set to true.
                    type: string
                region:
                    default: AWS_REGION
                    description: |
                        Name of env var storing your AWS region information, defaults to AWS_REGION. Only required when skip-when-tags-exist or ecr-login are set to true.
                    type: env_var_name
                repo:
                    description: Name of an Amazon ECR repository
                    type: string
                skip-when-tags-exist:
                    default: false
                    description: Whether to skip image building if all specified tags already exist in ECR
                    type: boolean
                tag:
                    default: latest
                    description: A comma-separated string containing docker image tags (default = latest)
                    type: string
            steps:
                - when:
                    condition: <<parameters.checkout>>
                    steps:
                        - checkout
                - when:
                    condition:
                        or:
                            - <<parameters.ecr-login>>
                            - <<parameters.skip-when-tags-exist>>
                    steps:
                        - ecr-login:
                            account-url: <<parameters.account-url>>
                            aws-access-key-id: <<parameters.aws-access-key-id>>
                            aws-secret-access-key: <<parameters.aws-secret-access-key>>
                            aws-session-token: <<parameters.aws-session-token>>
                            profile-name: <<parameters.profile-name>>
                            region: <<parameters.region>>
                - run:
                    command: |
                        registry_id=$(echo $<<parameters.account-url>> | sed "s;\..*;;g")
                        number_of_tags_in_ecr=0

                        docker_tag_args=""
                        IFS="," read -ra DOCKER_TAGS \<<< "<< parameters.tag >>"
                        for tag in "${DOCKER_TAGS[@]}"; do
                          if [ "<<parameters.skip-when-tags-exist>>" = "true" ]; then
                            docker_tag_exists_in_ecr=$(aws ecr describe-images --profile <<parameters.profile-name>> --registry-id $registry_id --repository-name <<parameters.repo>> --query "contains(imageDetails[].imageTags[], '$tag')")
                            if [ "$docker_tag_exists_in_ecr" = "true" ]; then
                              docker pull $<<parameters.account-url>>/<<parameters.repo>>:${tag}
                              let "number_of_tags_in_ecr+=1"
                            fi
                          fi
                          docker_tag_args="$docker_tag_args -t $<<parameters.account-url>>/<<parameters.repo>>:$tag"
                        done
                        if [ "<<parameters.skip-when-tags-exist>>" = "false" ] || [ "<<parameters.skip-when-tags-exist>>" = "true" -a $number_of_tags_in_ecr -lt ${#DOCKER_TAGS[@]} ]; then
                          docker build \
                            <<#parameters.extra-build-args>><<parameters.extra-build-args>><</parameters.extra-build-args>> \
                            -f <<parameters.path>>/<<parameters.dockerfile>> \
                            $docker_tag_args \
                            <<parameters.path>> \
                            --build-arg PKG_AWS_ACCESS_KEY=$PKG_AWS_ACCESS_KEY \
                            --build-arg PKG_AWS_SECRET_ACCESS_KEY=$PKG_AWS_SECRET_ACCESS_KEY \
                            --build-arg PKG_AWS_SESSION_TOKEN=$PKG_AWS_SESSION_TOKEN \
                            --build-arg AWS_REGION=$AWS_REGION
                        fi
                    name: Build docker image
                    no_output_timeout: <<parameters.no-output-timeout>>
        ecr-login:
            description: Authenticate into the Amazon ECR service
            parameters:
                account-url:
                    default: AWS_ECR_ACCOUNT_URL
                    description: |
                        Env var storing Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com defaults to AWS_ECR_ACCOUNT_URL
                    type: env_var_name
                aws-access-key-id:
                    default: AWS_ACCESS_KEY_ID
                    description: |
                        AWS access key id for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_ACCESS_KEY.
                    type: env_var_name
                aws-secret-access-key:
                    default: AWS_SECRET_ACCESS_KEY
                    description: |
                        AWS secret key for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
                    type: env_var_name
                aws-session-token:
                    default: AWS_SESSION_TOKEN
                    description: |
                        AWS Session token for temporary credentials
                    type: env_var_name
                profile-name:
                    default: default
                    description: |
                        AWS profile name to be configured. defaults to "default"
                    type: string
                region:
                    default: AWS_REGION
                    description: |
                        Name of env var storing your AWS region information, defaults to AWS_REGION
                    type: env_var_name
            steps:
                - aws-cli/setup:
                    aws-access-key-id: <<parameters.aws-access-key-id>>
                    aws-region: <<parameters.region>>
                    aws-secret-access-key: <<parameters.aws-secret-access-key>>
                    profile-name: <<parameters.profile-name>>
                - run:
                    command: |
                        # get-login-password returns a password that we pipe to the docker login command
                        aws configure set aws_access_key_id $<<parameters.aws-access-key-id>> --profile <<parameters.profile-name>>
                        aws configure set aws_secret_access_key $<<parameters.aws-secret-access-key>> --profile <<parameters.profile-name>>
                        [ -z "${<<parameters.aws-session-token>>}" ] || aws configure set aws_session_token $<<parameters.aws-session-token>> --profile <<parameters.profile-name>>
                        aws ecr-public get-login-password --region $<<parameters.region>> --profile <<parameters.profile-name>> | docker login --username AWS --password-stdin public.ecr.aws
                    name: Log into Amazon ECR
        push-image:
            description: Push a container image to the Amazon ECR registry
            parameters:
                account-url:
                    default: AWS_ECR_ACCOUNT_URL
                    description: |
                        Env var storing Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com defaults to AWS_ECR_ACCOUNT_URL
                    type: env_var_name
                repo:
                    description: Name of an Amazon ECR repository
                    type: string
                tag:
                    default: latest
                    description: A comma-separated string containing docker image tags (default = latest)
                    type: string
            steps:
                - run:
                    command: |
                        IFS="," read -ra DOCKER_TAGS \<<< "<< parameters.tag >>"
                        for tag in "${DOCKER_TAGS[@]}"; do
                          docker push $<<parameters.account-url>>/<<parameters.repo>>:${tag}
                        done
                    name: Push image to Amazon ECR
    description: |
        Build images and push them to the Amazon Elastic Container Registry.
    display:
        source_url: https://github.com/CircleCI-Public/aws-ecr-orb
    examples:
        simple-build-and-push:
            description: Log into AWS, build and push image to Amazon ECR
            usage:
                orbs:
                    aws-ecr: circleci/aws-ecr@x.y.z
                version: 2.1
                workflows:
                    build_and_push_image:
                        jobs:
                            - aws-ecr/build-and-push-image:
                                account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
                                aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
                                aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
                                aws-session-token: SESSION_TOKEN_ENV_VAR_NAME
                                context: myContext
                                create-repo: true
                                dockerfile: myDockerfile
                                no-output-timeout: 20m
                                path: pathToMyDockerfile
                                profile-name: myProfileName
                                region: AWS_REGION_ENV_VAR_NAME
                                repo: myECRRepository
                                skip-when-tags-exist: false
                                tag: latest,myECRRepoTag
    executors:
        default:
            description: |
                CircleCI's Ubuntu-based machine executor VM: https://circleci.com/docs/2.0/executor-types/#using-machine
            machine:
                docker_layer_caching: <<parameters.use-docker-layer-caching>>
                image: <<parameters.image>>
            parameters:
                image:
                    default: ubuntu-2004:202010-01
                    type: string
                use-docker-layer-caching:
                    default: false
                    type: boolean
    jobs:
        build-and-push-image:
            description: |
                Install AWS CLI, if needed, and configure. Log into Amazon ECR and push image to repository. Requires environment variables for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
            executor: <<parameters.executor>>
            parameters:
                account-url:
                    default: AWS_ECR_ACCOUNT_URL
                    description: |
                        Env var storing Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com defaults to AWS_ECR_ACCOUNT_URL
                    type: env_var_name
                attach-workspace:
                    default: false
                    description: |
                        Boolean for whether or not to attach to an existing workspace. Default is false.
                    type: boolean
                aws-access-key-id:
                    default: AWS_ACCESS_KEY_ID
                    description: |
                        AWS access key id for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_ACCESS_KEY_ID.
                    type: env_var_name
                aws-secret-access-key:
                    default: AWS_SECRET_ACCESS_KEY
                    description: |
                        AWS secret key for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
                    type: env_var_name
                aws-session-token:
                    default: AWS_SESSION_TOKEN
                    description: |
                        AWS Session token for temporary credentials
                    type: env_var_name
                checkout:
                    default: true
                    description: |
                        Boolean for whether or not to checkout as a first step. Default is true.
                    type: boolean
                create-repo:
                    default: false
                    description: Should the repo be created if it does not exist?
                    type: boolean
                docker-login:
                    default: false
                    description: |
                        Enable dockerhub authentication. Defaults to false.
                    type: boolean
                dockerfile:
                    default: Dockerfile
                    description: Name of dockerfile to use. Defaults to Dockerfile.
                    type: string
                dockerhub-password:
                    default: DOCKERHUB_PASSWORD
                    description: |
                        Dockerhub password to be configured. Set this to the name of the environment variable you will set to hold this value, i.e. DOCKERHUB_PASSWORD.
                    type: env_var_name
                dockerhub-username:
                    default: DOCKERHUB_USERNAME
                    description: |
                        Dockerhub username to be configured. Set this to the name of the environment variable you will set to hold this value, i.e. DOCKERHUB_USERNAME.
                    type: env_var_name
                executor:
                    default: default
                    description: executor to use for this job
                    type: executor
                extra-build-args:
                    default: ""
                    description: |
                        Extra flags to pass to docker build. For examples, see https://docs.docker.com/engine/reference/commandline/build
                    type: string
                no-output-timeout:
                    default: 10m
                    description: |
                        The amount of time to allow the docker build command to run before timing out. Defaults to '10m'
                    type: string
                path:
                    default: .
                    description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
                    type: string
                profile-name:
                    default: default
                    description: AWS profile name to be configured.
                    type: string
                region:
                    default: AWS_REGION
                    description: |
                        Name of env var storing your AWS region information, defaults to AWS_REGION
                    type: env_var_name
                remote-docker-layer-caching:
                    default: false
                    description: |
                        Enable Docker layer caching if using remote Docker engine. Defaults to false.
                    type: boolean
                remote-docker-version:
                    default: 19.03.13
                    description: Specific remote docker version
                    type: string
                repo:
                    description: Name of an Amazon ECR repository
                    type: string
                setup-remote-docker:
                    default: false
                    description: |
                        Setup and use CircleCI's remote Docker environment for Docker and docker-compose commands? Not required if using the default executor
                    type: boolean
                skip-when-tags-exist:
                    default: false
                    description: Whether to skip image building if all specified tags already exist in ECR
                    type: boolean
                tag:
                    default: latest
                    description: A comma-separated string containing docker image tags to build and push (default = latest)
                    type: string
                workspace-root:
                    default: .
                    description: |
                        Workspace root path that is either an absolute path or a path relative to the working directory. Defaults to '.' (the working directory)
                    type: string
            steps:
                - build-and-push-image:
                    account-url: <<parameters.account-url>>
                    attach-workspace: <<parameters.attach-workspace>>
                    aws-access-key-id: <<parameters.aws-access-key-id>>
                    aws-secret-access-key: <<parameters.aws-secret-access-key>>
                    aws-session-token: <<parameters.aws-session-token>>
                    checkout: <<parameters.checkout>>
                    create-repo: <<parameters.create-repo>>
                    docker-login: <<parameters.docker-login>>
                    dockerfile: <<parameters.dockerfile>>
                    dockerhub-password: <<parameters.dockerhub-password>>
                    dockerhub-username: <<parameters.dockerhub-username>>
                    extra-build-args: <<parameters.extra-build-args>>
                    no-output-timeout: <<parameters.no-output-timeout>>
                    path: <<parameters.path>>
                    profile-name: <<parameters.profile-name>>
                    region: <<parameters.region>>
                    remote-docker-layer-caching: <<parameters.remote-docker-layer-caching>>
                    remote-docker-version: <<parameters.remote-docker-version>>
                    repo: <<parameters.repo>>
                    setup-remote-docker: <<parameters.setup-remote-docker>>
                    skip-when-tags-exist: <<parameters.skip-when-tags-exist>>
                    tag: <<parameters.tag>>
                    workspace-root: <<parameters.workspace-root>>
    orbs:
        aws-cli: circleci/aws-cli@2.0.0
    version: 2.1

jobs:
  build:
    docker:
      - image: circleci/node:12
    steps:
      - setup_remote_docker
      - aws-ecr/build-and-push-image:
          aws-access-key-id: ECR_ACCESS_KEY
          aws-secret-access-key: ECR_SECRET_ACCESS_KEY
          aws-session-token: ECR_SESSION_TOKEN
          region: ECR_REGION
          checkout: true
          create-repo: false
          dockerfile: Dockerfile
          repo: amplify-cli-e2e-base-image-repo-public
          tag: "latest,${CIRCLE_SHA1}"

workflows:
  build_and_push_image:
    jobs:
      - build:
          context:
            - amplify-cli-ecr
            - amplify-pkg-fetch-node-binaries
          filters:
            branches:
              only:
                - e2e-image-build
